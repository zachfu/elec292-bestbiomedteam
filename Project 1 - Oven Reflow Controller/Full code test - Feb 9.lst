                  2   $LIST
0000              4   ; Reset vector
0000              5   org 0000H
0000 0208D5       6      ljmp MainProgram
0003              7   
0003              8   ; External interrupt 0 vector (not used in this code)
0003              9   org 0x0003
0003 32          10            reti
0004             11   
0004             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 02064D      14            ljmp Timer0_ISR
000E             15            
000E             16   ; External interrupt 1 vector (not used in this code)
0013             17   org 0x0013
0013 32          18            reti
0014             19   
0014             20   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             21   org 0x001B
001B 32          22            reti
001C             23   
001C             24   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             25   org 0x0023 
0023 32          26            reti
0024             27            
0024             28   ; Timer/Counter 2 overflow interrupt vector
002B             29   org 0x002B
002B 02068C      30            ljmp Timer2_ISR
002E             31            
002E             32   ;++++++++++++++++++ CONSTANTS ++++++++++++++++++++
002E             33   VLED     EQU 207
002E             34   ;++++++++++++++++++ TIMER & BAUDRATE  ++++++++++++
002E             35   CLK              EQU 22118400                                                     ; Microcontroller system crystal frequency in Hz
002E             36   TIMER0_RATE        EQU 4096                                                               ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             37   TIMER0_RELOAD      EQU ((65536-(CLK/TIMER0_RATE)))
002E             38   TIMER2_RATE        EQU 1000                                                               ; 1000Hz, for a timer tick of 1ms
002E             39   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
002E             40   BAUD                                     EQU 115200
002E             41   T1LOAD                                   EQU (0x100-(CLK/(16*BAUD)))
002E             42   
002E             43   SAMPLE_INTERVAL EQU 250                                                                  ; Millisecond Interval when sampling (KEEP LESS THAN 256)
002E             44   
002E             45   PWM_PERCENT                      EQU 10
002E             46   PWM_RELOAD_HIGH EQU (255*PWM_PERCENT/100)
002E             47   PWM_RELOAD_LOW   EQU     (255 - PWM_RELOAD_HIGH)
002E             48   
002E             49   SHORT_BEEP_LENGTH        EQU 4   ; Length of short beep (in 100s of ms)
002E             50   LONG_BEEP_LENGTH         EQU 10          ; Length of long beep   (in 100s of ms)
002E             51   SIX_BEEP_LENGTH          EQU 12  ; Total length of six beep sequence (in 100s of ms)(keep at 12 until further notice)
002E             52   
002E             53   ;------------------------------------------------
002E             54   
002E             55   ;++++++++++++++++++ SPI PINS ++++++++++++++++
002E             56   CE_ADC  EQU P2.0
002E             57   MY_MOSI EQU P2.1
002E             58   MY_MISO EQU P2.2
002E             59   MY_SCLK EQU P2.3
002E             60   ;--------------------------------------------
002E             61   
002E             62   ;++++++++++++++++++ LCD PINS ++++++++++++++++
002E             63   LCD_RS equ P1.2
002E             64   LCD_RW equ P1.3
002E             65   LCD_E  equ P1.4
002E             66   LCD_D4 equ P3.2
002E             67   LCD_D5 equ P3.3
002E             68   LCD_D6 equ P3.4
002E             69   LCD_D7 equ P3.5
002E             70   ;--------------------------------------------
002E             71   
002E             72   GREEN    equ P2.4
002E             73   YELLOW   equ P2.5
002E             74   RED              equ     P2.6
002E             75   BLUE     equ P2.7
002E             76   
002E             77   SSR_OUT              equ P3.7    ; Pin connected to SSR
002E             78   BOOT_BUTTON     equ P4.5
002E             79   PWM_BUTTON      equ P0.3
002E             80   SOUND_OUT       equ P1.0         ; Pin connected to speaker
002E             81   
002E             82   ;++++++++++++++++++ CONTROL BUTTONS++++++++++
002E             83   CYCLE_BUTTON        equ P0.0     ; Button to change cycles
002E             84   INC_BUTTON                                       equ P0.2
002E             85   DEC_BUTTON          equ P0.4
002E             86   ;--------------------------------------------
002E             87   
                218   $LIST
                586   $LIST
                 96   $LIST
0418            111   $LIST
                 93   $LIST
0418             95   
0418             96            
0418             97   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             98   DSEG at 0x30
0030             99   
0030            100            Count1ms:                                       ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032            101            Count_Sample:                   ds 1 ; Sample is taken every 250ms
0033            102            Count_PWM:                              ds 1 ; PWM cycle runs every 255ms
0034            103            soak_seconds:                   ds 1
0035            104            soak_temp:                              ds 1
0036            105            reflow_seconds:                 ds 1
0037            106            reflow_temp:                    ds 1
0038            107     run_time_min:                          ds 1
0039            108            run_time_sec:                   ds 1
003A            109            state_time:                             ds 1
003B            110     Count100ms:     ds 1     ; Incremented every 1ms when Timer 2 ISR is triggered, used to determine when 0.1s has passed
003C            111            Short_Beep_Counter: ds 1
003D            112            Long_Beep_Counter:  ds 1
003E            113            Six_Beep_Counter:         ds 1 ;
003F            114            
003F            115   ;+++++++++ 32 bit Calculation variables +++++++++++      
003F            116            x:                                      ds 4
0043            117            y:                                                      ds 4
0047            118            Result:                                         ds 2
0049            119            bcd:                                                    ds 5
004E            120            x_lm335:                                        ds 4
0052            121            Vcc:                                                    ds 4
0056            122            samplesum:                              ds 4
005A            123   ;--------------------------------------------
005A            124            state:                                          ds 1
005B            125            current_temp:                   ds 4
005F            126   
005F            127            
005F            128   
0000            129   BSEG
0000            130            mf:                                                     dbit 1
0001            131            one_min_flag:           dbit 1  ; Set to 1 after first 60 seconds of reflow cycle
0002            132            pwm_on:                                         dbit 1  ; Set to 1 to turn PWM on
0003            133            pwm_high:                               dbit 1  ; Flag for when PWM output is currently high
0004            134     settings_modified_flag:                dbit 1  ; Flag for when parameters have been changed
0005            135            sample_flag:                    dbit 1  ; Flag turned on every SAMPLE_INTERVAL to take a reading
0006            136     short_beep_flag:       dbit 1
0007            137            long_beep_flag:                 dbit 1
0008            138            six_beep_flag:          dbit 1
0009            139            led_flag:               dbit 1
000A            140   
0418            141   CSEG
0418            142   ;                                                                        1234567890123456    <- This helps determine the location of the Strings
0418 20526566   143     StartMessage:                                  db ' Reflow Control ', 0
     6C6F7720
     436F6E74
     726F6C20
     00
0429 53746172   144     StartMessage2:                         db 'Start / Settings', 0
     74202F20
     53657474
     696E6773
     00
043A 536F616B   145            SoakTime_Message:               db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
044B 536F616B   146            SoakTemp_Message:               db 'Soak Temperature', 0
     2054656D
     70657261
     74757265
     00
045C 5265666C   147            ReflowTime_Message:     db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
046D 5265666C   148            ReflowTemp_Message:     db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
047E 53746172   149            Start_Message:                          db 'Start Process?  ', 0
     74205072
     6F636573
     733F2020
     00
048F 20202D20   150     Y_N_Message:                                   db '  - No | + Yes  ', 0
     4E6F207C
     202B2059
     65732020
     00
04A0 20436F6F   151     TempTooHighMsg:                                db ' Cooling...     ', 0
     6C696E67
     2E2E2E20
     20202020
     00
04B1 20506C65   152     TempTooHighMsg2:      db ' Please Wait    ', 0
     61736520
     57616974
     20202020
     00
04C2 50574D20   153            PWM_ON_MESSAGE:                 db 'PWM IS ON       ', 0
     4953204F
     4E202020
     20202020
     00
04D3 50574D20   154            PWM_OFF_MESSAGE:                db 'PWM IS OFF      ', 0
     4953204F
     46462020
     20202020
     00
04E4 20202044   155     SaveToFlash_Msg:               db '   Data Saved   ', 0
     61746120
     53617665
     64202020
     00
04F5 50726F63   156            Stopped:                                db 'Process Stopped ', 0
     65737320
     53746F70
     70656420
     00
0506 20202020   157            BlankMsg:                               db '                ', 0
     20202020
     20202020
     20202020
     00
0517 2D205265   158            ChooseChangeValueMsg:   db '- Reselect Vals     ', 0
     73656C65
     63742056
     616C7309
     00
0528 2B095374   159            ChooseStartMsg:                         db '+   Start Reflow', 0
     61727420
     5265666C
     6F7700
0537 52616D70   160            Ramp2Reflow:                    db 'Ramp to Reflow  ', 0
     20746F20
     5265666C
     6F772020
     00
0548 52616D70   161            Ramp2Soak:                              db 'Ramp to Soak    ', 0
     20746F20
     536F616B
     20202020
     00
0559 50726568   162            Soak:                                   db 'Preheat / Soak  ', 0
     65617420
     2F20536F
     616B2020
     00
056A 5265666C   163            Reflow:                                         db 'Reflow          ', 0
     6F772020
     20202020
     20202020
     00
057B 436F6F6C   164            Cooling:                                db 'Cooling         ', 0
     696E6720
     20202020
     20202020
     00
058C 5265666C   165            CompleteMsg:                    db 'Reflow Complete!', 0
     6F772043
     6F6D706C
     65746521
     00
059D 43686563   166            Lessthan50ErrorMsg:     db 'Check T-Couple! ', 0
     6B20542D
     436F7570
     6C652120
     00
05AE 50726F63   167            AbortMsg:                               db 'Process Aborted!', 0
     65737320
     41626F72
     74656421
     00
05BF 2D20436F   168            ConfirmMsg:                     db '- Continue?     ', 0
     6E74696E
     75653F20
     20202020
     00
05D0 49542057   169            TestMessage:                    db 'IT WORKS?!!!!!!!', 0
     4F524B53
     3F212121
     21212121
     00
05E1 54656D70   170            Temp:                                   db 'Temp:', 0           
     3A00
05E7 54696D65   171            Time:                                   db 'Time:', 0
     3A00
05ED 0A00       172            NEWLINE:                                db '\n', 0  
05EF 20DF4300   173     Cels: db ' ',11011111b, 'C',0
05F3 207300     174     Secs:                  db ' s',0
05F6 50434220   175            BurnMsg:                                        db 'PCB Burn Warning', 0
     4275726E
     20576172
     6E696E67
     00
0607 20204162   176     StopMsg:                                       db '  Aborting!...  ', 0
     6F727469
     6E67212E
     2E2E2020
     00
0618 546F6F20   177     Too_Long:                                      db 'Too Long!       ', 0
     4C6F6E67
     21202020
     20202020
     00
0629 546F6F20   178     Too_High:                              db 'Too High!       ', 0
     48696768
     21202020
     20202020
     00
063A            179     
063A            180     ;---------------------------------;
063A            181   ; Routine to initialize the ISR   ;
063A            182   ; for timer 0                     ;
063A            183   ;---------------------------------;
063A            184   Timer0_Init:
063A E589       185            mov a, TMOD
063C 54F0       186            anl a, #0xf0                                            ; Clear the bits for timer 0
063E 4401       187            orl a, #0x01                                            ; Configure timer 0 as 16-timer
0640 F589       188            mov TMOD, a
0642 758CEA     189            mov TH0, #high(TIMER0_RELOAD)
0645 758AE8     190            mov TL0, #low(TIMER0_RELOAD)
0648            191            ; Enable the timer and interrupts
0648 D2A9       192            setb ET0                                                        ; Enable timer 0 interrupt
064A C28C       193            clr TR0                                                         ; Disable timer 0 by default
064C 22         194   ret
064D            195            
064D            196   ;---------------------------------;
064D            197   ; ISR for timer 0.  Set to execute;
064D            198   ; every 1/4096Hz to generate a    ;
064D            199   ; 2048 Hz square wave at pin P3.6 ;
064D            200   ;---------------------------------;
064D            201   Timer0_ISR:
064D            202            ;clr TF0  ; According to the data sheet this is done for us already.
064D            203            ; In mode 1 we need to reload the timer.
064D C28C       204            clr TR0
064F 758CEA     205            mov TH0, #high(TIMER0_RELOAD)
0652 758AE8     206            mov TL0, #low(TIMER0_RELOAD)
0655 D28C       207            setb TR0
0657 B290       208            cpl SOUND_OUT ; Connect speaker to P3.6!
0659 32         209            reti
065A            210     
065A            211   ;---------------------------------;
065A            212   ; Routine to initialize the ISR   ;
065A            213   ; for timer 2                     ;
065A            214   ;---------------------------------;
065A            215            
065A            216   Timer2_Init:
065A 75C800     217            mov T2CON, #0                                           ; Stop timer/counter.  Autoreload mode.
065D 75CBA9     218            mov RCAP2H, #high(TIMER2_RELOAD)
0660 75CA9A     219            mov RCAP2L, #low(TIMER2_RELOAD)
0663            220            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0663 E4         221            clr a
0664 F530       222            mov Count1ms+0, a
0666 F531       223            mov Count1ms+1, a
0668 F533       224            mov Count_PWM, a
066A F532       225            mov Count_Sample, a
066C F534       226     mov soak_seconds, a
066E F535       227     mov soak_temp, a
0670 F536       228     mov reflow_seconds, a
0672 F537       229     mov reflow_temp, a
0674 F55A       230     mov state, a
0676 F53A       231     mov state_time, a
0678 F539       232     mov run_time_sec, a
067A F538       233     mov run_time_min, a
067C F53B       234     mov Count100ms, a
067E 753C04     235     mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
0681 753D0A     236     mov Long_Beep_Counter, #LONG_BEEP_LENGTH
0684 753E0C     237     mov Six_Beep_Counter, #SIX_BEEP_LENGTH
0687            238            ; Enable the timer and interrupts
0687 D2AD       239            setb ET2  ; Enable timer 2 interrupt
0689 D2CA       240            setb TR2  ; Enable timer 2
068B 22         241   ret
068C            242   
068C            243     
068C            244   ;---------------------------------;
068C            245   ; ISR for timer 2                 ;
068C            246   ;---------------------------------;
068C            247   Timer2_ISR:
068C C2CF       248            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
068E            249            
068E            250            ; The two registers used in the ISR must be saved in the stack
068E C0E0       251            push acc
0690 C0D0       252            push psw
0692            253            
0692 053B       254     inc Count100ms                         ; Increment every 1ms  
0694 0532       255     inc Count_Sample
0696            256            ; Increment the 16-bit one mili second counter
0696 0530       257            inc Count1ms+0    ; Increment the low 8-bits first
0698 E530       258            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
069A 7002       259            jnz Timer2_Inc_100ms
069C 0531       260            inc Count1ms+1
069E            261     
069E            262   Timer2_Inc_100ms:
069E            263   
069E E53B       264            mov a, Count100ms
06A0 B46442     265            cjne a, #100, Inc_Done_1sec; Run following code every 100ms
06A3            266            
06A3 E4         267            clr a
06A4 F53B       268            mov Count100ms, a               ; Return to 0
06A6            269            ; If any of the beep flags are set, run their corresponding code
06A6 200608     270            jb short_beep_flag, Timer2_Short_Beep
06A9 200717     271            jb long_beep_flag, Timer2_Long_Beep
06AC 200826     272            jb six_beep_flag, Timer2_Six_Beep
06AF 8034       273            sjmp Inc_Done_1sec
06B1            274            
06B1            275   Timer2_Short_Beep:
06B1 D28C       276            setb TR0
06B3 153C       277            dec Short_Beep_Counter
06B5 E53C       278            mov a, Short_Beep_Counter
06B7 B4002B     279            cjne a, #0, Inc_Done_1sec
06BA            280            ; Once counter has reached 0
06BA C28C       281            clr TR0
06BC C206       282            clr short_beep_flag
06BE 753C04     283            mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
06C1 8022       284            sjmp Inc_Done_1sec
06C3            285            
06C3            286   Timer2_Long_Beep:
06C3 D28C       287            setb TR0
06C5 153D       288            dec Long_Beep_Counter
06C7 E53D       289            mov a, Long_Beep_Counter
06C9 B40019     290            cjne a, #0, Inc_Done_1sec
06CC            291            ; Once counter has reached 0
06CC C28C       292            clr TR0
06CE C207       293            clr long_beep_flag
06D0 753D0A     294            mov Long_Beep_Counter, #LONG_BEEP_LENGTH
06D3 8010       295            sjmp Inc_Done_1sec
06D5            296            
06D5            297   Timer2_Six_Beep:
06D5 B28C       298            cpl TR0
06D7 153E       299            dec Six_Beep_Counter
06D9 E53E       300            mov a, Six_Beep_Counter
06DB B40007     301            cjne a, #0, Inc_Done_1sec
06DE            302            ; Once counter has reached 0
06DE C28C       303            clr TR0
06E0 C208       304            clr six_beep_flag
06E2 753E0C     305            mov Six_Beep_Counter, #SIX_BEEP_LENGTH
06E5            306            
06E5            307   Inc_Done_1sec:
06E5            308            ; Check if one second has passed
06E5 E530       309            mov a, Count1ms+0
06E7 B4E824     310            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
06EA E531       311            mov a, Count1ms+1
06EC B4031F     312            cjne a, #high(1000), Inc_Done_Sample
06EF            313            
06EF B209       314            cpl led_flag
06F1            315            
06F1 753000     316            mov Count1ms+0, #0
06F4 753100     316            mov Count1ms+1, #0
06F7            317     ; time for state, will reset after every state
06F7 053A       318     inc state_time
06F9            319     
06F9 E53A       320     mov a, state_time
06FB B43C02     321     cjne a,#60, Inc_Done_Run_Time
06FE D201       322            setb one_min_flag
0700            323            
0700            324   Inc_Done_Run_Time:
0700 0539       325     inc run_time_sec
0702 E539       326     mov a, run_time_sec
0704 B43C07     327     cjne a, #60, Inc_Done_Sample
0707            328     
0707 E4         329     clr a
0708 F539       330     mov run_time_sec, a
070A 0538       331     inc run_time_min
070C 8000       332            sjmp Inc_Done_Sample
070E            333   
070E            334   Inc_Done_Sample:
070E            335            
070E E532       336     mov a, Count_Sample
0710 B4FA05     337     cjne a, #SAMPLE_INTERVAL, Inc_Done_PWM
0713            338     
0713 D205       339     setb sample_flag
0715            340     
0715 E4         341     clr a
0716 F532       342     mov Count_Sample, a
0718            343   
0718            344   Inc_Done_PWM:
0718            345            
0718 30021F     346            jnb pwm_on, Timer2_ISR_done
071B 0533       347            inc Count_PWM
071D 30030E     348            jnb pwm_high, Inc_Done_PWM_Low
0720            349   
0720 E533       350            mov a, Count_PWM
0722 B41915     351            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
0725            352            
0725 C203       353            clr pwm_high
0727 C2B7       354            clr SSR_OUT
0729            355            
0729 E4         356            clr a
072A F533       357            mov Count_PWM, a
072C            358            
072C 800C       359            sjmp Timer2_ISR_done
072E            360            
072E            361   Inc_Done_PWM_Low:
072E            362   
072E E533       363            mov a, Count_PWM
0730 B4E607     364            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
0733            365            
0733 D203       366            setb pwm_high
0735 D2B7       367            setb SSR_OUT
0737            368            
0737 E4         369            clr a
0738 F533       370            mov Count_PWM, a
073A            371            
073A            372   Timer2_ISR_done:
073A D0D0       373            pop psw
073C D0E0       374            pop acc
073E 32         375   reti
073F            376   
073F            377   ;------------------------------------------------------------------;
073F            378   ; Subroutine to take sample from Thermocouple, LM335, and LED for Vref
073F            379   ;------------------------------------------------------------------;
073F            380   Take_Sample:
073F C205       381            clr sample_flag
0741            382            ;reading the LED voltage for Vref
0741 75F007     383            mov b, #7
0744 12038B     383            lcall ?Average_ADC_Channel      
0747 12075D     384            lcall Calculate_Vref
074A            385            ;fetch result from channel 0 as room temperature
074A 75F000     386            mov b, #0
074D 12038B     386            lcall ?Average_ADC_Channel
0750 120794     387            lcall LM335_Result_SPI_Routine
0753            388            ;fetch result from channel 1
0753 75F001     389            mov b, #1
0756 12038B     389            lcall ?Average_ADC_Channel
0759 1207DD     390     lcall Result_SPI_Routine       ; 0.5 second delay between samples
075C 22         391            ret
075D            392   
075D            393   ;calculating Vref from Vled      
075D            394   Calculate_Vref:
075D 854743     395            mov y+0, result+0 
0760 854844     395            mov y+1, result+1
0763 754500     395            mov y+2, #0 
0766 754600     395            mov y+3, #0
0769 753F31     396            mov x+0, #low (VLED*1023 % 0x10000) 
076C 75403B     396            mov x+1, #high(VLED*1023 % 0x10000) 
076F 754103     396            mov x+2, #low (VLED*1023 / 0x10000) 
0772 754200     396            mov x+3, #high(VLED*1023 / 0x10000) 
0775 1202E3     397            lcall div32
0778 754310     398            mov y+0, #low (10000 % 0x10000) 
077B 754427     398            mov y+1, #high(10000 % 0x10000) 
077E 754500     398            mov y+2, #low (10000 / 0x10000) 
0781 754600     398            mov y+3, #high(10000 / 0x10000) 
0784 120256     399            lcall mul32                     ; Gets Vcc*10^6
0787            400   
0787 853F52     401            mov Vcc+0, x+0 
078A 854053     401            mov Vcc+1, x+1
078D 854154     401            mov Vcc+2, x+2 
0790 854255     401            mov Vcc+3, x+3
0793            402            
0793 22         403            ret
0794            404            
0794            405   ;calculating cold junction temperature
0794            406   LM335_Result_SPI_Routine:
0794 855243     407            mov y+0, Vcc+0 
0797 855344     407            mov y+1, Vcc+1
079A 855445     407            mov y+2, Vcc+2 
079D 855546     407            mov y+3, Vcc+3
07A0            408   
07A0 120256     409       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
07A3 7543FF     410            mov y+0, #low (1023 % 0x10000) 
07A6 754403     410            mov y+1, #high(1023 % 0x10000) 
07A9 754500     410            mov y+2, #low (1023 / 0x10000) 
07AC 754600     410            mov y+3, #high(1023 / 0x10000)          
07AF 1202E3     411       lcall div32
07B2 754310     412            mov y+0, #low (2730000 % 0x10000) 
07B5 7544A8     412            mov y+1, #high(2730000 % 0x10000) 
07B8 754529     412            mov y+2, #low (2730000 / 0x10000) 
07BB 754600     412            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
07BE 1201C2     413       lcall sub32
07C1 754364     414            mov y+0, #low (100 % 0x10000) 
07C4 754400     414            mov y+1, #high(100 % 0x10000) 
07C7 754500     414            mov y+2, #low (100 / 0x10000) 
07CA 754600     414            mov y+3, #high(100 / 0x10000)           
07CD 1202E3     415       lcall div32
07D0            416   
07D0 853F4E     417            mov x_lm335+0, x+0 
07D3 85404F     417            mov x_lm335+1, x+1
07D6 854150     417            mov x_lm335+2, x+2 
07D9 854251     417            mov x_lm335+3, x+3
07DC            418            
07DC 22         419            ret
07DD            420   
07DD            421   ;calculating the oven temperature and sending it to computer and LCD
07DD            422   Result_SPI_Routine:
07DD 855243     423            mov y+0, Vcc+0 
07E0 855344     423            mov y+1, Vcc+1
07E3 855445     423            mov y+2, Vcc+2 
07E6 855546     423            mov y+3, Vcc+3
07E9            424            
07E9 120256     425            lcall mul32
07EC 7543FF     426            mov y+0, #low (1023 % 0x10000) 
07EF 754403     426            mov y+1, #high(1023 % 0x10000) 
07F2 754500     426            mov y+2, #low (1023 / 0x10000) 
07F5 754600     426            mov y+3, #high(1023 / 0x10000) 
07F8 1202E3     427            lcall div32
07FB 754364     428            mov y+0, #low (100 % 0x10000) 
07FE 754400     428            mov y+1, #high(100 % 0x10000) 
0801 754500     428            mov y+2, #low (100 / 0x10000) 
0804 754600     428            mov y+3, #high(100 / 0x10000) 
0807 120256     429            lcall mul32     
080A 7543C6     430            mov y+0, #low (454 % 0x10000) 
080D 754401     430            mov y+1, #high(454 % 0x10000) 
0810 754500     430            mov y+2, #low (454 / 0x10000) 
0813 754600     430            mov y+3, #high(454 / 0x10000)   ;Gain 
0816 1202E3     431            lcall div32
0819 754329     432            mov y+0, #low (41 % 0x10000) 
081C 754400     432            mov y+1, #high(41 % 0x10000) 
081F 754500     432            mov y+2, #low (41 / 0x10000) 
0822 754600     432            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
0825 1202E3     433            lcall div32
0828            434            
0828 854E43     435            mov y+0, x_lm335+0 
082B 854F44     435            mov y+1, x_lm335+1
082E 855045     435            mov y+2, x_lm335+2 
0831 855146     435            mov y+3, x_lm335+3
0834 1201A1     436            lcall add32
0837            437     
0837 754364     438            mov y+0, #low (100 % 0x10000) 
083A 754400     438            mov y+1, #high(100 % 0x10000) 
083D 754500     438            mov y+2, #low (100 / 0x10000) 
0840 754600     438            mov y+3, #high(100 / 0x10000) 
0843 1202E3     439     lcall div32
0846            440   
0846            441            ;updating the temperature of OVEN variable
0846 853F5B     442            mov current_temp+0, x+0 
0849 85405C     442            mov current_temp+1, x+1
084C 85415D     442            mov current_temp+2, x+2 
084F 85425E     442            mov current_temp+3, x+3
0852            443            
0852 1200DC     444            lcall hex2bcd
0855            445   
0855            446   ;sending Oven temperature to Computer
0855            447   Send_Serial:
0855 C000       448       push ar0
0857 A84A       448       mov r0, bcd+1
0859 1203EF     448       lcall ?Send_BCD
085C D000       448       pop ar0
085E C000       449       push ar0
0860 A849       449       mov r0, bcd
0862 1203EF     449       lcall ?Send_BCD
0865 D000       449       pop ar0
0867 740A       450            mov a, #'\n'
0869 1203DC     451            lcall putchar
086C 22         452   ret
086D            453   
086D            454   ;Saving variables to Flash Memory
086D            455   Save_Configuration:
086D            456            ; Erase FDATA page 1
086D C2AF       457            clr EA ; Disables interrupts to allow access to flash memory
086F 759658     458            mov MEMCON, #01011000B ; AERS=1, MWEN=1, DMEN=1, 
0872            459     ; ^ Erases page in flash memory, enables programming to nonvolatie mem location
0872            460     ; Enables nonvolatile data memory and maps it into FDATA space
0872 900000     461            mov DPTR, #0x0000 ; Set data pointer to start of flash memory
0875 74FF       462            mov a, #0xff                    ; Write 1111 1111 to flash mem
0877 F0         463            movx @DPTR, A
0878            464            ; Load page
0878 759638     465     mov MEMCON, #00111000B ; LDPG=1, MWEN=1, DMEN=1
087B            466     ; Enables loading of multiple bytes to temporary page buffer
087B            467     ; Enables programming of nonvolatile memory location
087B            468     ; Enables nonvolatile data memory and map it into FDATA space
087B            469     ; Save variables
087B E535       470     mov a, soak_temp       ; Move soak temperature to accumulator
087D F0         471     movx @DPTR, A                  ; Save data in buffer
087E A3         472     inc DPTR                                       ; Increment data pointer
087F E534       473     mov a, soak_seconds ; Repeat for remaining variables
0881 F0         474     movx @DPTR, A
0882 A3         475     inc DPTR
0883 E537       476     mov a, reflow_temp
0885 F0         477     movx @DPTR,A
0886 A3         478     inc DPTR
0887 E536       479     mov a, reflow_seconds
0889 F0         480     movx @DPTR, A
088A            481     ; Write Validation Keys to flash memory (Check upon write)
088A A3         482     inc DPTR
088B 7455       483     mov a, #0x55 ; First key value (0101 0101)
088D F0         484     movx @DPTR, A
088E A3         485     inc DPTR
088F 74AA       486     mov a, #0xAA ; Second key value (1010 1010)
0891 F0         487     movx @DPTR, A
0892            488     ; Copy Buffer to Flash
0892 759618     489     mov MEMCON, #00011000B ; Copy page to flash
0895 74FF       490     mov a, #0xff
0897 F0         491     movx @DPTR, A
0898 759600     492     mov MEMCON, #00000000B ; Disable access to data flash
089B D2AF       493     setb EA ; Re-enable interrupts
089D 22         494     ret
089E            495   
089E            496   ; Reading variables from flash memory
089E            497   Load_Configuration:
089E 759608     498            mov MEMCON, #00001000B ; Enable read access to data flash
08A1            499     
08A1 900004     500     mov dptr, #0x0004 ; Move dptr to first key value location
08A4 E0         501     movx a, @dptr
08A5 B4551B     502     cjne a, #0x55, Load_Defaults ; If keys do not match, write to flash failed, load default values
08A8 A3         503     inc dptr ; Second key value location
08A9 E0         504     movx a, @dptr
08AA B4AA16     505     cjne a, #0xAA, Load_Defaults ; Check if second keys match or not, if not then load defaults
08AD            506     ; Keys match. Now load saved values from flash
08AD 900000     507     mov dptr, #0x0000
08B0 E0         508     movx a, @dptr
08B1 F535       509     mov soak_temp, a       ; Load soak temperature
08B3 A3         510     inc dptr
08B4 E0         511     movx a, @dptr
08B5 F534       512     mov soak_seconds, a ; Load soak time
08B7 A3         513     inc dptr
08B8 E0         514            movx a, @dptr
08B9 F537       515     mov reflow_temp, a ; Load reflow temperature
08BB A3         516     inc dptr
08BC E0         517     movx a, @dptr
08BD F536       518     mov reflow_seconds, a ; Load reflow time
08BF 759600     519     mov MEMCON, #00000000B ; Disables access to data flashx
08C2 22         520     ret
08C3            521     
08C3            522   ; Default (optimal) values for soldering profile
08C3            523   Load_Defaults: ; Load defaults if keys are incorrect
08C3 753596     524            mov soak_temp, #150
08C6 75342D     525     mov soak_seconds, #45
08C9 7537E1     526     mov reflow_temp, #225
08CC 75361E     527     mov reflow_seconds, #30
08CF 759600     528     mov MEMCON, #00000000B ; Disables access to data flash
08D2 02090B     529     ljmp forever 
08D5            530    
08D5            531   ;------------------------------------------------------------------;
08D5            532   ; ********************MACRO LIST***********************************;
08D5            533   ;------------------------------------------------------------------;
08D5            534   
08D5            535   ;------------------------------------------------------------------;
08D5            536   ; MACRO for incrementing a variable
08D5            537   ;------------------------------------------------------------------;
                538   Inc_variable MAC
                539   	;Mac (%0 : inc/dec button    %1 : variable ) 
                540   	jb %0, no_inc_dec_var%M
                541   	Wait_Milli_Seconds(#50)
                542   	jb %0, no_inc_dec_var%M
                543     Wait_Milli_Seconds(#100)
                544   
                545   	inc %1
                546   	
                547   no_inc_dec_var%M:
                548   
                549   ENDMAC
08D5            550   
08D5            551   ;------------------------------------------------------------------;
08D5            552   ; MACRO for decrementing a variable
08D5            553   ;------------------------------------------------------------------;
                554   Dec_variable MAC
                555   	;Mac (%0 : inc/dec button    %1 : variable ) 
                556   	jb %0, no_inc_dec_var%M
                557   	Wait_Milli_Seconds(#50)
                558   	jb %0, no_inc_dec_var%M
                559   	Wait_Milli_Seconds(#100)
                560   
                561   	dec %1
                562   	
                563   no_inc_dec_var%M:
                564   
                565   ENDMAC
08D5            566   
08D5            567   ;------------------------------------------------------------------;
08D5            568   ; MACRO for Showing values with header on LCD
08D5            569   ;------------------------------------------------------------------;
                570   Show_Header_and_Value Mac
                571   	; MAC (%0:    Constant string for the first line on LCD       %1: value to be shown on second line				%2: unit )
                572   	Set_Cursor(1,1)
                573   	Send_Constant_String(#%0)
                574   	Set_Cursor(2,1)
                575   	Move_1B_to_4B ( x, %1)
                576   	lcall hex2bcd
                577     Display_BCD_1_digit(bcd+1)
                578   	Display_BCD(bcd)
                579     Set_Cursor(2,5)
                580     Send_Constant_String(#%2)
                581   ENDMAC
08D5            582   
08D5            583   
08D5            584   ;------------------------------------------------------------------;
08D5            585   ; MACRO for Showing messages with header on LCD
08D5            586   ;------------------------------------------------------------------;
                587   Show_Header Mac
                588   	Set_Cursor(1,1)
                589     Send_Constant_String(#%0)
                590     Set_Cursor(2,1)
                591     Send_Constant_String(#%1)
                592   ENDMAC
08D5            593   
08D5            594   ;------------------------------------------------------------------;
08D5            595   ; MACRO for Showing 2 values with header on LCD
08D5            596   ;------------------------------------------------------------------;
                597   Show_Stage_Temp_Time Mac
                598   	; MAC (%0:    Constant string for the first line on LCD           %1: Temperature			%2: Time (minutes)   %3: Time (seconds) )
                599   	Set_Cursor(1,1)
                600   	Send_Constant_String(#%0)
                601     
                602     Set_Cursor(2,1)	;show temperture
                603   	Move_1B_to_4B ( x, %1)
                604   	lcall hex2bcd
                605     Display_BCD_1_digit(bcd+1)
                606   	Display_BCD(bcd)
                607   
                608   	Set_Cursor(2,5)
                609   	Send_Constant_String(#Cels)
                610   
                611     Set_Cursor(2,11)
                612     Move_1B_to_4B (x, %2)
                613     lcall hex2bcd
                614     Display_BCD(bcd)
                615     Display_char(#':')
                616    Move_1B_to_4B (x, %3)
                617     lcall hex2bcd
                618     Display_BCD(bcd)
                619   
                620     
                621    
                622   ENDMAC
08D5            623   
08D5            624   ;------------------------------------------------------------------;
08D5            625   ; MACRO for checking a button and changing state
08D5            626   ;------------------------------------------------------------------;
                627   Check_button_for_State_change Mac
                628   	; MAC (%0:    Constant string for the button name           %1: state to jump to if the button is pressed )
                629   	jb %0, no_button_pressed%M
                630   	Wait_Milli_Seconds(#50)
                631   	jb %0, no_button_pressed%M
                632   	jnb %0, $
                633   	
                634   	mov state, #%1
                635     WriteCommand(#0x01)
                636     Wait_Milli_Seconds(#2)
                637   no_button_pressed%M:
                638   
                639   ENDMAC
08D5            640   
08D5            641   ;------------------------------------------------------------------;
08D5            642   ; MACRO for comparing 2 values and changing state
08D5            643   ;------------------------------------------------------------------;
                644   Compare_Values_for_State_Change MAC
                645   	;	%0: variable to check
                646   	;	%1: value set at using the buttons
                647   	;	%2: next state
                648   	mov a, %0
                649     clr c
                650     subb a, %1
                651     jnc values_not_equal%M
                652   	mov state, #%2
                653   	 WriteCommand(#0x01)
                654     Wait_Milli_Seconds(#2)
                655   values_not_equal%M:
                656   
                657   ENDMAC
08D5            658   ;------------------------------------------------------------------;
08D5            659   ; MACRO for turning the SSR off
08D5            660   ;------------------------------------------------------------------;
                661   SSR_OFF MAC
                662       clr pwm_on
                663       clr pwm_high
                664       clr SSR_OUT
                665   ENDMAC
08D5            666   
08D5            667   ;------------------------------------------------------------------;
08D5            668   ; MACRO for going to next state
08D5            669   ;------------------------------------------------------------------;
                670   check_state MAC
                671   		; %0 state number    %1 next state
                672       mov a, state
                673       cjne a, #%0, skipstate%M
                674     	sjmp no_skip_state%M
                675   skipstate%M:
                676       ljmp state%1
                677   no_skip_state%M:
                678   ENDMAC
08D5            679   
                680   Over_Limit MAC
                681   	mov a, %0
                682     clr c
                683     dec a
                684     subb a, #%1			;reflow time should be less than 45 seconds
                685     jc	Not_over_Limit%M	;if reflow_seconds - 45 < 0
                686   
                687     mov %0, #%1	;reset reflow seconds to 0s
                688     
                689   Not_over_Limit%M:  
                690   ENDMAC
08D5            691   ;------------------------------------------------------------------;
08D5            692   ; Main program   (FSM)
08D5            693   ;        -state 0:  Start Screen
08D5            694   ;        -state 1:  initialization       Soak Time  
08D5            695   ;        -state 2:  initialization               Soak Temperature
08D5            696   ;        -state 3:  initialization               Reflow Time
08D5            697   ;        -state 4:  initialization               Reflow Temp
08D5            698   ;
08D5            699   ;        -state 5:  Storing the variables in flash memory, and asking for user confirmation to begin process                             
08D5            700   ; -state 6:  initialising Timer and resetting Global Timer
08D5            701   ;        -state 10: Ramp to Soak
08D5            702   ;        -state 11: Soak
08D5            703   ;        -state 12: Ramp to reflow
08D5            704   ;        -state 13: Reflow (Done for now, possible additions check if temperature goes too high, if so then begin cooling immediately etc.)
08D5            705   ;        -state 14: Cooling
08D5            706   ;        -state 15: Finished successfully
08D5            707   ;        -state 16: ERROR State
08D5            708   ; -state 17: Force Quit State
08D5            709   ;------------------------------------------------------------------;
08D5            710   MainProgram:
08D5            711   
08D5            712            ; Initialization
08D5 75817F     713       mov SP, #0x7F
08D8 75C100     714       mov PMOD, #0 ; Configure all ports in bidirectional mode
08DB 12063A     715       lcall Timer0_Init
08DE 12065A     716       lcall Timer2_Init
08E1 D2AF       717       setb EA   ; Enable Global interrupts
08E3 12034C     718       lcall INIT_SPI
08E6 1203BD     719            lcall InitSerialPort
08E9 120088     720       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
08EC            721       
08EC C202       722       clr pwm_on
08EE C203       722       clr pwm_high
08F0 C2B7       722       clr SSR_OUT
08F2            722            ; clears  pwm_on ------- pwm_high ------- SSR_OUT ------- in_process                            
08F2            723   
08F2 C204       724                    clr settings_modified_flag
08F4 C201       725       clr one_min_flag
08F6 C205       726       clr sample_flag
08F8 C206       727       clr short_beep_flag
08FA C207       728       clr long_beep_flag
08FC C208       729       clr six_beep_flag
08FE C209       730       clr led_flag
0900 C2A4       731            clr GREEN
0902 C2A5       732            clr YELLOW
0904 C2A6       733            clr RED
0906 C2A7       734            clr BLUE
0908            735            
0908 12089E     736            lcall Load_Configuration ; Read values from data flash
090B            737            
090B            738   forever:         
090B 300503     739     jnb sample_flag, state0
090E 12073F     740     lcall Take_Sample
0911            741   
0911            742   ; Main start screen appears on boot and 
0911            743   state0:
0911            744                    ; 0 state number    1 next state
0911 E55A       744       mov a, state
0913 B40002     744       cjne a, #0, skipstate37
0916 8003       744            sjmp no_skip_state37
0918            744   skipstate37:
0918 0209A4     744       ljmp state1
091B            744   no_skip_state37:
091B C2A4       745            clr GREEN
091D C2A5       746            clr YELLOW
091F C2A6       747            clr RED
0921 C2A7       748            clr BLUE
0923            749            
0923 C0E0       750            push acc
0925 7401       750            mov a, #1
0927 14         750            dec a
0928 1200C1     750            lcall ?Set_Cursor_1 ; Select column and row
092B D0E0       750            pop acc
092D C083       750            push dph
092F C082       750            push dpl
0931 C0E0       750            push acc
0933 900418     750            mov dptr, #StartMessage
0936 1200B4     750            lcall ?Send_Constant_String
0939 D0E0       750            pop acc
093B D082       750            pop dpl
093D D083       750            pop dph
093F C0E0       750            push acc
0941 7401       750            mov a, #1
0943 14         750            dec a
0944 1200BF     750            lcall ?Set_Cursor_2 ; Select column and row
0947 D0E0       750            pop acc
0949 C083       750            push dph
094B C082       750            push dpl
094D C0E0       750            push acc
094F 900429     750            mov dptr, #StartMessage2
0952 1200B4     750            lcall ?Send_Constant_String
0955 D0E0       750            pop acc
0957 D082       750            pop dpl
0959 D083       750            pop dph
095B            751     
095B            752            ; MAC (CYCLE_BUTTON:    Constant string for the button name           1: state to jump to if the button is pressed )
095B 208020     752            jb CYCLE_BUTTON, no_button_pressed43
095E C002       752            push AR2
0960 7A32       752            mov R2, #50
0962 120039     752            lcall ?Wait_Milli_Seconds
0965 D002       752            pop AR2
0967 208014     752            jb CYCLE_BUTTON, no_button_pressed43
096A 3080FD     752            jnb CYCLE_BUTTON, $
096D            752            
096D 755A01     752            mov state, #1
0970 7401       752            mov a, #0x01
0972 120083     752            lcall ?WriteCommand
0975 C002       752            push AR2
0977 7A02       752            mov R2, #2
0979 120039     752            lcall ?Wait_Milli_Seconds
097C D002       752            pop AR2
097E            752   no_button_pressed43:
097E            752                    ; Transition to parameter select states
097E            753            ; MAC (INC_BUTTON:    Constant string for the button name           5: state to jump to if the button is pressed )
097E 208220     753            jb INC_BUTTON, no_button_pressed47
0981 C002       753            push AR2
0983 7A32       753            mov R2, #50
0985 120039     753            lcall ?Wait_Milli_Seconds
0988 D002       753            pop AR2
098A 208214     753            jb INC_BUTTON, no_button_pressed47
098D 3082FD     753            jnb INC_BUTTON, $
0990            753            
0990 755A05     753            mov state, #5
0993 7401       753            mov a, #0x01
0995 120083     753            lcall ?WriteCommand
0998 C002       753            push AR2
099A 7A02       753            mov R2, #2
099C 120039     753            lcall ?Wait_Milli_Seconds
099F D002       753            pop AR2
09A1            753   no_button_pressed47:
09A1            753                            ; Transition to save/start confirm state
09A1 02090B     754     ljmp forever
09A4            755   ; initializing the Soak Time 
09A4            756   state1:
09A4            757                    ; 1 state number    2 next state
09A4 E55A       757       mov a, state
09A6 B40102     757       cjne a, #1, skipstate51
09A9 8003       757            sjmp no_skip_state51
09AB            757   skipstate51:
09AB 020A90     757       ljmp state2
09AE            757   no_skip_state51:
09AE D204       758            setb settings_modified_flag
09B0 20090A     759            jb led_flag, state1ledon
09B3 D2A4       760            setb GREEN
09B5 D2A5       761            setb YELLOW
09B7 D2A6       762            setb RED
09B9 D2A7       763            setb BLUE
09BB 8008       764            sjmp state1b
09BD            765   state1ledon:
09BD C2A4       766            clr GREEN
09BF C2A5       767            clr YELLOW
09C1 C2A6       768            clr RED
09C3 C2A7       769            clr BLUE
09C5            770   state1b:
09C5            771            ; MAC (SoakTime_Message:    Constant string for the first line on LCD       soak_seconds: value to be shown on second line                              Secs: unit )
09C5 C0E0       771            push acc
09C7 7401       771            mov a, #1
09C9 14         771            dec a
09CA 1200C1     771            lcall ?Set_Cursor_1 ; Select column and row
09CD D0E0       771            pop acc
09CF C083       771            push dph
09D1 C082       771            push dpl
09D3 C0E0       771            push acc
09D5 90043A     771            mov dptr, #SoakTime_Message
09D8 1200B4     771            lcall ?Send_Constant_String
09DB D0E0       771            pop acc
09DD D082       771            pop dpl
09DF D083       771            pop dph
09E1 C0E0       771            push acc
09E3 7401       771            mov a, #1
09E5 14         771            dec a
09E6 1200BF     771            lcall ?Set_Cursor_2 ; Select column and row
09E9 D0E0       771            pop acc
09EB 85343F     771            mov x+0, soak_seconds+0 
09EE 754000     771            mov x+1, #0
09F1 754100     771            mov x+2, #0 
09F4 754200     771            mov x+3, #0
09F7 1200DC     771            lcall hex2bcd
09FA C000       771            push ar0
09FC C0E0       771            push acc
09FE 7420       771            mov a, #' '
0A00 12007E     771            lcall ?WriteData
0A03 A84A       771            mov r0, bcd+1
0A05 E8         771            mov a, r0
0A06 540F       771            anl a, #0fh
0A08 4430       771            orl a, #30h
0A0A 12007E     771            lcall ?WriteData
0A0D D0E0       771            pop acc
0A0F D000       771            pop ar0
0A11 C000       771            push ar0
0A13 A849       771            mov r0, bcd
0A15 1200C6     771            lcall ?Display_BCD
0A18 D000       771            pop ar0
0A1A C0E0       771            push acc
0A1C 7405       771            mov a, #5
0A1E 14         771            dec a
0A1F 1200BF     771            lcall ?Set_Cursor_2 ; Select column and row
0A22 D0E0       771            pop acc
0A24 C083       771            push dph
0A26 C082       771            push dpl
0A28 C0E0       771            push acc
0A2A 9005F3     771            mov dptr, #Secs
0A2D 1200B4     771            lcall ?Send_Constant_String
0A30 D0E0       771            pop acc
0A32 D082       771            pop dpl
0A34 D083       771            pop dph
0A36            772            ;Mac (INC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A36 208217     772            jb INC_BUTTON, no_inc_dec_var61
0A39 C002       772            push AR2
0A3B 7A32       772            mov R2, #50
0A3D 120039     772            lcall ?Wait_Milli_Seconds
0A40 D002       772            pop AR2
0A42 20820B     772            jb INC_BUTTON, no_inc_dec_var61
0A45 C002       772            push AR2
0A47 7A64       772            mov R2, #100
0A49 120039     772            lcall ?Wait_Milli_Seconds
0A4C D002       772            pop AR2
0A4E            772   
0A4E 0534       772            inc soak_seconds
0A50            772            
0A50            772   no_inc_dec_var61:
0A50            772   
0A50            773            ;Mac (DEC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A50 208417     773            jb DEC_BUTTON, no_inc_dec_var64
0A53 C002       773            push AR2
0A55 7A32       773            mov R2, #50
0A57 120039     773            lcall ?Wait_Milli_Seconds
0A5A D002       773            pop AR2
0A5C 20840B     773            jb DEC_BUTTON, no_inc_dec_var64
0A5F C002       773            push AR2
0A61 7A64       773            mov R2, #100
0A63 120039     773            lcall ?Wait_Milli_Seconds
0A66 D002       773            pop AR2
0A68            773   
0A68 1534       773            dec soak_seconds
0A6A            773            
0A6A            773   no_inc_dec_var64:
0A6A            773   
0A6A            774            
0A6A            775            ; MAC (CYCLE_BUTTON:    Constant string for the button name           2: state to jump to if the button is pressed )
0A6A 208020     775            jb CYCLE_BUTTON, no_button_pressed67
0A6D C002       775            push AR2
0A6F 7A32       775            mov R2, #50
0A71 120039     775            lcall ?Wait_Milli_Seconds
0A74 D002       775            pop AR2
0A76 208014     775            jb CYCLE_BUTTON, no_button_pressed67
0A79 3080FD     775            jnb CYCLE_BUTTON, $
0A7C            775            
0A7C 755A02     775            mov state, #2
0A7F 7401       775            mov a, #0x01
0A81 120083     775            lcall ?WriteCommand
0A84 C002       775            push AR2
0A86 7A02       775            mov R2, #2
0A88 120039     775            lcall ?Wait_Milli_Seconds
0A8B D002       775            pop AR2
0A8D            775   no_button_pressed67:
0A8D            775   
0A8D            775   
0A8D 02090B     776            ljmp forever                                                                    
0A90            777            
0A90            778   ; initializing the Soak Temperature 
0A90            779   state2:
0A90            780                    ; 2 state number    3 next state
0A90 E55A       780       mov a, state
0A92 B40202     780       cjne a, #2, skipstate71
0A95 8003       780            sjmp no_skip_state71
0A97            780   skipstate71:
0A97 020B7A     780       ljmp state3
0A9A            780   no_skip_state71:
0A9A            780   
0A9A 20090A     781            jb led_flag, state2ledon
0A9D D2A4       782            setb GREEN
0A9F D2A5       783            setb YELLOW
0AA1 D2A6       784            setb RED
0AA3 D2A7       785            setb BLUE
0AA5 8008       786            sjmp state2b
0AA7            787   state2ledon:
0AA7 C2A4       788            clr GREEN
0AA9 C2A5       789            clr YELLOW
0AAB C2A6       790            clr RED
0AAD C2A7       791            clr BLUE
0AAF            792   state2b:
0AAF            793            ; MAC (SoakTemp_Message:    Constant string for the first line on LCD       soak_temp: value to be shown on second line                                 Cels: unit )
0AAF C0E0       793            push acc
0AB1 7401       793            mov a, #1
0AB3 14         793            dec a
0AB4 1200C1     793            lcall ?Set_Cursor_1 ; Select column and row
0AB7 D0E0       793            pop acc
0AB9 C083       793            push dph
0ABB C082       793            push dpl
0ABD C0E0       793            push acc
0ABF 90044B     793            mov dptr, #SoakTemp_Message
0AC2 1200B4     793            lcall ?Send_Constant_String
0AC5 D0E0       793            pop acc
0AC7 D082       793            pop dpl
0AC9 D083       793            pop dph
0ACB C0E0       793            push acc
0ACD 7401       793            mov a, #1
0ACF 14         793            dec a
0AD0 1200BF     793            lcall ?Set_Cursor_2 ; Select column and row
0AD3 D0E0       793            pop acc
0AD5 85353F     793            mov x+0, soak_temp+0 
0AD8 754000     793            mov x+1, #0
0ADB 754100     793            mov x+2, #0 
0ADE 754200     793            mov x+3, #0
0AE1 1200DC     793            lcall hex2bcd
0AE4 C000       793            push ar0
0AE6 C0E0       793            push acc
0AE8 7420       793            mov a, #' '
0AEA 12007E     793            lcall ?WriteData
0AED A84A       793            mov r0, bcd+1
0AEF E8         793            mov a, r0
0AF0 540F       793            anl a, #0fh
0AF2 4430       793            orl a, #30h
0AF4 12007E     793            lcall ?WriteData
0AF7 D0E0       793            pop acc
0AF9 D000       793            pop ar0
0AFB C000       793            push ar0
0AFD A849       793            mov r0, bcd
0AFF 1200C6     793            lcall ?Display_BCD
0B02 D000       793            pop ar0
0B04 C0E0       793            push acc
0B06 7405       793            mov a, #5
0B08 14         793            dec a
0B09 1200BF     793            lcall ?Set_Cursor_2 ; Select column and row
0B0C D0E0       793            pop acc
0B0E C083       793            push dph
0B10 C082       793            push dpl
0B12 C0E0       793            push acc
0B14 9005EF     793            mov dptr, #Cels
0B17 1200B4     793            lcall ?Send_Constant_String
0B1A D0E0       793            pop acc
0B1C D082       793            pop dpl
0B1E D083       793            pop dph
0B20            794            ;Mac (INC_BUTTON : inc/dec button    soak_temp : variable ) 
0B20 208217     794            jb INC_BUTTON, no_inc_dec_var81
0B23 C002       794            push AR2
0B25 7A32       794            mov R2, #50
0B27 120039     794            lcall ?Wait_Milli_Seconds
0B2A D002       794            pop AR2
0B2C 20820B     794            jb INC_BUTTON, no_inc_dec_var81
0B2F C002       794            push AR2
0B31 7A64       794            mov R2, #100
0B33 120039     794            lcall ?Wait_Milli_Seconds
0B36 D002       794            pop AR2
0B38            794   
0B38 0535       794            inc soak_temp
0B3A            794            
0B3A            794   no_inc_dec_var81:
0B3A            794   
0B3A            795            ;Mac (DEC_BUTTON : inc/dec button    soak_temp : variable ) 
0B3A 208417     795            jb DEC_BUTTON, no_inc_dec_var84
0B3D C002       795            push AR2
0B3F 7A32       795            mov R2, #50
0B41 120039     795            lcall ?Wait_Milli_Seconds
0B44 D002       795            pop AR2
0B46 20840B     795            jb DEC_BUTTON, no_inc_dec_var84
0B49 C002       795            push AR2
0B4B 7A64       795            mov R2, #100
0B4D 120039     795            lcall ?Wait_Milli_Seconds
0B50 D002       795            pop AR2
0B52            795   
0B52 1535       795            dec soak_temp
0B54            795            
0B54            795   no_inc_dec_var84:
0B54            795   
0B54            796            
0B54            797            ; MAC (CYCLE_BUTTON:    Constant string for the button name           3: state to jump to if the button is pressed )
0B54 208020     797            jb CYCLE_BUTTON, no_button_pressed87
0B57 C002       797            push AR2
0B59 7A32       797            mov R2, #50
0B5B 120039     797            lcall ?Wait_Milli_Seconds
0B5E D002       797            pop AR2
0B60 208014     797            jb CYCLE_BUTTON, no_button_pressed87
0B63 3080FD     797            jnb CYCLE_BUTTON, $
0B66            797            
0B66 755A03     797            mov state, #3
0B69 7401       797            mov a, #0x01
0B6B 120083     797            lcall ?WriteCommand
0B6E C002       797            push AR2
0B70 7A02       797            mov R2, #2
0B72 120039     797            lcall ?Wait_Milli_Seconds
0B75 D002       797            pop AR2
0B77            797   no_button_pressed87:
0B77            797   
0B77 02090B     798            ljmp forever                                                                    
0B7A            799   
0B7A            800   ; initializing the Reflow Time 
0B7A            801   state3:
0B7A            802                    ; 3 state number    4 next state
0B7A E55A       802       mov a, state
0B7C B40302     802       cjne a, #3, skipstate91
0B7F 8003       802            sjmp no_skip_state91
0B81            802   skipstate91:
0B81 020C6F     802       ljmp state4
0B84            802   no_skip_state91:
0B84            802   
0B84 20090A     803            jb led_flag, state3ledon
0B87 D2A4       804            setb GREEN
0B89 D2A5       805            setb YELLOW
0B8B D2A6       806            setb RED
0B8D D2A7       807            setb BLUE
0B8F 8008       808            sjmp state3b
0B91            809   state3ledon:
0B91 C2A4       810            clr GREEN
0B93 C2A5       811            clr YELLOW
0B95 C2A6       812            clr RED
0B97 C2A7       813            clr BLUE
0B99            814   state3b:
0B99            815            ; MAC (ReflowTime_Message:    Constant string for the first line on LCD       reflow_seconds: value to be shown on second line                          Secs: unit )
0B99 C0E0       815            push acc
0B9B 7401       815            mov a, #1
0B9D 14         815            dec a
0B9E 1200C1     815            lcall ?Set_Cursor_1 ; Select column and row
0BA1 D0E0       815            pop acc
0BA3 C083       815            push dph
0BA5 C082       815            push dpl
0BA7 C0E0       815            push acc
0BA9 90045C     815            mov dptr, #ReflowTime_Message
0BAC 1200B4     815            lcall ?Send_Constant_String
0BAF D0E0       815            pop acc
0BB1 D082       815            pop dpl
0BB3 D083       815            pop dph
0BB5 C0E0       815            push acc
0BB7 7401       815            mov a, #1
0BB9 14         815            dec a
0BBA 1200BF     815            lcall ?Set_Cursor_2 ; Select column and row
0BBD D0E0       815            pop acc
0BBF 85363F     815            mov x+0, reflow_seconds+0 
0BC2 754000     815            mov x+1, #0
0BC5 754100     815            mov x+2, #0 
0BC8 754200     815            mov x+3, #0
0BCB 1200DC     815            lcall hex2bcd
0BCE C000       815            push ar0
0BD0 C0E0       815            push acc
0BD2 7420       815            mov a, #' '
0BD4 12007E     815            lcall ?WriteData
0BD7 A84A       815            mov r0, bcd+1
0BD9 E8         815            mov a, r0
0BDA 540F       815            anl a, #0fh
0BDC 4430       815            orl a, #30h
0BDE 12007E     815            lcall ?WriteData
0BE1 D0E0       815            pop acc
0BE3 D000       815            pop ar0
0BE5 C000       815            push ar0
0BE7 A849       815            mov r0, bcd
0BE9 1200C6     815            lcall ?Display_BCD
0BEC D000       815            pop ar0
0BEE C0E0       815            push acc
0BF0 7405       815            mov a, #5
0BF2 14         815            dec a
0BF3 1200BF     815            lcall ?Set_Cursor_2 ; Select column and row
0BF6 D0E0       815            pop acc
0BF8 C083       815            push dph
0BFA C082       815            push dpl
0BFC C0E0       815            push acc
0BFE 9005F3     815            mov dptr, #Secs
0C01 1200B4     815            lcall ?Send_Constant_String
0C04 D0E0       815            pop acc
0C06 D082       815            pop dpl
0C08 D083       815            pop dph         
0C0A            816            ;Mac (INC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0C0A 208217     816            jb INC_BUTTON, no_inc_dec_var101
0C0D C002       816            push AR2
0C0F 7A32       816            mov R2, #50
0C11 120039     816            lcall ?Wait_Milli_Seconds
0C14 D002       816            pop AR2
0C16 20820B     816            jb INC_BUTTON, no_inc_dec_var101
0C19 C002       816            push AR2
0C1B 7A64       816            mov R2, #100
0C1D 120039     816            lcall ?Wait_Milli_Seconds
0C20 D002       816            pop AR2
0C22            816   
0C22 0536       816            inc reflow_seconds
0C24            816            
0C24            816   no_inc_dec_var101:
0C24            816   
0C24            817            ;Mac (DEC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0C24 208417     817            jb DEC_BUTTON, no_inc_dec_var104
0C27 C002       817            push AR2
0C29 7A32       817            mov R2, #50
0C2B 120039     817            lcall ?Wait_Milli_Seconds
0C2E D002       817            pop AR2
0C30 20840B     817            jb DEC_BUTTON, no_inc_dec_var104
0C33 C002       817            push AR2
0C35 7A64       817            mov R2, #100
0C37 120039     817            lcall ?Wait_Milli_Seconds
0C3A D002       817            pop AR2
0C3C            817   
0C3C 1536       817            dec reflow_seconds
0C3E            817            
0C3E            817   no_inc_dec_var104:
0C3E            817   
0C3E            818            
0C3E E536       819            mov a, reflow_seconds
0C40 C3         819     clr c
0C41 14         819     dec a
0C42 942D       819     subb a, #45                    ;reflow time should be less than 45 seconds
0C44 4003       819     jc     Not_over_Limit107       ;if reflow_seconds - 45 < 0
0C46            819   
0C46 75362D     819     mov reflow_seconds, #45        ;reset reflow seconds to 0s
0C49            819     
0C49            819   Not_over_Limit107:  
0C49            820     
0C49            821            ; MAC (CYCLE_BUTTON:    Constant string for the button name           4: state to jump to if the button is pressed )
0C49 208020     821            jb CYCLE_BUTTON, no_button_pressed108
0C4C C002       821            push AR2
0C4E 7A32       821            mov R2, #50
0C50 120039     821            lcall ?Wait_Milli_Seconds
0C53 D002       821            pop AR2
0C55 208014     821            jb CYCLE_BUTTON, no_button_pressed108
0C58 3080FD     821            jnb CYCLE_BUTTON, $
0C5B            821            
0C5B 755A04     821            mov state, #4
0C5E 7401       821            mov a, #0x01
0C60 120083     821            lcall ?WriteCommand
0C63 C002       821            push AR2
0C65 7A02       821            mov R2, #2
0C67 120039     821            lcall ?Wait_Milli_Seconds
0C6A D002       821            pop AR2
0C6C            821   no_button_pressed108:
0C6C            821   
0C6C 02090B     822            ljmp forever                                                                    
0C6F            823   
0C6F            824   ; initializing the Reflow Temperature 
0C6F            825   state4:
0C6F            826                    ; 4 state number    5 next state
0C6F E55A       826       mov a, state
0C71 B40402     826       cjne a, #4, skipstate112
0C74 8003       826            sjmp no_skip_state112
0C76            826   skipstate112:
0C76 020D64     826       ljmp state5
0C79            826   no_skip_state112:
0C79 20090A     827            jb led_flag, state4ledon
0C7C D2A4       828            setb GREEN
0C7E D2A5       829            setb YELLOW
0C80 D2A6       830            setb RED
0C82 D2A7       831            setb BLUE
0C84 8008       832            sjmp state4b
0C86            833   state4ledon:
0C86 C2A4       834            clr GREEN
0C88 C2A5       835            clr YELLOW
0C8A C2A6       836            clr RED
0C8C C2A7       837            clr BLUE
0C8E            838   state4b:
0C8E            839            ; MAC (ReflowTemp_Message:    Constant string for the first line on LCD       reflow_temp: value to be shown on second line                             Cels: unit )
0C8E C0E0       839            push acc
0C90 7401       839            mov a, #1
0C92 14         839            dec a
0C93 1200C1     839            lcall ?Set_Cursor_1 ; Select column and row
0C96 D0E0       839            pop acc
0C98 C083       839            push dph
0C9A C082       839            push dpl
0C9C C0E0       839            push acc
0C9E 90046D     839            mov dptr, #ReflowTemp_Message
0CA1 1200B4     839            lcall ?Send_Constant_String
0CA4 D0E0       839            pop acc
0CA6 D082       839            pop dpl
0CA8 D083       839            pop dph
0CAA C0E0       839            push acc
0CAC 7401       839            mov a, #1
0CAE 14         839            dec a
0CAF 1200BF     839            lcall ?Set_Cursor_2 ; Select column and row
0CB2 D0E0       839            pop acc
0CB4 85373F     839            mov x+0, reflow_temp+0 
0CB7 754000     839            mov x+1, #0
0CBA 754100     839            mov x+2, #0 
0CBD 754200     839            mov x+3, #0
0CC0 1200DC     839            lcall hex2bcd
0CC3 C000       839            push ar0
0CC5 C0E0       839            push acc
0CC7 7420       839            mov a, #' '
0CC9 12007E     839            lcall ?WriteData
0CCC A84A       839            mov r0, bcd+1
0CCE E8         839            mov a, r0
0CCF 540F       839            anl a, #0fh
0CD1 4430       839            orl a, #30h
0CD3 12007E     839            lcall ?WriteData
0CD6 D0E0       839            pop acc
0CD8 D000       839            pop ar0
0CDA C000       839            push ar0
0CDC A849       839            mov r0, bcd
0CDE 1200C6     839            lcall ?Display_BCD
0CE1 D000       839            pop ar0
0CE3 C0E0       839            push acc
0CE5 7405       839            mov a, #5
0CE7 14         839            dec a
0CE8 1200BF     839            lcall ?Set_Cursor_2 ; Select column and row
0CEB D0E0       839            pop acc
0CED C083       839            push dph
0CEF C082       839            push dpl
0CF1 C0E0       839            push acc
0CF3 9005EF     839            mov dptr, #Cels
0CF6 1200B4     839            lcall ?Send_Constant_String
0CF9 D0E0       839            pop acc
0CFB D082       839            pop dpl
0CFD D083       839            pop dph                 
0CFF            840            ;Mac (INC_BUTTON : inc/dec button    reflow_temp : variable ) 
0CFF 208217     840            jb INC_BUTTON, no_inc_dec_var122
0D02 C002       840            push AR2
0D04 7A32       840            mov R2, #50
0D06 120039     840            lcall ?Wait_Milli_Seconds
0D09 D002       840            pop AR2
0D0B 20820B     840            jb INC_BUTTON, no_inc_dec_var122
0D0E C002       840            push AR2
0D10 7A64       840            mov R2, #100
0D12 120039     840            lcall ?Wait_Milli_Seconds
0D15 D002       840            pop AR2
0D17            840   
0D17            840   
0D17 0537       840            inc reflow_temp
0D19            840            
0D19            840   no_inc_dec_var122:
0D19            840   
0D19            841            ;Mac (DEC_BUTTON : inc/dec button    reflow_temp : variable ) 
0D19 208417     841            jb DEC_BUTTON, no_inc_dec_var125
0D1C C002       841            push AR2
0D1E 7A32       841            mov R2, #50
0D20 120039     841            lcall ?Wait_Milli_Seconds
0D23 D002       841            pop AR2
0D25 20840B     841            jb DEC_BUTTON, no_inc_dec_var125
0D28 C002       841            push AR2
0D2A 7A64       841            mov R2, #100
0D2C 120039     841            lcall ?Wait_Milli_Seconds
0D2F D002       841            pop AR2
0D31            841   
0D31            841   
0D31 1537       841            dec reflow_temp
0D33            841            
0D33            841   no_inc_dec_var125:
0D33            841   
0D33            842            
0D33 E537       843            mov a, reflow_temp
0D35 C3         843     clr c
0D36 14         843     dec a
0D37 94EB       843     subb a, #235                   ;reflow time should be less than 45 seconds
0D39 4003       843     jc     Not_over_Limit128       ;if reflow_seconds - 45 < 0
0D3B            843   
0D3B 7537EB     843     mov reflow_temp, #235  ;reset reflow seconds to 0s
0D3E            843     
0D3E            843   Not_over_Limit128:  
0D3E            844     
0D3E            845            ; MAC (CYCLE_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0D3E 208020     845            jb CYCLE_BUTTON, no_button_pressed129
0D41 C002       845            push AR2
0D43 7A32       845            mov R2, #50
0D45 120039     845            lcall ?Wait_Milli_Seconds
0D48 D002       845            pop AR2
0D4A 208014     845            jb CYCLE_BUTTON, no_button_pressed129
0D4D 3080FD     845            jnb CYCLE_BUTTON, $
0D50            845            
0D50 755A00     845            mov state, #0
0D53 7401       845            mov a, #0x01
0D55 120083     845            lcall ?WriteCommand
0D58 C002       845            push AR2
0D5A 7A02       845            mov R2, #2
0D5C 120039     845            lcall ?Wait_Milli_Seconds
0D5F D002       845            pop AR2
0D61            845   no_button_pressed129:
0D61            845   
0D61 02090B     846            ljmp forever                                                                    
0D64            847            
0D64            848   ; Saves value in Flash Memory and Presents Confirmation Screen to Start Process
0D64            849   state5:
0D64            850                    ; 5 state number    6 next state
0D64 E55A       850       mov a, state
0D66 B40502     850       cjne a, #5, skipstate133
0D69 8003       850            sjmp no_skip_state133
0D6B            850   skipstate133:
0D6B 020EC1     850       ljmp state6
0D6E            850   no_skip_state133:
0D6E D2A4       851            setb GREEN
0D70 D2A5       852            setb YELLOW
0D72 D2A6       853            setb RED
0D74 D2A7       854            setb BLUE
0D76 300461     855     jnb settings_modified_flag, state5TempSet ; Save values once, once saved skip this
0D79            856     
0D79 12086D     857            lcall Save_Configuration ; Call to save data to flash memory
0D7C C204       858            clr settings_modified_flag
0D7E C0E0       859            push acc
0D80 7401       859            mov a, #1
0D82 14         859            dec a
0D83 1200C1     859            lcall ?Set_Cursor_1 ; Select column and row
0D86 D0E0       859            pop acc
0D88 C083       859            push dph
0D8A C082       859            push dpl
0D8C C0E0       859            push acc
0D8E 9004E4     859            mov dptr, #SaveToFlash_Msg
0D91 1200B4     859            lcall ?Send_Constant_String
0D94 D0E0       859            pop acc
0D96 D082       859            pop dpl
0D98 D083       859            pop dph
0D9A C0E0       859            push acc
0D9C 7401       859            mov a, #1
0D9E 14         859            dec a
0D9F 1200BF     859            lcall ?Set_Cursor_2 ; Select column and row
0DA2 D0E0       859            pop acc
0DA4 C083       859            push dph
0DA6 C082       859            push dpl
0DA8 C0E0       859            push acc
0DAA 900506     859            mov dptr, #BlankMsg
0DAD 1200B4     859            lcall ?Send_Constant_String
0DB0 D0E0       859            pop acc
0DB2 D082       859            pop dpl
0DB4 D083       859            pop dph
0DB6 C002       860            push AR2
0DB8 7AFA       860            mov R2, #250
0DBA 120039     860            lcall ?Wait_Milli_Seconds
0DBD D002       860            pop AR2
0DBF C002       861            push AR2
0DC1 7AFA       861            mov R2, #250
0DC3 120039     861            lcall ?Wait_Milli_Seconds
0DC6 D002       861            pop AR2
0DC8 C002       862            push AR2
0DCA 7AFA       862            mov R2, #250
0DCC 120039     862            lcall ?Wait_Milli_Seconds
0DCF D002       862            pop AR2
0DD1 C002       863            push AR2
0DD3 7AFA       863            mov R2, #250
0DD5 120039     863            lcall ?Wait_Milli_Seconds
0DD8 D002       863            pop AR2
0DDA            864     
0DDA            865   state5TempSet:
0DDA E55B       866     mov a, current_temp
0DDC C3         867     clr c 
0DDD 9535       868     subb a, soak_temp ; Compare to soak temp
0DDF 405F       869            jc state5AndThreeQuarters ; If temp is too high, do not allow user to continue
0DE1 C0E0       870            push acc
0DE3 7401       870            mov a, #1
0DE5 14         870            dec a
0DE6 1200C1     870            lcall ?Set_Cursor_1 ; Select column and row
0DE9 D0E0       870            pop acc
0DEB C083       870            push dph
0DED C082       870            push dpl
0DEF C0E0       870            push acc
0DF1 9004A0     870            mov dptr, #TempTooHighMsg
0DF4 1200B4     870            lcall ?Send_Constant_String
0DF7 D0E0       870            pop acc
0DF9 D082       870            pop dpl
0DFB D083       870            pop dph
0DFD C0E0       870            push acc
0DFF 7401       870            mov a, #1
0E01 14         870            dec a
0E02 1200BF     870            lcall ?Set_Cursor_2 ; Select column and row
0E05 D0E0       870            pop acc
0E07 C083       870            push dph
0E09 C082       870            push dpl
0E0B C0E0       870            push acc
0E0D 9004B1     870            mov dptr, #TempTooHighMsg2
0E10 1200B4     870            lcall ?Send_Constant_String
0E13 D0E0       870            pop acc
0E15 D082       870            pop dpl
0E17 D083       870            pop dph ; Display cooling message, prevent user from starting reflow process
0E19 C002       871            push AR2
0E1B 7AFA       871            mov R2, #250
0E1D 120039     871            lcall ?Wait_Milli_Seconds
0E20 D002       871            pop AR2
0E22 C002       872            push AR2
0E24 7AFA       872            mov R2, #250
0E26 120039     872            lcall ?Wait_Milli_Seconds
0E29 D002       872            pop AR2
0E2B C002       873            push AR2
0E2D 7AFA       873            mov R2, #250
0E2F 120039     873            lcall ?Wait_Milli_Seconds
0E32 D002       873            pop AR2
0E34 C002       874            push AR2
0E36 7AFA       874            mov R2, #250
0E38 120039     874            lcall ?Wait_Milli_Seconds
0E3B D002       874            pop AR2
0E3D 02090B     875     ljmp forever
0E40            876   state5AndThreeQuarters:
0E40 C0E0       877            push acc
0E42 7401       877            mov a, #1
0E44 14         877            dec a
0E45 1200C1     877            lcall ?Set_Cursor_1 ; Select column and row
0E48 D0E0       877            pop acc
0E4A C083       877            push dph
0E4C C082       877            push dpl
0E4E C0E0       877            push acc
0E50 90047E     877            mov dptr, #Start_Message
0E53 1200B4     877            lcall ?Send_Constant_String
0E56 D0E0       877            pop acc
0E58 D082       877            pop dpl
0E5A D083       877            pop dph
0E5C C0E0       877            push acc
0E5E 7401       877            mov a, #1
0E60 14         877            dec a
0E61 1200BF     877            lcall ?Set_Cursor_2 ; Select column and row
0E64 D0E0       877            pop acc
0E66 C083       877            push dph
0E68 C082       877            push dpl
0E6A C0E0       877            push acc
0E6C 90048F     877            mov dptr, #Y_N_Message
0E6F 1200B4     877            lcall ?Send_Constant_String
0E72 D0E0       877            pop acc
0E74 D082       877            pop dpl
0E76 D083       877            pop dph
0E78            878            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0E78 208420     878            jb DEC_BUTTON, no_button_pressed157
0E7B C002       878            push AR2
0E7D 7A32       878            mov R2, #50
0E7F 120039     878            lcall ?Wait_Milli_Seconds
0E82 D002       878            pop AR2
0E84 208414     878            jb DEC_BUTTON, no_button_pressed157
0E87 3084FD     878            jnb DEC_BUTTON, $
0E8A            878            
0E8A 755A00     878            mov state, #0
0E8D 7401       878            mov a, #0x01
0E8F 120083     878            lcall ?WriteCommand
0E92 C002       878            push AR2
0E94 7A02       878            mov R2, #2
0E96 120039     878            lcall ?Wait_Milli_Seconds
0E99 D002       878            pop AR2
0E9B            878   no_button_pressed157:
0E9B            878            ; Move to state 0 to reselect values
0E9B            879            ; MAC (INC_BUTTON:    Constant string for the button name           6: state to jump to if the button is pressed )
0E9B 208220     879            jb INC_BUTTON, no_button_pressed161
0E9E C002       879            push AR2
0EA0 7A32       879            mov R2, #50
0EA2 120039     879            lcall ?Wait_Milli_Seconds
0EA5 D002       879            pop AR2
0EA7 208214     879            jb INC_BUTTON, no_button_pressed161
0EAA 3082FD     879            jnb INC_BUTTON, $
0EAD            879            
0EAD 755A06     879            mov state, #6
0EB0 7401       879            mov a, #0x01
0EB2 120083     879            lcall ?WriteCommand
0EB5 C002       879            push AR2
0EB7 7A02       879            mov R2, #2
0EB9 120039     879            lcall ?Wait_Milli_Seconds
0EBC D002       879            pop AR2
0EBE            879   no_button_pressed161:
0EBE            879            ; Start Process
0EBE            880    
0EBE 02090B     881     ljmp forever   
0EC1            882   
0EC1            883   state6:
0EC1            884                    ; 6 state number    10 next state
0EC1 E55A       884       mov a, state
0EC3 B40602     884       cjne a, #6, skipstate165
0EC6 8003       884            sjmp no_skip_state165
0EC8            884   skipstate165:
0EC8 020EDC     884       ljmp state10
0ECB            884   no_skip_state165:
0ECB C201       885            clr one_min_flag
0ECD            886            
0ECD E4         887     clr a
0ECE F539       888     mov run_time_sec, a
0ED0 F538       889     mov run_time_min, a
0ED2 F53A       890     mov state_time, a
0ED4 755A0A     891     mov state, #10
0ED7 D206       892     setb short_beep_flag
0ED9 02090B     893     ljmp forever
0EDC            894     
0EDC            895   state10:
0EDC            896   
0EDC            897                    ; 10 state number    11 next state
0EDC E55A       897       mov a, state
0EDE B40A02     897       cjne a, #10, skipstate166
0EE1 8003       897            sjmp no_skip_state166
0EE3            897   skipstate166:
0EE3 020FFC     897       ljmp state11
0EE6            897   no_skip_state166:
0EE6 20090A     898            jb led_flag, state10ledon
0EE9 D2A4       899            setb GREEN
0EEB D2A5       900            setb YELLOW
0EED D2A6       901            setb RED
0EEF D2A7       902            setb BLUE
0EF1 8008       903            sjmp state10b
0EF3            904   state10ledon:
0EF3 D2A4       905            setb GREEN
0EF5 C2A5       906            clr YELLOW
0EF7 D2A6       907            setb RED
0EF9 D2A7       908            setb BLUE
0EFB            909   state10b:
0EFB            910   
0EFB            911            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0EFB 208020     911            jb CYCLE_BUTTON, no_button_pressed167
0EFE C002       911            push AR2
0F00 7A32       911            mov R2, #50
0F02 120039     911            lcall ?Wait_Milli_Seconds
0F05 D002       911            pop AR2
0F07 208014     911            jb CYCLE_BUTTON, no_button_pressed167
0F0A 3080FD     911            jnb CYCLE_BUTTON, $
0F0D            911            
0F0D 755A11     911            mov state, #17
0F10 7401       911            mov a, #0x01
0F12 120083     911            lcall ?WriteCommand
0F15 C002       911            push AR2
0F17 7A02       911            mov R2, #2
0F19 120039     911            lcall ?Wait_Milli_Seconds
0F1C D002       911            pop AR2
0F1E            911   no_button_pressed167:
0F1E            911   
0F1E C202       912            clr pwm_on                      ;100% pwm
0F20 D2B7       913            setb SSR_OUT            ; for 100% power
0F22            914            ; MAC (Ramp2Soak:    Constant string for the first line on LCD           current_temp: Temperature                      run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
0F22 C0E0       914            push acc
0F24 7401       914            mov a, #1
0F26 14         914            dec a
0F27 1200C1     914            lcall ?Set_Cursor_1 ; Select column and row
0F2A D0E0       914            pop acc
0F2C C083       914            push dph
0F2E C082       914            push dpl
0F30 C0E0       914            push acc
0F32 900548     914            mov dptr, #Ramp2Soak
0F35 1200B4     914            lcall ?Send_Constant_String
0F38 D0E0       914            pop acc
0F3A D082       914            pop dpl
0F3C D083       914            pop dph
0F3E            914     
0F3E C0E0       914            push acc
0F40 7401       914            mov a, #1
0F42 14         914            dec a
0F43 1200BF     914            lcall ?Set_Cursor_2 ; Select column and row
0F46 D0E0       914            pop acc         ;show temperture
0F48 855B3F     914            mov x+0, current_temp+0 
0F4B 754000     914            mov x+1, #0
0F4E 754100     914            mov x+2, #0 
0F51 754200     914            mov x+3, #0
0F54 1200DC     914            lcall hex2bcd
0F57 C000       914            push ar0
0F59 C0E0       914            push acc
0F5B 7420       914            mov a, #' '
0F5D 12007E     914            lcall ?WriteData
0F60 A84A       914            mov r0, bcd+1
0F62 E8         914            mov a, r0
0F63 540F       914            anl a, #0fh
0F65 4430       914            orl a, #30h
0F67 12007E     914            lcall ?WriteData
0F6A D0E0       914            pop acc
0F6C D000       914            pop ar0
0F6E C000       914            push ar0
0F70 A849       914            mov r0, bcd
0F72 1200C6     914            lcall ?Display_BCD
0F75 D000       914            pop ar0
0F77            914   
0F77 C0E0       914            push acc
0F79 7405       914            mov a, #5
0F7B 14         914            dec a
0F7C 1200BF     914            lcall ?Set_Cursor_2 ; Select column and row
0F7F D0E0       914            pop acc
0F81 C083       914            push dph
0F83 C082       914            push dpl
0F85 C0E0       914            push acc
0F87 9005EF     914            mov dptr, #Cels
0F8A 1200B4     914            lcall ?Send_Constant_String
0F8D D0E0       914            pop acc
0F8F D082       914            pop dpl
0F91 D083       914            pop dph
0F93            914   
0F93 C0E0       914            push acc
0F95 740B       914            mov a, #11
0F97 14         914            dec a
0F98 1200BF     914            lcall ?Set_Cursor_2 ; Select column and row
0F9B D0E0       914            pop acc
0F9D 85383F     914            mov x+0, run_time_min+0 
0FA0 754000     914            mov x+1, #0
0FA3 754100     914            mov x+2, #0 
0FA6 754200     914            mov x+3, #0
0FA9 1200DC     914     lcall hex2bcd
0FAC C000       914            push ar0
0FAE A849       914            mov r0, bcd
0FB0 1200C6     914            lcall ?Display_BCD
0FB3 D000       914            pop ar0
0FB5 C0E0       914            push acc
0FB7 743A       914            mov a, #':'
0FB9 12007E     914            lcall ?WriteData
0FBC D0E0       914            pop acc
0FBE 85393F     914            mov x+0, run_time_sec+0 
0FC1 754000     914            mov x+1, #0
0FC4 754100     914            mov x+2, #0 
0FC7 754200     914            mov x+3, #0
0FCA 1200DC     914     lcall hex2bcd
0FCD C000       914            push ar0
0FCF A849       914            mov r0, bcd
0FD1 1200C6     914            lcall ?Display_BCD
0FD4 D000       914            pop ar0
0FD6            914   
0FD6            914     
0FD6            914    
0FD6            914            ;display the current stage and current temperature
0FD6 300111     915     jnb one_min_flag, not_one_min      ;check if 60 seconds has passed
0FD9 C201       916     clr one_min_flag
0FDB E55B       917     mov a, current_temp
0FDD C3         918     clr c
0FDE B43200     919     cjne a, #50, check_thermocouple  ;check if thermocouple degree is bigger than 50
0FE1            920   check_thermocouple:
0FE1 5007       921     jnc not_one_min   ;if not bigger than 50, c=1, jump to display error
0FE3 755A10     922     mov state, #16
0FE6 D207       923     setb long_beep_flag
0FE8 800F       924     sjmp state10_Loop
0FEA            925     
0FEA            926   not_one_min:
0FEA E535       927            mov a, soak_temp 
0FEC C3         928     clr c 
0FED 955B       929     subb a, current_temp   ;compare current_temp and soak_temp
0FEF 5008       930     jnc state10_Loop
0FF1            931     
0FF1 755A0B     932     mov state, #11
0FF4 E4         933     clr a
0FF5 F53A       934            mov state_time, a       ; reset state time to 0 for next state 
0FF7            935    
0FF7 D206       936     setb short_beep_flag
0FF9            937            
0FF9            938   
0FF9            939   state10_Loop:
0FF9 02090B     940            ljmp forever
0FFC            941                    
0FFC            942   ; Soak Stage             
0FFC            943   state11:
0FFC            944                    ; 11 state number    12 next state
0FFC E55A       944       mov a, state
0FFE B40B02     944       cjne a, #11, skipstate186
1001 8003       944            sjmp no_skip_state186
1003            944   skipstate186:
1003 0210F3     944       ljmp state12
1006            944   no_skip_state186:
1006 C2A5       945            clr YELLOW
1008            946            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1008 208020     946            jb CYCLE_BUTTON, no_button_pressed187
100B C002       946            push AR2
100D 7A32       946            mov R2, #50
100F 120039     946            lcall ?Wait_Milli_Seconds
1012 D002       946            pop AR2
1014 208014     946            jb CYCLE_BUTTON, no_button_pressed187
1017 3080FD     946            jnb CYCLE_BUTTON, $
101A            946            
101A 755A11     946            mov state, #17
101D 7401       946            mov a, #0x01
101F 120083     946            lcall ?WriteCommand
1022 C002       946            push AR2
1024 7A02       946            mov R2, #2
1026 120039     946            lcall ?Wait_Milli_Seconds
1029 D002       946            pop AR2
102B            946   no_button_pressed187:
102B            946   
102B D202       947            setb pwm_on                     ;25% pwm
102D            948            ; MAC (Soak:    Constant string for the first line on LCD           current_temp: Temperature                   run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
102D C0E0       948            push acc
102F 7401       948            mov a, #1
1031 14         948            dec a
1032 1200C1     948            lcall ?Set_Cursor_1 ; Select column and row
1035 D0E0       948            pop acc
1037 C083       948            push dph
1039 C082       948            push dpl
103B C0E0       948            push acc
103D 900559     948            mov dptr, #Soak
1040 1200B4     948            lcall ?Send_Constant_String
1043 D0E0       948            pop acc
1045 D082       948            pop dpl
1047 D083       948            pop dph
1049            948     
1049 C0E0       948            push acc
104B 7401       948            mov a, #1
104D 14         948            dec a
104E 1200BF     948            lcall ?Set_Cursor_2 ; Select column and row
1051 D0E0       948            pop acc         ;show temperture
1053 855B3F     948            mov x+0, current_temp+0 
1056 754000     948            mov x+1, #0
1059 754100     948            mov x+2, #0 
105C 754200     948            mov x+3, #0
105F 1200DC     948            lcall hex2bcd
1062 C000       948            push ar0
1064 C0E0       948            push acc
1066 7420       948            mov a, #' '
1068 12007E     948            lcall ?WriteData
106B A84A       948            mov r0, bcd+1
106D E8         948            mov a, r0
106E 540F       948            anl a, #0fh
1070 4430       948            orl a, #30h
1072 12007E     948            lcall ?WriteData
1075 D0E0       948            pop acc
1077 D000       948            pop ar0
1079 C000       948            push ar0
107B A849       948            mov r0, bcd
107D 1200C6     948            lcall ?Display_BCD
1080 D000       948            pop ar0
1082            948   
1082 C0E0       948            push acc
1084 7405       948            mov a, #5
1086 14         948            dec a
1087 1200BF     948            lcall ?Set_Cursor_2 ; Select column and row
108A D0E0       948            pop acc
108C C083       948            push dph
108E C082       948            push dpl
1090 C0E0       948            push acc
1092 9005EF     948            mov dptr, #Cels
1095 1200B4     948            lcall ?Send_Constant_String
1098 D0E0       948            pop acc
109A D082       948            pop dpl
109C D083       948            pop dph
109E            948   
109E C0E0       948            push acc
10A0 740B       948            mov a, #11
10A2 14         948            dec a
10A3 1200BF     948            lcall ?Set_Cursor_2 ; Select column and row
10A6 D0E0       948            pop acc
10A8 85383F     948            mov x+0, run_time_min+0 
10AB 754000     948            mov x+1, #0
10AE 754100     948            mov x+2, #0 
10B1 754200     948            mov x+3, #0
10B4 1200DC     948     lcall hex2bcd
10B7 C000       948            push ar0
10B9 A849       948            mov r0, bcd
10BB 1200C6     948            lcall ?Display_BCD
10BE D000       948            pop ar0
10C0 C0E0       948            push acc
10C2 743A       948            mov a, #':'
10C4 12007E     948            lcall ?WriteData
10C7 D0E0       948            pop acc
10C9 85393F     948            mov x+0, run_time_sec+0 
10CC 754000     948            mov x+1, #0
10CF 754100     948            mov x+2, #0 
10D2 754200     948            mov x+3, #0
10D5 1200DC     948     lcall hex2bcd
10D8 C000       948            push ar0
10DA A849       948            mov r0, bcd
10DC 1200C6     948            lcall ?Display_BCD
10DF D000       948            pop ar0
10E1            948   
10E1            948     
10E1            948    
10E1            948   ;display the current stage and current temperature
10E1 E53A       949            mov a, state_time 
10E3 C3         950            clr c
10E4 9534       951            subb a, soak_seconds 
10E6            952   ;        jnc time_not_equal
10E6 4008       953            jc      State11_Loop
10E8            954     
10E8 755A0C     955     mov state, #12 ;if time is equal set state to 12
10EB E4         956     clr a
10EC F53A       957            mov state_time, a       ; reset state time to 0 for next state 
10EE            958     
10EE D206       959     setb short_beep_flag
10F0            960     ;--------------------------------------------------------------------;
10F0            961     ; A short beep
10F0            962     ;--------------------------------------------------------------------;
10F0            963   ;time_not_equal:
10F0            964     ;compare temp                                                                                                  pattern to check temp:                                                                 ____     
10F0            965   ;  mov a, current_temp ;                                                                                                                                                                                         ____      /    \____/
10F0            966   ;        clr c                                                           ;                                                                                                                                                                                                /    \____/     
10F0            967   ;        subb a, soak_temp       ;                                                                                                               ____/
10F0            968   ;        jnc temp_too_low                
10F0            969   ;        sjmp State11_done:      ;                                                                       checks every temperature twice for the right one
10F0            970                                                                                                                                                            
10F0            971   ;temp_not_low:           
10F0            972   ;        inc current_temp
10F0            973   ;  inc current temp
10F0            974   ;        mov a, current_temp 
10F0            975   ;        clr c
10F0            976   ;        subb a, soak_temp 
10F0            977   ;        jnc temp_too_high
10F0            978   ;  sjmp State11_done:
10F0            979   
10F0            980   ;temp_too_high:  
10F0            981   ;  dec current_temp
10F0            982   
10F0            983   State11_Loop:
10F0 02090B     984     ljmp forever
10F3            985     
10F3            986                    
10F3            987   ; Ramp to Reflow Stage, compare current_temp with reflow_temp            
10F3            988   state12:
10F3            989                    ; 12 state number    13 next state
10F3 E55A       989       mov a, state
10F5 B40C02     989       cjne a, #12, skipstate206
10F8 8003       989            sjmp no_skip_state206
10FA            989   skipstate206:
10FA 0211FF     989       ljmp state13
10FD            989   no_skip_state206:
10FD 20090A     990            jb led_flag, state12ledon
1100 D2A4       991            setb GREEN
1102 D2A5       992            setb YELLOW
1104 D2A6       993            setb RED
1106 D2A7       994            setb BLUE
1108 8008       995            sjmp state12b
110A            996   state12ledon:
110A D2A4       997            setb GREEN
110C D2A5       998            setb YELLOW
110E C2A6       999            clr RED
1110 D2A7      1000            setb BLUE
1112           1001   state12b:
1112           1002            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1112 208020    1002            jb CYCLE_BUTTON, no_button_pressed207
1115 C002      1002            push AR2
1117 7A32      1002            mov R2, #50
1119 120039    1002            lcall ?Wait_Milli_Seconds
111C D002      1002            pop AR2
111E 208014    1002            jb CYCLE_BUTTON, no_button_pressed207
1121 3080FD    1002            jnb CYCLE_BUTTON, $
1124           1002            
1124 755A11    1002            mov state, #17
1127 7401      1002            mov a, #0x01
1129 120083    1002            lcall ?WriteCommand
112C C002      1002            push AR2
112E 7A02      1002            mov R2, #2
1130 120039    1002            lcall ?Wait_Milli_Seconds
1133 D002      1002            pop AR2
1135           1002   no_button_pressed207:
1135           1002   
1135 C202      1003     clr pwm_on
1137 D2B7      1004     setb SSR_OUT   ;100% power on
1139           1005            ; MAC (Ramp2Reflow:    Constant string for the first line on LCD           current_temp: Temperature                    run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
1139 C0E0      1005            push acc
113B 7401      1005            mov a, #1
113D 14        1005            dec a
113E 1200C1    1005            lcall ?Set_Cursor_1 ; Select column and row
1141 D0E0      1005            pop acc
1143 C083      1005            push dph
1145 C082      1005            push dpl
1147 C0E0      1005            push acc
1149 900537    1005            mov dptr, #Ramp2Reflow
114C 1200B4    1005            lcall ?Send_Constant_String
114F D0E0      1005            pop acc
1151 D082      1005            pop dpl
1153 D083      1005            pop dph
1155           1005     
1155 C0E0      1005            push acc
1157 7401      1005            mov a, #1
1159 14        1005            dec a
115A 1200BF    1005            lcall ?Set_Cursor_2 ; Select column and row
115D D0E0      1005            pop acc
115F           1005            ;show temperture
115F 855B3F    1005            mov x+0, current_temp+0 
1162 754000    1005            mov x+1, #0
1165 754100    1005            mov x+2, #0 
1168 754200    1005            mov x+3, #0
116B 1200DC    1005            lcall hex2bcd
116E C000      1005            push ar0
1170 C0E0      1005            push acc
1172 7420      1005            mov a, #' '
1174 12007E    1005            lcall ?WriteData
1177 A84A      1005            mov r0, bcd+1
1179 E8        1005            mov a, r0
117A 540F      1005            anl a, #0fh
117C 4430      1005            orl a, #30h
117E 12007E    1005            lcall ?WriteData
1181 D0E0      1005            pop acc
1183 D000      1005            pop ar0
1185 C000      1005            push ar0
1187 A849      1005            mov r0, bcd
1189 1200C6    1005            lcall ?Display_BCD
118C D000      1005            pop ar0
118E           1005   
118E C0E0      1005            push acc
1190 7405      1005            mov a, #5
1192 14        1005            dec a
1193 1200BF    1005            lcall ?Set_Cursor_2 ; Select column and row
1196 D0E0      1005            pop acc
1198 C083      1005            push dph
119A C082      1005            push dpl
119C C0E0      1005            push acc
119E 9005EF    1005            mov dptr, #Cels
11A1 1200B4    1005            lcall ?Send_Constant_String
11A4 D0E0      1005            pop acc
11A6 D082      1005            pop dpl
11A8 D083      1005            pop dph
11AA           1005   
11AA C0E0      1005            push acc
11AC 740B      1005            mov a, #11
11AE 14        1005            dec a
11AF 1200BF    1005            lcall ?Set_Cursor_2 ; Select column and row
11B2 D0E0      1005            pop acc
11B4 85383F    1005            mov x+0, run_time_min+0 
11B7 754000    1005            mov x+1, #0
11BA 754100    1005            mov x+2, #0 
11BD 754200    1005            mov x+3, #0
11C0 1200DC    1005     lcall hex2bcd
11C3 C000      1005            push ar0
11C5 A849      1005            mov r0, bcd
11C7 1200C6    1005            lcall ?Display_BCD
11CA D000      1005            pop ar0
11CC C0E0      1005            push acc
11CE 743A      1005            mov a, #':'
11D0 12007E    1005            lcall ?WriteData
11D3 D0E0      1005            pop acc
11D5 85393F    1005            mov x+0, run_time_sec+0 
11D8 754000    1005            mov x+1, #0
11DB 754100    1005            mov x+2, #0 
11DE 754200    1005            mov x+3, #0
11E1 1200DC    1005     lcall hex2bcd
11E4 C000      1005            push ar0
11E6 A849      1005            mov r0, bcd
11E8 1200C6    1005            lcall ?Display_BCD
11EB D000      1005            pop ar0
11ED           1005   
11ED           1005     
11ED           1005            ;display the current, temperature and running time
11ED E537      1006     mov a, reflow_temp
11EF C3        1007     clr c
11F0 955B      1008     subb a, current_temp
11F2 5008      1009     jnc State12Loop
11F4           1010     
11F4 755A0D    1011            mov state, #13
11F7 D206      1012     setb short_beep_flag
11F9 E4        1013     clr a
11FA F53A      1014            mov state_time, a       ; reset state time to 0 for next state 
11FC           1015     
11FC           1016   State12Loop:
11FC 02090B    1017     ljmp forever
11FF           1018   
11FF           1019   ; Reflow stage, compare reflow_seconds to current time, move to cooling stage when complete (Still need beep code)
11FF           1020   state13:
11FF           1021                    ; 13 state number    14 next state
11FF E55A      1021       mov a, state
1201 B40D02    1021       cjne a, #13, skipstate226
1204 8003      1021            sjmp no_skip_state226
1206           1021   skipstate226:
1206 02135E    1021       ljmp state14
1209           1021   no_skip_state226:
1209 C2A6      1022            clr RED
120B           1023            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
120B 208020    1023            jb CYCLE_BUTTON, no_button_pressed227
120E C002      1023            push AR2
1210 7A32      1023            mov R2, #50
1212 120039    1023            lcall ?Wait_Milli_Seconds
1215 D002      1023            pop AR2
1217 208014    1023            jb CYCLE_BUTTON, no_button_pressed227
121A 3080FD    1023            jnb CYCLE_BUTTON, $
121D           1023            
121D 755A11    1023            mov state, #17
1220 7401      1023            mov a, #0x01
1222 120083    1023            lcall ?WriteCommand
1225 C002      1023            push AR2
1227 7A02      1023            mov R2, #2
1229 120039    1023            lcall ?Wait_Milli_Seconds
122C D002      1023            pop AR2
122E           1023   no_button_pressed227:
122E           1023   
122E           1023   
122E D202      1024     setb pwm_on ; Set PWM to 25% power
1230           1025            ; MAC (Reflow:    Constant string for the first line on LCD           current_temp: Temperature                         run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
1230 C0E0      1025            push acc
1232 7401      1025            mov a, #1
1234 14        1025            dec a
1235 1200C1    1025            lcall ?Set_Cursor_1 ; Select column and row
1238 D0E0      1025            pop acc
123A C083      1025            push dph
123C C082      1025            push dpl
123E C0E0      1025            push acc
1240 90056A    1025            mov dptr, #Reflow
1243 1200B4    1025            lcall ?Send_Constant_String
1246 D0E0      1025            pop acc
1248 D082      1025            pop dpl
124A D083      1025            pop dph
124C           1025     
124C C0E0      1025            push acc
124E 7401      1025            mov a, #1
1250 14        1025            dec a
1251 1200BF    1025            lcall ?Set_Cursor_2 ; Select column and row
1254 D0E0      1025            pop acc         ;show temperture
1256 855B3F    1025            mov x+0, current_temp+0 
1259 754000    1025            mov x+1, #0
125C 754100    1025            mov x+2, #0 
125F 754200    1025            mov x+3, #0
1262 1200DC    1025            lcall hex2bcd
1265 C000      1025            push ar0
1267 C0E0      1025            push acc
1269 7420      1025            mov a, #' '
126B 12007E    1025            lcall ?WriteData
126E A84A      1025            mov r0, bcd+1
1270 E8        1025            mov a, r0
1271 540F      1025            anl a, #0fh
1273 4430      1025            orl a, #30h
1275 12007E    1025            lcall ?WriteData
1278 D0E0      1025            pop acc
127A D000      1025            pop ar0
127C C000      1025            push ar0
127E A849      1025            mov r0, bcd
1280 1200C6    1025            lcall ?Display_BCD
1283 D000      1025            pop ar0
1285           1025   
1285 C0E0      1025            push acc
1287 7405      1025            mov a, #5
1289 14        1025            dec a
128A 1200BF    1025            lcall ?Set_Cursor_2 ; Select column and row
128D D0E0      1025            pop acc
128F C083      1025            push dph
1291 C082      1025            push dpl
1293 C0E0      1025            push acc
1295 9005EF    1025            mov dptr, #Cels
1298 1200B4    1025            lcall ?Send_Constant_String
129B D0E0      1025            pop acc
129D D082      1025            pop dpl
129F D083      1025            pop dph
12A1           1025   
12A1 C0E0      1025            push acc
12A3 740B      1025            mov a, #11
12A5 14        1025            dec a
12A6 1200BF    1025            lcall ?Set_Cursor_2 ; Select column and row
12A9 D0E0      1025            pop acc
12AB 85383F    1025            mov x+0, run_time_min+0 
12AE 754000    1025            mov x+1, #0
12B1 754100    1025            mov x+2, #0 
12B4 754200    1025            mov x+3, #0
12B7 1200DC    1025     lcall hex2bcd
12BA C000      1025            push ar0
12BC A849      1025            mov r0, bcd
12BE 1200C6    1025            lcall ?Display_BCD
12C1 D000      1025            pop ar0
12C3 C0E0      1025            push acc
12C5 743A      1025            mov a, #':'
12C7 12007E    1025            lcall ?WriteData
12CA D0E0      1025            pop acc
12CC 85393F    1025            mov x+0, run_time_sec+0 
12CF 754000    1025            mov x+1, #0
12D2 754100    1025            mov x+2, #0 
12D5 754200    1025            mov x+3, #0
12D8 1200DC    1025     lcall hex2bcd
12DB C000      1025            push ar0
12DD A849      1025            mov r0, bcd
12DF 1200C6    1025            lcall ?Display_BCD
12E2 D000      1025            pop ar0
12E4           1025   
12E4           1025     
12E4           1025    
12E4           1025   ;display the current stage and current temperature
12E4           1026     
12E4           1027     ;compare the temperature with 235 degree for safety consideration
12E4 E55B      1028     mov a, current_temp
12E6 C3        1029     clr c
12E7 94DC      1030     subb a, #220
12E9 4061      1031     jc no_Burn_Warning                                                     ;if current temperature - 235 <= 0 (c=1), no warning
12EB C0E0      1032            push acc
12ED 7401      1032            mov a, #1
12EF 14        1032            dec a
12F0 1200C1    1032            lcall ?Set_Cursor_1 ; Select column and row
12F3 D0E0      1032            pop acc
12F5 C083      1032            push dph
12F7 C082      1032            push dpl
12F9 C0E0      1032            push acc
12FB 9005F6    1032            mov dptr, #BurnMsg
12FE 1200B4    1032            lcall ?Send_Constant_String
1301 D0E0      1032            pop acc
1303 D082      1032            pop dpl
1305 D083      1032            pop dph
1307 C0E0      1032            push acc
1309 7401      1032            mov a, #1
130B 14        1032            dec a
130C 1200BF    1032            lcall ?Set_Cursor_2 ; Select column and row
130F D0E0      1032            pop acc
1311 C083      1032            push dph
1313 C082      1032            push dpl
1315 C0E0      1032            push acc
1317 900607    1032            mov dptr, #StopMsg
131A 1200B4    1032            lcall ?Send_Constant_String
131D D0E0      1032            pop acc
131F D082      1032            pop dpl
1321 D083      1032            pop dph                 ;displaying warning message and ask the user to press STOP button to stop reflow process
1323 D206      1033     setb short_beep_flag
1325 C002      1034            push AR2
1327 7AFA      1034            mov R2, #250
1329 120039    1034            lcall ?Wait_Milli_Seconds
132C D002      1034            pop AR2
132E C002      1035            push AR2
1330 7AFA      1035            mov R2, #250
1332 120039    1035            lcall ?Wait_Milli_Seconds
1335 D002      1035            pop AR2
1337 C002      1036            push AR2
1339 7AFA      1036            mov R2, #250
133B 120039    1036            lcall ?Wait_Milli_Seconds
133E D002      1036            pop AR2
1340 C002      1037            push AR2
1342 7AFA      1037            mov R2, #250
1344 120039    1037            lcall ?Wait_Milli_Seconds
1347 D002      1037            pop AR2
1349 755A11    1038     mov state, #17
134C           1039     
134C           1040   no_Burn_Warning: 
134C E536      1041     mov a, reflow_seconds
134E C3        1042     clr c
134F 953A      1043     subb a, state_time 
1351 5008      1044     jnc state13Loop ; Compare if time elapsed = reflow time
1353 755A0E    1045     mov state, #14         ; Reflow done, move to cooling
1356 E4        1046     clr a
1357 F53A      1047     mov state_time, a ; Reset state time variable
1359 D207      1048     setb long_beep_flag
135B           1049   state13Loop:
135B 02090B    1050            ljmp forever
135E           1051   
135E           1052   ; Cooling stage, power is set to 0, finish and sound multiple beeps when temperature is below 60
135E           1053   state14:
135E           1054                    ; 14 state number    15 next state
135E E55A      1054       mov a, state
1360 B40E02    1054       cjne a, #14, skipstate255
1363 8003      1054            sjmp no_skip_state255
1365           1054   skipstate255:
1365 02145C    1054       ljmp state15
1368           1054   no_skip_state255:
1368 C2A7      1055            clr BLUE
136A D2A4      1056            setb GREEN
136C D2A5      1057            setb YELLOW
136E D2A6      1058            setb RED
1370           1059            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1370 208020    1059            jb CYCLE_BUTTON, no_button_pressed256
1373 C002      1059            push AR2
1375 7A32      1059            mov R2, #50
1377 120039    1059            lcall ?Wait_Milli_Seconds
137A D002      1059            pop AR2
137C 208014    1059            jb CYCLE_BUTTON, no_button_pressed256
137F 3080FD    1059            jnb CYCLE_BUTTON, $
1382           1059            
1382 755A11    1059            mov state, #17
1385 7401      1059            mov a, #0x01
1387 120083    1059            lcall ?WriteCommand
138A C002      1059            push AR2
138C 7A02      1059            mov R2, #2
138E 120039    1059            lcall ?Wait_Milli_Seconds
1391 D002      1059            pop AR2
1393           1059   no_button_pressed256:
1393           1059   
1393 C202      1060       clr pwm_on
1395 C203      1060       clr pwm_high
1397 C2B7      1060       clr SSR_OUT
1399           1060   
1399           1061            ; MAC (Cooling:    Constant string for the first line on LCD           current_temp: Temperature                        run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
1399 C0E0      1061            push acc
139B 7401      1061            mov a, #1
139D 14        1061            dec a
139E 1200C1    1061            lcall ?Set_Cursor_1 ; Select column and row
13A1 D0E0      1061            pop acc
13A3 C083      1061            push dph
13A5 C082      1061            push dpl
13A7 C0E0      1061            push acc
13A9 90057B    1061            mov dptr, #Cooling
13AC 1200B4    1061            lcall ?Send_Constant_String
13AF D0E0      1061            pop acc
13B1 D082      1061            pop dpl
13B3 D083      1061            pop dph
13B5           1061     
13B5 C0E0      1061            push acc
13B7 7401      1061            mov a, #1
13B9 14        1061            dec a
13BA 1200BF    1061            lcall ?Set_Cursor_2 ; Select column and row
13BD D0E0      1061            pop acc         ;show temperture
13BF 855B3F    1061            mov x+0, current_temp+0 
13C2 754000    1061            mov x+1, #0
13C5 754100    1061            mov x+2, #0 
13C8 754200    1061            mov x+3, #0
13CB 1200DC    1061            lcall hex2bcd
13CE C000      1061            push ar0
13D0 C0E0      1061            push acc
13D2 7420      1061            mov a, #' '
13D4 12007E    1061            lcall ?WriteData
13D7 A84A      1061            mov r0, bcd+1
13D9 E8        1061            mov a, r0
13DA 540F      1061            anl a, #0fh
13DC 4430      1061            orl a, #30h
13DE 12007E    1061            lcall ?WriteData
13E1 D0E0      1061            pop acc
13E3 D000      1061            pop ar0
13E5 C000      1061            push ar0
13E7 A849      1061            mov r0, bcd
13E9 1200C6    1061            lcall ?Display_BCD
13EC D000      1061            pop ar0
13EE           1061   
13EE C0E0      1061            push acc
13F0 7405      1061            mov a, #5
13F2 14        1061            dec a
13F3 1200BF    1061            lcall ?Set_Cursor_2 ; Select column and row
13F6 D0E0      1061            pop acc
13F8 C083      1061            push dph
13FA C082      1061            push dpl
13FC C0E0      1061            push acc
13FE 9005EF    1061            mov dptr, #Cels
1401 1200B4    1061            lcall ?Send_Constant_String
1404 D0E0      1061            pop acc
1406 D082      1061            pop dpl
1408 D083      1061            pop dph
140A           1061   
140A C0E0      1061            push acc
140C 740B      1061            mov a, #11
140E 14        1061            dec a
140F 1200BF    1061            lcall ?Set_Cursor_2 ; Select column and row
1412 D0E0      1061            pop acc
1414 85383F    1061            mov x+0, run_time_min+0 
1417 754000    1061            mov x+1, #0
141A 754100    1061            mov x+2, #0 
141D 754200    1061            mov x+3, #0
1420 1200DC    1061     lcall hex2bcd
1423 C000      1061            push ar0
1425 A849      1061            mov r0, bcd
1427 1200C6    1061            lcall ?Display_BCD
142A D000      1061            pop ar0
142C C0E0      1061            push acc
142E 743A      1061            mov a, #':'
1430 12007E    1061            lcall ?WriteData
1433 D0E0      1061            pop acc
1435 85393F    1061            mov x+0, run_time_sec+0 
1438 754000    1061            mov x+1, #0
143B 754100    1061            mov x+2, #0 
143E 754200    1061            mov x+3, #0
1441 1200DC    1061     lcall hex2bcd
1444 C000      1061            push ar0
1446 A849      1061            mov r0, bcd
1448 1200C6    1061            lcall ?Display_BCD
144B D000      1061            pop ar0
144D           1061   
144D           1061     
144D           1061    
144D           1061   
144D E55B      1062     mov a, current_temp
144F C3        1063     clr c
1450 943C      1064     subb a, #60
1452 5005      1065     jnc state14loop ; If more than 60 degrees, not safe to touch yet
1454           1066     
1454           1067   SafeBeep: ;If temp is safe then beeeeepppppppppppp
1454 D208      1068     setb six_beep_flag
1456 755A0F    1069     mov state, #15 ; Go to done state
1459           1070   state14loop:
1459 02090B    1071            ljmp forever
145C           1072     
145C           1073   ; Cooling completed state, accessed when temperature has cooled down to below 60C
145C           1074   state15:   
145C           1075                    ; 15 state number    16 next state
145C E55A      1075       mov a, state
145E B40F02    1075       cjne a, #15, skipstate276
1461 8003      1075            sjmp no_skip_state276
1463           1075   skipstate276:
1463 0214CC    1075       ljmp state16
1466           1075   no_skip_state276:
1466 C2A4      1076            clr GREEN
1468 D2A5      1077            setb YELLOW
146A D2A6      1078            setb RED
146C D2A7      1079            setb BLUE
146E C0E0      1080            push acc
1470 7401      1080            mov a, #1
1472 14        1080            dec a
1473 1200C1    1080            lcall ?Set_Cursor_1 ; Select column and row
1476 D0E0      1080            pop acc
1478 C083      1080            push dph
147A C082      1080            push dpl
147C C0E0      1080            push acc
147E 90058C    1080            mov dptr, #CompleteMsg
1481 1200B4    1080            lcall ?Send_Constant_String
1484 D0E0      1080            pop acc
1486 D082      1080            pop dpl
1488 D083      1080            pop dph
148A C0E0      1080            push acc
148C 7401      1080            mov a, #1
148E 14        1080            dec a
148F 1200BF    1080            lcall ?Set_Cursor_2 ; Select column and row
1492 D0E0      1080            pop acc
1494           1080   
1494 C083      1080            push dph
1496 C082      1080            push dpl
1498 C0E0      1080            push acc
149A 9005BF    1080            mov dptr, #ConfirmMsg
149D 1200B4    1080            lcall ?Send_Constant_String
14A0 D0E0      1080            pop acc
14A2 D082      1080            pop dpl
14A4 D083      1080            pop dph
14A6           1080   
14A6           1081            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
14A6 208420    1081            jb DEC_BUTTON, no_button_pressed282
14A9 C002      1081            push AR2
14AB 7A32      1081            mov R2, #50
14AD 120039    1081            lcall ?Wait_Milli_Seconds
14B0 D002      1081            pop AR2
14B2 208414    1081            jb DEC_BUTTON, no_button_pressed282
14B5 3084FD    1081            jnb DEC_BUTTON, $
14B8           1081            
14B8 755A00    1081            mov state, #0
14BB 7401      1081            mov a, #0x01
14BD 120083    1081            lcall ?WriteCommand
14C0 C002      1081            push AR2
14C2 7A02      1081            mov R2, #2
14C4 120039    1081            lcall ?Wait_Milli_Seconds
14C7 D002      1081            pop AR2
14C9           1081   no_button_pressed282:
14C9           1081   
14C9 02090B    1082     ljmp forever
14CC           1083     
14CC           1084   state16:                         ;display error message
14CC           1085                    ; 16 state number    17 next state
14CC E55A      1085       mov a, state
14CE B41002    1085       cjne a, #16, skipstate286
14D1 8003      1085            sjmp no_skip_state286
14D3           1085   skipstate286:
14D3 021542    1085       ljmp state17
14D6           1085   no_skip_state286:
14D6 C2A6      1086            clr RED
14D8 D2A4      1087            setb GREEN
14DA D2A5      1088            setb YELLOW
14DC D2A7      1089            setb BLUE
14DE C202      1090       clr pwm_on
14E0 C203      1090       clr pwm_high
14E2 C2B7      1090       clr SSR_OUT
14E4 C0E0      1091            push acc
14E6 7401      1091            mov a, #1
14E8 14        1091            dec a
14E9 1200C1    1091            lcall ?Set_Cursor_1 ; Select column and row
14EC D0E0      1091            pop acc
14EE C083      1091            push dph
14F0 C082      1091            push dpl
14F2 C0E0      1091            push acc
14F4 90059D    1091            mov dptr, #Lessthan50ErrorMsg
14F7 1200B4    1091            lcall ?Send_Constant_String
14FA D0E0      1091            pop acc
14FC D082      1091            pop dpl
14FE D083      1091            pop dph
1500 C0E0      1091            push acc
1502 7401      1091            mov a, #1
1504 14        1091            dec a
1505 1200BF    1091            lcall ?Set_Cursor_2 ; Select column and row
1508 D0E0      1091            pop acc
150A C083      1091            push dph
150C C082      1091            push dpl
150E C0E0      1091            push acc
1510 9005BF    1091            mov dptr, #ConfirmMsg
1513 1200B4    1091            lcall ?Send_Constant_String
1516 D0E0      1091            pop acc
1518 D082      1091            pop dpl
151A D083      1091            pop dph         
151C           1092            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
151C 208420    1092            jb DEC_BUTTON, no_button_pressed293
151F C002      1092            push AR2
1521 7A32      1092            mov R2, #50
1523 120039    1092            lcall ?Wait_Milli_Seconds
1526 D002      1092            pop AR2
1528 208414    1092            jb DEC_BUTTON, no_button_pressed293
152B 3084FD    1092            jnb DEC_BUTTON, $
152E           1092            
152E 755A00    1092            mov state, #0
1531 7401      1092            mov a, #0x01
1533 120083    1092            lcall ?WriteCommand
1536 C002      1092            push AR2
1538 7A02      1092            mov R2, #2
153A 120039    1092            lcall ?Wait_Milli_Seconds
153D D002      1092            pop AR2
153F           1092   no_button_pressed293:
153F           1092   
153F 02090B    1093     ljmp forever
1542           1094     
1542           1095   ; Force Quit state, accessed when STOP button is pressed during any reflow stage
1542           1096   state17:
1542 C202      1097       clr pwm_on
1544 C203      1097       clr pwm_high
1546 C2B7      1097       clr SSR_OUT
1548           1097   
1548 C2A6      1098            clr RED
154A D2A4      1099            setb GREEN
154C D2A5      1100            setb YELLOW
154E D2A7      1101            setb BLUE
1550 C0E0      1102            push acc
1552 7401      1102            mov a, #1
1554 14        1102            dec a
1555 1200C1    1102            lcall ?Set_Cursor_1 ; Select column and row
1558 D0E0      1102            pop acc
155A C083      1102            push dph
155C C082      1102            push dpl
155E C0E0      1102            push acc
1560 9005AE    1102            mov dptr, #AbortMsg
1563 1200B4    1102            lcall ?Send_Constant_String
1566 D0E0      1102            pop acc
1568 D082      1102            pop dpl
156A D083      1102            pop dph
156C C0E0      1102            push acc
156E 7401      1102            mov a, #1
1570 14        1102            dec a
1571 1200BF    1102            lcall ?Set_Cursor_2 ; Select column and row
1574 D0E0      1102            pop acc
1576 C083      1102            push dph
1578 C082      1102            push dpl
157A C0E0      1102            push acc
157C 9005BF    1102            mov dptr, #ConfirmMsg
157F 1200B4    1102            lcall ?Send_Constant_String
1582 D0E0      1102            pop acc
1584 D082      1102            pop dpl
1586 D083      1102            pop dph
1588           1103            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
1588 208420    1103            jb DEC_BUTTON, no_button_pressed303
158B C002      1103            push AR2
158D 7A32      1103            mov R2, #50
158F 120039    1103            lcall ?Wait_Milli_Seconds
1592 D002      1103            pop AR2
1594 208414    1103            jb DEC_BUTTON, no_button_pressed303
1597 3084FD    1103            jnb DEC_BUTTON, $
159A           1103            
159A 755A00    1103            mov state, #0
159D 7401      1103            mov a, #0x01
159F 120083    1103            lcall ?WriteCommand
15A2 C002      1103            push AR2
15A4 7A02      1103            mov R2, #2
15A6 120039    1103            lcall ?Wait_Milli_Seconds
15A9 D002      1103            pop AR2
15AB           1103   no_button_pressed303:
15AB           1103   
15AB 02090B    1104     ljmp forever
15AE           1105            
15AE           1106   
15AE           1107   
15AE           1108   end ;-;
