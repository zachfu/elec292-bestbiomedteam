                  2   $LIST
0000              4   ; Reset vector
0000              5   org 0000H
0000 0208D3       6      ljmp MainProgram
0003              7   
0003              8   ; External interrupt 0 vector (not used in this code)
0003              9   org 0x0003
0003 32          10            reti
0004             11   
0004             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 02064D      14            ljmp Timer0_ISR
000E             15            
000E             16   ; External interrupt 1 vector (not used in this code)
0013             17   org 0x0013
0013 32          18            reti
0014             19   
0014             20   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             21   org 0x001B
001B 32          22            reti
001C             23   
001C             24   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             25   org 0x0023 
0023 32          26            reti
0024             27            
0024             28   ; Timer/Counter 2 overflow interrupt vector
002B             29   org 0x002B
002B 02068C      30            ljmp Timer2_ISR
002E             31            
002E             32   ;++++++++++++++++++ CONSTANTS ++++++++++++++++++++
002E             33   VLED     EQU 207
002E             34   ;++++++++++++++++++ TIMER & BAUDRATE  ++++++++++++
002E             35   CLK              EQU 22118400                                                     ; Microcontroller system crystal frequency in Hz
002E             36   TIMER0_RATE        EQU 4096                                                               ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             37   TIMER0_RELOAD      EQU ((65536-(CLK/TIMER0_RATE)))
002E             38   TIMER2_RATE        EQU 1000                                                               ; 1000Hz, for a timer tick of 1ms
002E             39   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
002E             40   BAUD                                     EQU 115200
002E             41   T1LOAD                                   EQU (0x100-(CLK/(16*BAUD)))
002E             42   
002E             43   SAMPLE_INTERVAL EQU 250                                                                  ; Millisecond Interval when sampling (KEEP LESS THAN 256)
002E             44   
002E             45   PWM_PERCENT                      EQU 20
002E             46   PWM_RELOAD_HIGH EQU (255*PWM_PERCENT/100)
002E             47   PWM_RELOAD_LOW   EQU     (255 - PWM_RELOAD_HIGH)
002E             48   
002E             49   SHORT_BEEP_LENGTH        EQU 4   ; Length of short beep (in 100s of ms)
002E             50   LONG_BEEP_LENGTH         EQU 10          ; Length of long beep   (in 100s of ms)
002E             51   SIX_BEEP_LENGTH          EQU 12  ; Total length of six beep sequence (in 100s of ms)(keep at 12 until further notice)
002E             52   
002E             53   ;------------------------------------------------
002E             54   
002E             55   ;++++++++++++++++++ SPI PINS ++++++++++++++++
002E             56   CE_ADC  EQU P2.0
002E             57   MY_MOSI EQU P2.1
002E             58   MY_MISO EQU P2.2
002E             59   MY_SCLK EQU P2.3
002E             60   ;--------------------------------------------
002E             61   
002E             62   ;++++++++++++++++++ LCD PINS ++++++++++++++++
002E             63   LCD_RS equ P1.2
002E             64   LCD_RW equ P1.3
002E             65   LCD_E  equ P1.4
002E             66   LCD_D4 equ P3.2
002E             67   LCD_D5 equ P3.3
002E             68   LCD_D6 equ P3.4
002E             69   LCD_D7 equ P3.5
002E             70   ;--------------------------------------------
002E             71   
002E             72   
002E             73   SSR_OUT              equ P3.7    ; Pin connected to SSR
002E             74   BOOT_BUTTON     equ P4.5
002E             75   PWM_BUTTON      equ P0.3
002E             76   SOUND_OUT       equ P1.0         ; Pin connected to speaker
002E             77   
002E             78   ;++++++++++++++++++ CONTROL BUTTONS++++++++++
002E             79   CYCLE_BUTTON        equ P0.0     ; Button to change cycles
002E             80   INC_BUTTON                                       equ P0.2
002E             81   DEC_BUTTON          equ P0.4
002E             82   ;--------------------------------------------
002E             83   
                218   $LIST
                586   $LIST
                 96   $LIST
0418            111   $LIST
                 89   $LIST
0418             91   
0418             92            
0418             93   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             94   DSEG at 0x30
0030             95   
0030             96            Count1ms:                                       ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032             97            Count_Sample:                   ds 1 ; Sample is taken every 250ms
0033             98            Count_PWM:                              ds 1 ; PWM cycle runs every 255ms
0034             99            soak_seconds:                   ds 1
0035            100            soak_temp:                              ds 1
0036            101            reflow_seconds:                 ds 1
0037            102            reflow_temp:                    ds 1
0038            103     run_time_min:                          ds 1
0039            104            run_time_sec:                   ds 1
003A            105            state_time:                             ds 1
003B            106     Count100ms:     ds 1     ; Incremented every 1ms when Timer 2 ISR is triggered, used to determine when 0.1s has passed
003C            107            Short_Beep_Counter: ds 1
003D            108            Long_Beep_Counter:  ds 1
003E            109            Six_Beep_Counter:         ds 1 ;
003F            110            
003F            111   ;+++++++++ 32 bit Calculation variables +++++++++++      
003F            112            x:                                      ds 4
0043            113            y:                                                      ds 4
0047            114            Result:                                         ds 2
0049            115            bcd:                                                    ds 5
004E            116            x_lm335:                                        ds 4
0052            117            Vcc:                                                    ds 4
0056            118            samplesum:                              ds 4
005A            119   ;--------------------------------------------
005A            120            state:                                          ds 1
005B            121            current_temp:                   ds 4
005F            122   
005F            123            
005F            124   
0000            125   BSEG
0000            126            mf:                                                     dbit 1
0001            127            one_min_flag:           dbit 1  ; Set to 1 after first 60 seconds of reflow cycle
0002            128            pwm_on:                                         dbit 1  ; Set to 1 to turn PWM on
0003            129            pwm_high:                               dbit 1  ; Flag for when PWM output is currently high
0004            130     settings_modified_flag:                dbit 1  ; Flag for when parameters have been changed
0005            131            sample_flag:                    dbit 1  ; Flag turned on every SAMPLE_INTERVAL to take a reading
0006            132     short_beep_flag:       dbit 1
0007            133            long_beep_flag:                 dbit 1
0008            134            six_beep_flag:          dbit 1
0009            135   
0418            136   CSEG
0418            137   ;                                                                        1234567890123456    <- This helps determine the location of the Strings
0418 20526566   138     StartMessage:                                  db ' Reflow Control ', 0
     6C6F7720
     436F6E74
     726F6C20
     00
0429 53746172   139     StartMessage2:                         db 'Start / Settings', 0
     74202F20
     53657474
     696E6773
     00
043A 536F616B   140            SoakTime_Message:               db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
044B 536F616B   141            SoakTemp_Message:               db 'Soak Temperature', 0
     2054656D
     70657261
     74757265
     00
045C 5265666C   142            ReflowTime_Message:     db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
046D 5265666C   143            ReflowTemp_Message:     db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
047E 53746172   144            Start_Message:                          db 'Start Process?  ', 0
     74205072
     6F636573
     733F2020
     00
048F 20202D20   145     Y_N_Message:                                   db '  - No | + Yes  ', 0
     4E6F207C
     202B2059
     65732020
     00
04A0 20436F6F   146     TempTooHighMsg:                                db ' Cooling...     ', 0
     6C696E67
     2E2E2E20
     20202020
     00
04B1 20506C65   147     TempTooHighMsg2:      db ' Please Wait    ', 0
     61736520
     57616974
     20202020
     00
04C2 50574D20   148            PWM_ON_MESSAGE:                 db 'PWM IS ON       ', 0
     4953204F
     4E202020
     20202020
     00
04D3 50574D20   149            PWM_OFF_MESSAGE:                db 'PWM IS OFF      ', 0
     4953204F
     46462020
     20202020
     00
04E4 20202044   150     SaveToFlash_Msg:               db '   Data Saved   ', 0
     61746120
     53617665
     64202020
     00
04F5 50726F63   151            Stopped:                                db 'Process Stopped ', 0
     65737320
     53746F70
     70656420
     00
0506 20202020   152            BlankMsg:                               db '                ', 0
     20202020
     20202020
     20202020
     00
0517 2D205265   153            ChooseChangeValueMsg:   db '- Reselect Vals     ', 0
     73656C65
     63742056
     616C7309
     00
0528 2B095374   154            ChooseStartMsg:                         db '+   Start Reflow', 0
     61727420
     5265666C
     6F7700
0537 52616D70   155            Ramp2Reflow:                    db 'Ramp to Reflow  ', 0
     20746F20
     5265666C
     6F772020
     00
0548 52616D70   156            Ramp2Soak:                              db 'Ramp to Soak    ', 0
     20746F20
     536F616B
     20202020
     00
0559 50726568   157            Soak:                                   db 'Preheat / Soak  ', 0
     65617420
     2F20536F
     616B2020
     00
056A 5265666C   158            Reflow:                                         db 'Reflow          ', 0
     6F772020
     20202020
     20202020
     00
057B 436F6F6C   159            Cooling:                                db 'Cooling         ', 0
     696E6720
     20202020
     20202020
     00
058C 5265666C   160            CompleteMsg:                    db 'Reflow Complete!', 0
     6F772043
     6F6D706C
     65746521
     00
059D 43686563   161            Lessthan50ErrorMsg:     db 'Check T-Couple! ', 0
     6B20542D
     436F7570
     6C652120
     00
05AE 50726F63   162            AbortMsg:                               db 'Process Aborted!', 0
     65737320
     41626F72
     74656421
     00
05BF 2D20436F   163            ConfirmMsg:                     db '- Continue?     ', 0
     6E74696E
     75653F20
     20202020
     00
05D0 49542057   164            TestMessage:                    db 'IT WORKS?!!!!!!!', 0
     4F524B53
     3F212121
     21212121
     00
05E1 54656D70   165            Temp:                                   db 'Temp:', 0           
     3A00
05E7 54696D65   166            Time:                                   db 'Time:', 0
     3A00
05ED 0A00       167            NEWLINE:                                db '\n', 0  
05EF 20DF4300   168     Cels: db ' ',11011111b, 'C',0
05F3 207300     169     Secs:                  db ' s',0
05F6 50434220   170            BurnMsg:                                        db 'PCB Burn Warning', 0
     4275726E
     20576172
     6E696E67
     00
0607 50726573   171     StopMsg:                                       db 'Press StopButton', 0
     73205374
     6F704275
     74746F6E
     00
0618 546F6F20   172     Too_Long:                                      db 'Too Long!       ', 0
     4C6F6E67
     21202020
     20202020
     00
0629 546F6F20   173     Too_High:                              db 'Too High!       ', 0
     48696768
     21202020
     20202020
     00
063A            174     
063A            175     ;---------------------------------;
063A            176   ; Routine to initialize the ISR   ;
063A            177   ; for timer 0                     ;
063A            178   ;---------------------------------;
063A            179   Timer0_Init:
063A E589       180            mov a, TMOD
063C 54F0       181            anl a, #0xf0                                            ; Clear the bits for timer 0
063E 4401       182            orl a, #0x01                                            ; Configure timer 0 as 16-timer
0640 F589       183            mov TMOD, a
0642 758CEA     184            mov TH0, #high(TIMER0_RELOAD)
0645 758AE8     185            mov TL0, #low(TIMER0_RELOAD)
0648            186            ; Enable the timer and interrupts
0648 D2A9       187            setb ET0                                                        ; Enable timer 0 interrupt
064A C28C       188            clr TR0                                                         ; Disable timer 0 by default
064C 22         189   ret
064D            190            
064D            191   ;---------------------------------;
064D            192   ; ISR for timer 0.  Set to execute;
064D            193   ; every 1/4096Hz to generate a    ;
064D            194   ; 2048 Hz square wave at pin P3.6 ;
064D            195   ;---------------------------------;
064D            196   Timer0_ISR:
064D            197            ;clr TF0  ; According to the data sheet this is done for us already.
064D            198            ; In mode 1 we need to reload the timer.
064D C28C       199            clr TR0
064F 758CEA     200            mov TH0, #high(TIMER0_RELOAD)
0652 758AE8     201            mov TL0, #low(TIMER0_RELOAD)
0655 D28C       202            setb TR0
0657 B290       203            cpl SOUND_OUT ; Connect speaker to P3.6!
0659 32         204            reti
065A            205     
065A            206   ;---------------------------------;
065A            207   ; Routine to initialize the ISR   ;
065A            208   ; for timer 2                     ;
065A            209   ;---------------------------------;
065A            210            
065A            211   Timer2_Init:
065A 75C800     212            mov T2CON, #0                                           ; Stop timer/counter.  Autoreload mode.
065D 75CBA9     213            mov RCAP2H, #high(TIMER2_RELOAD)
0660 75CA9A     214            mov RCAP2L, #low(TIMER2_RELOAD)
0663            215            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0663 E4         216            clr a
0664 F530       217            mov Count1ms+0, a
0666 F531       218            mov Count1ms+1, a
0668 F533       219            mov Count_PWM, a
066A F532       220            mov Count_Sample, a
066C F534       221     mov soak_seconds, a
066E F535       222     mov soak_temp, a
0670 F536       223     mov reflow_seconds, a
0672 F537       224     mov reflow_temp, a
0674 F55A       225     mov state, a
0676 F53A       226     mov state_time, a
0678 F539       227     mov run_time_sec, a
067A F538       228     mov run_time_min, a
067C F53B       229     mov Count100ms, a
067E 753C04     230     mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
0681 753D0A     231     mov Long_Beep_Counter, #LONG_BEEP_LENGTH
0684 753E0C     232     mov Six_Beep_Counter, #SIX_BEEP_LENGTH
0687            233            ; Enable the timer and interrupts
0687 D2AD       234            setb ET2  ; Enable timer 2 interrupt
0689 D2CA       235            setb TR2  ; Enable timer 2
068B 22         236   ret
068C            237   
068C            238     
068C            239   ;---------------------------------;
068C            240   ; ISR for timer 2                 ;
068C            241   ;---------------------------------;
068C            242   Timer2_ISR:
068C C2CF       243            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
068E            244            
068E            245            ; The two registers used in the ISR must be saved in the stack
068E C0E0       246            push acc
0690 C0D0       247            push psw
0692            248            
0692 053B       249     inc Count100ms                         ; Increment every 1ms  
0694 0532       250     inc Count_Sample
0696            251            ; Increment the 16-bit one mili second counter
0696 0530       252            inc Count1ms+0    ; Increment the low 8-bits first
0698 E530       253            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
069A 7002       254            jnz Timer2_Inc_100ms
069C 0531       255            inc Count1ms+1
069E            256     
069E            257   Timer2_Inc_100ms:
069E            258   
069E E53B       259            mov a, Count100ms
06A0 B46442     260            cjne a, #100, Inc_Done_1sec; Run following code every 100ms
06A3            261            
06A3 E4         262            clr a
06A4 F53B       263            mov Count100ms, a               ; Return to 0
06A6            264            ; If any of the beep flags are set, run their corresponding code
06A6 200608     265            jb short_beep_flag, Timer2_Short_Beep
06A9 200717     266            jb long_beep_flag, Timer2_Long_Beep
06AC 200826     267            jb six_beep_flag, Timer2_Six_Beep
06AF 8034       268            sjmp Inc_Done_1sec
06B1            269            
06B1            270   Timer2_Short_Beep:
06B1 D28C       271            setb TR0
06B3 153C       272            dec Short_Beep_Counter
06B5 E53C       273            mov a, Short_Beep_Counter
06B7 B4002B     274            cjne a, #0, Inc_Done_1sec
06BA            275            ; Once counter has reached 0
06BA C28C       276            clr TR0
06BC C206       277            clr short_beep_flag
06BE 753C04     278            mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
06C1 8022       279            sjmp Inc_Done_1sec
06C3            280            
06C3            281   Timer2_Long_Beep:
06C3 D28C       282            setb TR0
06C5 153D       283            dec Long_Beep_Counter
06C7 E53D       284            mov a, Long_Beep_Counter
06C9 B40019     285            cjne a, #0, Inc_Done_1sec
06CC            286            ; Once counter has reached 0
06CC C28C       287            clr TR0
06CE C207       288            clr long_beep_flag
06D0 753D0A     289            mov Long_Beep_Counter, #LONG_BEEP_LENGTH
06D3 8010       290            sjmp Inc_Done_1sec
06D5            291            
06D5            292   Timer2_Six_Beep:
06D5 B28C       293            cpl TR0
06D7 153E       294            dec Six_Beep_Counter
06D9 E53E       295            mov a, Six_Beep_Counter
06DB B40007     296            cjne a, #0, Inc_Done_1sec
06DE            297            ; Once counter has reached 0
06DE C28C       298            clr TR0
06E0 C208       299            clr six_beep_flag
06E2 753E0C     300            mov Six_Beep_Counter, #SIX_BEEP_LENGTH
06E5            301            
06E5            302   Inc_Done_1sec:
06E5            303            ; Check if one second has passed
06E5 E530       304            mov a, Count1ms+0
06E7 B4E822     305            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
06EA E531       306            mov a, Count1ms+1
06EC B4031D     307            cjne a, #high(1000), Inc_Done_Sample
06EF            308            
06EF            309            ; 1 second has passed.  Set a flag so the main program knows
06EF            310            
06EF 753000     311            mov Count1ms+0, #0
06F2 753100     311            mov Count1ms+1, #0
06F5            312     ; time for state, will reset after every state
06F5 053A       313     inc state_time
06F7            314     
06F7 E53A       315     mov a, state_time
06F9 B43C02     316     cjne a,#60, Inc_Done_Run_Time
06FC D201       317            setb one_min_flag
06FE            318            
06FE            319   Inc_Done_Run_Time:
06FE 0539       320     inc run_time_sec
0700 E539       321     mov a, run_time_sec
0702 B43C07     322     cjne a, #60, Inc_Done_Sample
0705            323     
0705 E4         324     clr a
0706 F539       325     mov run_time_sec, a
0708 0538       326     inc run_time_min
070A 8000       327            sjmp Inc_Done_Sample
070C            328   
070C            329   Inc_Done_Sample:
070C            330            
070C E532       331     mov a, Count_Sample
070E B4FA05     332     cjne a, #SAMPLE_INTERVAL, Inc_Done_PWM
0711            333     
0711 D205       334     setb sample_flag
0713            335     
0713 E4         336     clr a
0714 F532       337     mov Count_Sample, a
0716            338   
0716            339   Inc_Done_PWM:
0716            340            
0716 30021F     341            jnb pwm_on, Timer2_ISR_done
0719 0533       342            inc Count_PWM
071B 30030E     343            jnb pwm_high, Inc_Done_PWM_Low
071E            344   
071E E533       345            mov a, Count_PWM
0720 B43315     346            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
0723            347            
0723 C203       348            clr pwm_high
0725 C2B7       349            clr SSR_OUT
0727            350            
0727 E4         351            clr a
0728 F533       352            mov Count_PWM, a
072A            353            
072A 800C       354            sjmp Timer2_ISR_done
072C            355            
072C            356   Inc_Done_PWM_Low:
072C            357   
072C E533       358            mov a, Count_PWM
072E B4CC07     359            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
0731            360            
0731 D203       361            setb pwm_high
0733 D2B7       362            setb SSR_OUT
0735            363            
0735 E4         364            clr a
0736 F533       365            mov Count_PWM, a
0738            366            
0738            367   Timer2_ISR_done:
0738 D0D0       368            pop psw
073A D0E0       369            pop acc
073C 32         370   reti
073D            371   
073D            372   ;------------------------------------------------------------------;
073D            373   ; Subroutine to take sample from Thermocouple, LM335, and LED for Vref
073D            374   ;------------------------------------------------------------------;
073D            375   Take_Sample:
073D C205       376            clr sample_flag
073F            377            ;reading the LED voltage for Vref
073F 75F007     378            mov b, #7
0742 12038B     378            lcall ?Average_ADC_Channel      
0745 12075B     379            lcall Calculate_Vref
0748            380            ;fetch result from channel 0 as room temperature
0748 75F000     381            mov b, #0
074B 12038B     381            lcall ?Average_ADC_Channel
074E 120792     382            lcall LM335_Result_SPI_Routine
0751            383            ;fetch result from channel 1
0751 75F001     384            mov b, #1
0754 12038B     384            lcall ?Average_ADC_Channel
0757 1207DB     385     lcall Result_SPI_Routine       ; 0.5 second delay between samples
075A 22         386            ret
075B            387   
075B            388   ;calculating Vref from Vled      
075B            389   Calculate_Vref:
075B 854743     390            mov y+0, result+0 
075E 854844     390            mov y+1, result+1
0761 754500     390            mov y+2, #0 
0764 754600     390            mov y+3, #0
0767 753F31     391            mov x+0, #low (VLED*1023 % 0x10000) 
076A 75403B     391            mov x+1, #high(VLED*1023 % 0x10000) 
076D 754103     391            mov x+2, #low (VLED*1023 / 0x10000) 
0770 754200     391            mov x+3, #high(VLED*1023 / 0x10000) 
0773 1202E3     392            lcall div32
0776 754310     393            mov y+0, #low (10000 % 0x10000) 
0779 754427     393            mov y+1, #high(10000 % 0x10000) 
077C 754500     393            mov y+2, #low (10000 / 0x10000) 
077F 754600     393            mov y+3, #high(10000 / 0x10000) 
0782 120256     394            lcall mul32                     ; Gets Vcc*10^6
0785            395   
0785 853F52     396            mov Vcc+0, x+0 
0788 854053     396            mov Vcc+1, x+1
078B 854154     396            mov Vcc+2, x+2 
078E 854255     396            mov Vcc+3, x+3
0791            397            
0791 22         398            ret
0792            399            
0792            400   ;calculating cold junction temperature
0792            401   LM335_Result_SPI_Routine:
0792 855243     402            mov y+0, Vcc+0 
0795 855344     402            mov y+1, Vcc+1
0798 855445     402            mov y+2, Vcc+2 
079B 855546     402            mov y+3, Vcc+3
079E            403   
079E 120256     404       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
07A1 7543FF     405            mov y+0, #low (1023 % 0x10000) 
07A4 754403     405            mov y+1, #high(1023 % 0x10000) 
07A7 754500     405            mov y+2, #low (1023 / 0x10000) 
07AA 754600     405            mov y+3, #high(1023 / 0x10000)          
07AD 1202E3     406       lcall div32
07B0 754310     407            mov y+0, #low (2730000 % 0x10000) 
07B3 7544A8     407            mov y+1, #high(2730000 % 0x10000) 
07B6 754529     407            mov y+2, #low (2730000 / 0x10000) 
07B9 754600     407            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
07BC 1201C2     408       lcall sub32
07BF 754364     409            mov y+0, #low (100 % 0x10000) 
07C2 754400     409            mov y+1, #high(100 % 0x10000) 
07C5 754500     409            mov y+2, #low (100 / 0x10000) 
07C8 754600     409            mov y+3, #high(100 / 0x10000)           
07CB 1202E3     410       lcall div32
07CE            411   
07CE 853F4E     412            mov x_lm335+0, x+0 
07D1 85404F     412            mov x_lm335+1, x+1
07D4 854150     412            mov x_lm335+2, x+2 
07D7 854251     412            mov x_lm335+3, x+3
07DA            413            
07DA 22         414            ret
07DB            415   
07DB            416   ;calculating the oven temperature and sending it to computer and LCD
07DB            417   Result_SPI_Routine:
07DB 855243     418            mov y+0, Vcc+0 
07DE 855344     418            mov y+1, Vcc+1
07E1 855445     418            mov y+2, Vcc+2 
07E4 855546     418            mov y+3, Vcc+3
07E7            419            
07E7 120256     420            lcall mul32
07EA 7543FF     421            mov y+0, #low (1023 % 0x10000) 
07ED 754403     421            mov y+1, #high(1023 % 0x10000) 
07F0 754500     421            mov y+2, #low (1023 / 0x10000) 
07F3 754600     421            mov y+3, #high(1023 / 0x10000) 
07F6 1202E3     422            lcall div32
07F9 754364     423            mov y+0, #low (100 % 0x10000) 
07FC 754400     423            mov y+1, #high(100 % 0x10000) 
07FF 754500     423            mov y+2, #low (100 / 0x10000) 
0802 754600     423            mov y+3, #high(100 / 0x10000) 
0805 120256     424            lcall mul32     
0808 7543C6     425            mov y+0, #low (454 % 0x10000) 
080B 754401     425            mov y+1, #high(454 % 0x10000) 
080E 754500     425            mov y+2, #low (454 / 0x10000) 
0811 754600     425            mov y+3, #high(454 / 0x10000)   ;Gain 
0814 1202E3     426            lcall div32
0817 754329     427            mov y+0, #low (41 % 0x10000) 
081A 754400     427            mov y+1, #high(41 % 0x10000) 
081D 754500     427            mov y+2, #low (41 / 0x10000) 
0820 754600     427            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
0823 1202E3     428            lcall div32
0826            429            
0826 854E43     430            mov y+0, x_lm335+0 
0829 854F44     430            mov y+1, x_lm335+1
082C 855045     430            mov y+2, x_lm335+2 
082F 855146     430            mov y+3, x_lm335+3
0832 1201A1     431            lcall add32
0835            432     
0835 754364     433            mov y+0, #low (100 % 0x10000) 
0838 754400     433            mov y+1, #high(100 % 0x10000) 
083B 754500     433            mov y+2, #low (100 / 0x10000) 
083E 754600     433            mov y+3, #high(100 / 0x10000) 
0841 1202E3     434     lcall div32
0844            435   
0844            436            ;updating the temperature of OVEN variable
0844 853F5B     437            mov current_temp+0, x+0 
0847 85405C     437            mov current_temp+1, x+1
084A 85415D     437            mov current_temp+2, x+2 
084D 85425E     437            mov current_temp+3, x+3
0850            438            
0850 1200DC     439            lcall hex2bcd
0853            440   
0853            441   ;sending Oven temperature to Computer
0853            442   Send_Serial:
0853 C000       443       push ar0
0855 A84A       443       mov r0, bcd+1
0857 1203EF     443       lcall ?Send_BCD
085A D000       443       pop ar0
085C C000       444       push ar0
085E A849       444       mov r0, bcd
0860 1203EF     444       lcall ?Send_BCD
0863 D000       444       pop ar0
0865 740A       445            mov a, #'\n'
0867 1203DC     446            lcall putchar
086A 22         447   ret
086B            448   
086B            449   ;Saving variables to Flash Memory
086B            450   Save_Configuration:
086B            451            ; Erase FDATA page 1
086B C2AF       452            clr EA ; Disables interrupts to allow access to flash memory
086D 759658     453            mov MEMCON, #01011000B ; AERS=1, MWEN=1, DMEN=1, 
0870            454     ; ^ Erases page in flash memory, enables programming to nonvolatie mem location
0870            455     ; Enables nonvolatile data memory and maps it into FDATA space
0870 900000     456            mov DPTR, #0x0000 ; Set data pointer to start of flash memory
0873 74FF       457            mov a, #0xff                    ; Write 1111 1111 to flash mem
0875 F0         458            movx @DPTR, A
0876            459            ; Load page
0876 759638     460     mov MEMCON, #00111000B ; LDPG=1, MWEN=1, DMEN=1
0879            461     ; Enables loading of multiple bytes to temporary page buffer
0879            462     ; Enables programming of nonvolatile memory location
0879            463     ; Enables nonvolatile data memory and map it into FDATA space
0879            464     ; Save variables
0879 E535       465     mov a, soak_temp       ; Move soak temperature to accumulator
087B F0         466     movx @DPTR, A                  ; Save data in buffer
087C A3         467     inc DPTR                                       ; Increment data pointer
087D E534       468     mov a, soak_seconds ; Repeat for remaining variables
087F F0         469     movx @DPTR, A
0880 A3         470     inc DPTR
0881 E537       471     mov a, reflow_temp
0883 F0         472     movx @DPTR,A
0884 A3         473     inc DPTR
0885 E536       474     mov a, reflow_seconds
0887 F0         475     movx @DPTR, A
0888            476     ; Write Validation Keys to flash memory (Check upon write)
0888 A3         477     inc DPTR
0889 7455       478     mov a, #0x55 ; First key value (0101 0101)
088B F0         479     movx @DPTR, A
088C A3         480     inc DPTR
088D 74AA       481     mov a, #0xAA ; Second key value (1010 1010)
088F F0         482     movx @DPTR, A
0890            483     ; Copy Buffer to Flash
0890 759618     484     mov MEMCON, #00011000B ; Copy page to flash
0893 74FF       485     mov a, #0xff
0895 F0         486     movx @DPTR, A
0896 759600     487     mov MEMCON, #00000000B ; Disable access to data flash
0899 D2AF       488     setb EA ; Re-enable interrupts
089B 22         489     ret
089C            490   
089C            491   ; Reading variables from flash memory
089C            492   Load_Configuration:
089C 759608     493            mov MEMCON, #00001000B ; Enable read access to data flash
089F            494     
089F 900004     495     mov dptr, #0x0004 ; Move dptr to first key value location
08A2 E0         496     movx a, @dptr
08A3 B4551B     497     cjne a, #0x55, Load_Defaults ; If keys do not match, write to flash failed, load default values
08A6 A3         498     inc dptr ; Second key value location
08A7 E0         499     movx a, @dptr
08A8 B4AA16     500     cjne a, #0xAA, Load_Defaults ; Check if second keys match or not, if not then load defaults
08AB            501     ; Keys match. Now load saved values from flash
08AB 900000     502     mov dptr, #0x0000
08AE E0         503     movx a, @dptr
08AF F535       504     mov soak_temp, a       ; Load soak temperature
08B1 A3         505     inc dptr
08B2 E0         506     movx a, @dptr
08B3 F534       507     mov soak_seconds, a ; Load soak time
08B5 A3         508     inc dptr
08B6 E0         509            movx a, @dptr
08B7 F537       510     mov reflow_temp, a ; Load reflow temperature
08B9 A3         511     inc dptr
08BA E0         512     movx a, @dptr
08BB F536       513     mov reflow_seconds, a ; Load reflow time
08BD 759600     514     mov MEMCON, #00000000B ; Disables access to data flashx
08C0 22         515     ret
08C1            516     
08C1            517   ; Default (optimal) values for soldering profile
08C1            518   Load_Defaults: ; Load defaults if keys are incorrect
08C1 753596     519            mov soak_temp, #150
08C4 75342D     520     mov soak_seconds, #45
08C7 7537E1     521     mov reflow_temp, #225
08CA 75361E     522     mov reflow_seconds, #30
08CD 759600     523     mov MEMCON, #00000000B ; Disables access to data flash
08D0 0208FF     524     ljmp forever 
08D3            525    
08D3            526   ;------------------------------------------------------------------;
08D3            527   ; ********************MACRO LIST***********************************;
08D3            528   ;------------------------------------------------------------------;
08D3            529   
08D3            530   ;------------------------------------------------------------------;
08D3            531   ; MACRO for incrementing a variable
08D3            532   ;------------------------------------------------------------------;
                533   Inc_variable MAC
                534   	;Mac (%0 : inc/dec button    %1 : variable ) 
                535   	jb %0, no_inc_dec_var%M
                536   	Wait_Milli_Seconds(#50)
                537   	jb %0, no_inc_dec_var%M
                538     Wait_Milli_Seconds(#100)
                539   
                540   	inc %1
                541   	
                542   no_inc_dec_var%M:
                543   
                544   ENDMAC
08D3            545   
08D3            546   ;------------------------------------------------------------------;
08D3            547   ; MACRO for decrementing a variable
08D3            548   ;------------------------------------------------------------------;
                549   Dec_variable MAC
                550   	;Mac (%0 : inc/dec button    %1 : variable ) 
                551   	jb %0, no_inc_dec_var%M
                552   	Wait_Milli_Seconds(#50)
                553   	jb %0, no_inc_dec_var%M
                554   	Wait_Milli_Seconds(#100)
                555   
                556   	dec %1
                557   	
                558   no_inc_dec_var%M:
                559   
                560   ENDMAC
08D3            561   
08D3            562   ;------------------------------------------------------------------;
08D3            563   ; MACRO for Showing values with header on LCD
08D3            564   ;------------------------------------------------------------------;
                565   Show_Header_and_Value Mac
                566   	; MAC (%0:    Constant string for the first line on LCD       %1: value to be shown on second line				%2: unit )
                567   	Set_Cursor(1,1)
                568   	Send_Constant_String(#%0)
                569   	Set_Cursor(2,1)
                570   	Move_1B_to_4B ( x, %1)
                571   	lcall hex2bcd
                572     Display_BCD_1_digit(bcd+1)
                573   	Display_BCD(bcd)
                574     Set_Cursor(2,5)
                575     Send_Constant_String(#%2)
                576   ENDMAC
08D3            577   
08D3            578   
08D3            579   ;------------------------------------------------------------------;
08D3            580   ; MACRO for Showing messages with header on LCD
08D3            581   ;------------------------------------------------------------------;
                582   Show_Header Mac
                583   	Set_Cursor(1,1)
                584     Send_Constant_String(#%0)
                585     Set_Cursor(2,1)
                586     Send_Constant_String(#%1)
                587   ENDMAC
08D3            588   
08D3            589   ;------------------------------------------------------------------;
08D3            590   ; MACRO for Showing 2 values with header on LCD
08D3            591   ;------------------------------------------------------------------;
                592   Show_Stage_Temp_Time Mac
                593   	; MAC (%0:    Constant string for the first line on LCD           %1: Temperature			%2: Time (minutes)   %3: Time (seconds) )
                594   	Set_Cursor(1,1)
                595   	Send_Constant_String(#%0)
                596     
                597     Set_Cursor(2,1)	;show temperture
                598   	Move_1B_to_4B ( x, %1)
                599   	lcall hex2bcd
                600     Display_BCD_1_digit(bcd+1)
                601   	Display_BCD(bcd)
                602   
                603   	Set_Cursor(2,5)
                604   	Send_Constant_String(#Cels)
                605   
                606     Set_Cursor(2,11)
                607     Move_1B_to_4B (x, %2)
                608     lcall hex2bcd
                609     Display_BCD(bcd)
                610     Display_char(#':')
                611    Move_1B_to_4B (x, %3)
                612     lcall hex2bcd
                613     Display_BCD(bcd)
                614   
                615     
                616    
                617   ENDMAC
08D3            618   
08D3            619   ;------------------------------------------------------------------;
08D3            620   ; MACRO for checking a button and changing state
08D3            621   ;------------------------------------------------------------------;
                622   Check_button_for_State_change Mac
                623   	; MAC (%0:    Constant string for the button name           %1: state to jump to if the button is pressed )
                624   	jb %0, no_button_pressed%M
                625   	Wait_Milli_Seconds(#50)
                626   	jb %0, no_button_pressed%M
                627   	jnb %0, $
                628   	
                629   	mov state, #%1
                630     WriteCommand(#0x01)
                631     Wait_Milli_Seconds(#2)
                632   no_button_pressed%M:
                633   
                634   ENDMAC
08D3            635   
08D3            636   ;------------------------------------------------------------------;
08D3            637   ; MACRO for comparing 2 values and changing state
08D3            638   ;------------------------------------------------------------------;
                639   Compare_Values_for_State_Change MAC
                640   	;	%0: variable to check
                641   	;	%1: value set at using the buttons
                642   	;	%2: next state
                643   	mov a, %0
                644     clr c
                645     subb a, %1
                646     jnc values_not_equal%M
                647   	mov state, #%2
                648   	 WriteCommand(#0x01)
                649     Wait_Milli_Seconds(#2)
                650   values_not_equal%M:
                651   
                652   ENDMAC
08D3            653   ;------------------------------------------------------------------;
08D3            654   ; MACRO for turning the SSR off
08D3            655   ;------------------------------------------------------------------;
                656   SSR_OFF MAC
                657       clr pwm_on
                658       clr pwm_high
                659       clr SSR_OUT
                660   ENDMAC
08D3            661   
08D3            662   ;------------------------------------------------------------------;
08D3            663   ; MACRO for going to next state
08D3            664   ;------------------------------------------------------------------;
                665   check_state MAC
                666   		; %0 state number    %1 next state
                667       mov a, state
                668       cjne a, #%0, skipstate%M
                669     	sjmp no_skip_state%M
                670   skipstate%M:
                671       ljmp state%1
                672   no_skip_state%M:
                673   ENDMAC
08D3            674   
                675   Over_Limit MAC
                676   	mov a, %0
                677     clr c
                678     dec a
                679     subb a, #%1			;reflow time should be less than 45 seconds
                680     jc	Not_over_Limit%M	;if reflow_seconds - 45 < 0
                681   
                682     mov %0, #%1	;reset reflow seconds to 0s
                683     
                684   Not_over_Limit%M:  
                685   ENDMAC
08D3            686   ;------------------------------------------------------------------;
08D3            687   ; Main program   (FSM)
08D3            688   ;        -state 0:  Start Screen
08D3            689   ;        -state 1:  initialization       Soak Time  
08D3            690   ;        -state 2:  initialization               Soak Temperature
08D3            691   ;        -state 3:  initialization               Reflow Time
08D3            692   ;        -state 4:  initialization               Reflow Temp
08D3            693   ;
08D3            694   ;        -state 5:  Storing the variables in flash memory, and asking for user confirmation to begin process                             
08D3            695   ; -state 6:  initialising Timer and resetting Global Timer
08D3            696   ;        -state 10: Ramp to Soak
08D3            697   ;        -state 11: Soak
08D3            698   ;        -state 12: Ramp to reflow
08D3            699   ;        -state 13: Reflow (Done for now, possible additions check if temperature goes too high, if so then begin cooling immediately etc.)
08D3            700   ;        -state 14: Cooling
08D3            701   ;        -state 15: Finished successfully
08D3            702   ;        -state 16: ERROR State
08D3            703   ; -state 17: Force Quit State
08D3            704   ;------------------------------------------------------------------;
08D3            705   MainProgram:
08D3            706   
08D3            707            ; Initialization
08D3 75817F     708       mov SP, #0x7F
08D6 75C100     709       mov PMOD, #0 ; Configure all ports in bidirectional mode
08D9 12063A     710       lcall Timer0_Init
08DC 12065A     711       lcall Timer2_Init
08DF D2AF       712       setb EA   ; Enable Global interrupts
08E1 12034C     713       lcall INIT_SPI
08E4 1203BD     714            lcall InitSerialPort
08E7 120088     715       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
08EA            716       
08EA C202       717       clr pwm_on
08EC C203       717       clr pwm_high
08EE C2B7       717       clr SSR_OUT
08F0            717            ; clears  pwm_on ------- pwm_high ------- SSR_OUT ------- in_process                            
08F0            718   
08F0 C204       719                    clr settings_modified_flag
08F2 C201       720       clr one_min_flag
08F4 C205       721       clr sample_flag
08F6 C206       722       clr short_beep_flag
08F8 C207       723       clr long_beep_flag
08FA C208       724       clr six_beep_flag
08FC            725            
08FC 12089C     726            lcall Load_Configuration ; Read values from data flash
08FF            727            
08FF            728   forever:         
08FF 300503     729     jnb sample_flag, state0
0902 12073D     730     lcall Take_Sample
0905            731   
0905            732   ; Main start screen appears on boot and 
0905            733   state0:
0905            734                    ; 0 state number    1 next state
0905 E55A       734       mov a, state
0907 B40002     734       cjne a, #0, skipstate37
090A 8003       734            sjmp no_skip_state37
090C            734   skipstate37:
090C 020990     734       ljmp state1
090F            734   no_skip_state37:
090F            735     
090F C0E0       736            push acc
0911 7401       736            mov a, #1
0913 14         736            dec a
0914 1200C1     736            lcall ?Set_Cursor_1 ; Select column and row
0917 D0E0       736            pop acc
0919 C083       736            push dph
091B C082       736            push dpl
091D C0E0       736            push acc
091F 900418     736            mov dptr, #StartMessage
0922 1200B4     736            lcall ?Send_Constant_String
0925 D0E0       736            pop acc
0927 D082       736            pop dpl
0929 D083       736            pop dph
092B C0E0       736            push acc
092D 7401       736            mov a, #1
092F 14         736            dec a
0930 1200BF     736            lcall ?Set_Cursor_2 ; Select column and row
0933 D0E0       736            pop acc
0935 C083       736            push dph
0937 C082       736            push dpl
0939 C0E0       736            push acc
093B 900429     736            mov dptr, #StartMessage2
093E 1200B4     736            lcall ?Send_Constant_String
0941 D0E0       736            pop acc
0943 D082       736            pop dpl
0945 D083       736            pop dph
0947            737     
0947            738            ; MAC (CYCLE_BUTTON:    Constant string for the button name           1: state to jump to if the button is pressed )
0947 208020     738            jb CYCLE_BUTTON, no_button_pressed43
094A C002       738            push AR2
094C 7A32       738            mov R2, #50
094E 120039     738            lcall ?Wait_Milli_Seconds
0951 D002       738            pop AR2
0953 208014     738            jb CYCLE_BUTTON, no_button_pressed43
0956 3080FD     738            jnb CYCLE_BUTTON, $
0959            738            
0959 755A01     738            mov state, #1
095C 7401       738            mov a, #0x01
095E 120083     738            lcall ?WriteCommand
0961 C002       738            push AR2
0963 7A02       738            mov R2, #2
0965 120039     738            lcall ?Wait_Milli_Seconds
0968 D002       738            pop AR2
096A            738   no_button_pressed43:
096A            738                    ; Transition to parameter select states
096A            739            ; MAC (INC_BUTTON:    Constant string for the button name           5: state to jump to if the button is pressed )
096A 208220     739            jb INC_BUTTON, no_button_pressed47
096D C002       739            push AR2
096F 7A32       739            mov R2, #50
0971 120039     739            lcall ?Wait_Milli_Seconds
0974 D002       739            pop AR2
0976 208214     739            jb INC_BUTTON, no_button_pressed47
0979 3082FD     739            jnb INC_BUTTON, $
097C            739            
097C 755A05     739            mov state, #5
097F 7401       739            mov a, #0x01
0981 120083     739            lcall ?WriteCommand
0984 C002       739            push AR2
0986 7A02       739            mov R2, #2
0988 120039     739            lcall ?Wait_Milli_Seconds
098B D002       739            pop AR2
098D            739   no_button_pressed47:
098D            739                            ; Transition to save/start confirm state
098D 0208FF     740     ljmp forever
0990            741   ; initializing the Soak Time 
0990            742   state1:
0990            743                    ; 1 state number    2 next state
0990 E55A       743       mov a, state
0992 B40102     743       cjne a, #1, skipstate51
0995 8003       743            sjmp no_skip_state51
0997            743   skipstate51:
0997 020A67     743       ljmp state2
099A            743   no_skip_state51:
099A D204       744            setb settings_modified_flag
099C            745     
099C            746            ; MAC (SoakTime_Message:    Constant string for the first line on LCD       soak_seconds: value to be shown on second line                              Secs: unit )
099C C0E0       746            push acc
099E 7401       746            mov a, #1
09A0 14         746            dec a
09A1 1200C1     746            lcall ?Set_Cursor_1 ; Select column and row
09A4 D0E0       746            pop acc
09A6 C083       746            push dph
09A8 C082       746            push dpl
09AA C0E0       746            push acc
09AC 90043A     746            mov dptr, #SoakTime_Message
09AF 1200B4     746            lcall ?Send_Constant_String
09B2 D0E0       746            pop acc
09B4 D082       746            pop dpl
09B6 D083       746            pop dph
09B8 C0E0       746            push acc
09BA 7401       746            mov a, #1
09BC 14         746            dec a
09BD 1200BF     746            lcall ?Set_Cursor_2 ; Select column and row
09C0 D0E0       746            pop acc
09C2 85343F     746            mov x+0, soak_seconds+0 
09C5 754000     746            mov x+1, #0
09C8 754100     746            mov x+2, #0 
09CB 754200     746            mov x+3, #0
09CE 1200DC     746            lcall hex2bcd
09D1 C000       746            push ar0
09D3 C0E0       746            push acc
09D5 7420       746            mov a, #' '
09D7 12007E     746            lcall ?WriteData
09DA A84A       746            mov r0, bcd+1
09DC E8         746            mov a, r0
09DD 540F       746            anl a, #0fh
09DF 4430       746            orl a, #30h
09E1 12007E     746            lcall ?WriteData
09E4 D0E0       746            pop acc
09E6 D000       746            pop ar0
09E8 C000       746            push ar0
09EA A849       746            mov r0, bcd
09EC 1200C6     746            lcall ?Display_BCD
09EF D000       746            pop ar0
09F1 C0E0       746            push acc
09F3 7405       746            mov a, #5
09F5 14         746            dec a
09F6 1200BF     746            lcall ?Set_Cursor_2 ; Select column and row
09F9 D0E0       746            pop acc
09FB C083       746            push dph
09FD C082       746            push dpl
09FF C0E0       746            push acc
0A01 9005F3     746            mov dptr, #Secs
0A04 1200B4     746            lcall ?Send_Constant_String
0A07 D0E0       746            pop acc
0A09 D082       746            pop dpl
0A0B D083       746            pop dph
0A0D            747            ;Mac (INC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A0D 208217     747            jb INC_BUTTON, no_inc_dec_var61
0A10 C002       747            push AR2
0A12 7A32       747            mov R2, #50
0A14 120039     747            lcall ?Wait_Milli_Seconds
0A17 D002       747            pop AR2
0A19 20820B     747            jb INC_BUTTON, no_inc_dec_var61
0A1C C002       747            push AR2
0A1E 7A64       747            mov R2, #100
0A20 120039     747            lcall ?Wait_Milli_Seconds
0A23 D002       747            pop AR2
0A25            747   
0A25 0534       747            inc soak_seconds
0A27            747            
0A27            747   no_inc_dec_var61:
0A27            747   
0A27            748            ;Mac (DEC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A27 208417     748            jb DEC_BUTTON, no_inc_dec_var64
0A2A C002       748            push AR2
0A2C 7A32       748            mov R2, #50
0A2E 120039     748            lcall ?Wait_Milli_Seconds
0A31 D002       748            pop AR2
0A33 20840B     748            jb DEC_BUTTON, no_inc_dec_var64
0A36 C002       748            push AR2
0A38 7A64       748            mov R2, #100
0A3A 120039     748            lcall ?Wait_Milli_Seconds
0A3D D002       748            pop AR2
0A3F            748   
0A3F 1534       748            dec soak_seconds
0A41            748            
0A41            748   no_inc_dec_var64:
0A41            748   
0A41            749            
0A41            750            ; MAC (CYCLE_BUTTON:    Constant string for the button name           2: state to jump to if the button is pressed )
0A41 208020     750            jb CYCLE_BUTTON, no_button_pressed67
0A44 C002       750            push AR2
0A46 7A32       750            mov R2, #50
0A48 120039     750            lcall ?Wait_Milli_Seconds
0A4B D002       750            pop AR2
0A4D 208014     750            jb CYCLE_BUTTON, no_button_pressed67
0A50 3080FD     750            jnb CYCLE_BUTTON, $
0A53            750            
0A53 755A02     750            mov state, #2
0A56 7401       750            mov a, #0x01
0A58 120083     750            lcall ?WriteCommand
0A5B C002       750            push AR2
0A5D 7A02       750            mov R2, #2
0A5F 120039     750            lcall ?Wait_Milli_Seconds
0A62 D002       750            pop AR2
0A64            750   no_button_pressed67:
0A64            750   
0A64            750   
0A64 0208FF     751            ljmp forever                                                                    
0A67            752            
0A67            753   ; initializing the Soak Temperature 
0A67            754   state2:
0A67            755                    ; 2 state number    3 next state
0A67 E55A       755       mov a, state
0A69 B40202     755       cjne a, #2, skipstate71
0A6C 8003       755            sjmp no_skip_state71
0A6E            755   skipstate71:
0A6E 020B3C     755       ljmp state3
0A71            755   no_skip_state71:
0A71            755   
0A71            756            ; MAC (SoakTemp_Message:    Constant string for the first line on LCD       soak_temp: value to be shown on second line                                 Cels: unit )
0A71 C0E0       756            push acc
0A73 7401       756            mov a, #1
0A75 14         756            dec a
0A76 1200C1     756            lcall ?Set_Cursor_1 ; Select column and row
0A79 D0E0       756            pop acc
0A7B C083       756            push dph
0A7D C082       756            push dpl
0A7F C0E0       756            push acc
0A81 90044B     756            mov dptr, #SoakTemp_Message
0A84 1200B4     756            lcall ?Send_Constant_String
0A87 D0E0       756            pop acc
0A89 D082       756            pop dpl
0A8B D083       756            pop dph
0A8D C0E0       756            push acc
0A8F 7401       756            mov a, #1
0A91 14         756            dec a
0A92 1200BF     756            lcall ?Set_Cursor_2 ; Select column and row
0A95 D0E0       756            pop acc
0A97 85353F     756            mov x+0, soak_temp+0 
0A9A 754000     756            mov x+1, #0
0A9D 754100     756            mov x+2, #0 
0AA0 754200     756            mov x+3, #0
0AA3 1200DC     756            lcall hex2bcd
0AA6 C000       756            push ar0
0AA8 C0E0       756            push acc
0AAA 7420       756            mov a, #' '
0AAC 12007E     756            lcall ?WriteData
0AAF A84A       756            mov r0, bcd+1
0AB1 E8         756            mov a, r0
0AB2 540F       756            anl a, #0fh
0AB4 4430       756            orl a, #30h
0AB6 12007E     756            lcall ?WriteData
0AB9 D0E0       756            pop acc
0ABB D000       756            pop ar0
0ABD C000       756            push ar0
0ABF A849       756            mov r0, bcd
0AC1 1200C6     756            lcall ?Display_BCD
0AC4 D000       756            pop ar0
0AC6 C0E0       756            push acc
0AC8 7405       756            mov a, #5
0ACA 14         756            dec a
0ACB 1200BF     756            lcall ?Set_Cursor_2 ; Select column and row
0ACE D0E0       756            pop acc
0AD0 C083       756            push dph
0AD2 C082       756            push dpl
0AD4 C0E0       756            push acc
0AD6 9005EF     756            mov dptr, #Cels
0AD9 1200B4     756            lcall ?Send_Constant_String
0ADC D0E0       756            pop acc
0ADE D082       756            pop dpl
0AE0 D083       756            pop dph
0AE2            757            ;Mac (INC_BUTTON : inc/dec button    soak_temp : variable ) 
0AE2 208217     757            jb INC_BUTTON, no_inc_dec_var81
0AE5 C002       757            push AR2
0AE7 7A32       757            mov R2, #50
0AE9 120039     757            lcall ?Wait_Milli_Seconds
0AEC D002       757            pop AR2
0AEE 20820B     757            jb INC_BUTTON, no_inc_dec_var81
0AF1 C002       757            push AR2
0AF3 7A64       757            mov R2, #100
0AF5 120039     757            lcall ?Wait_Milli_Seconds
0AF8 D002       757            pop AR2
0AFA            757   
0AFA 0535       757            inc soak_temp
0AFC            757            
0AFC            757   no_inc_dec_var81:
0AFC            757   
0AFC            758            ;Mac (DEC_BUTTON : inc/dec button    soak_temp : variable ) 
0AFC 208417     758            jb DEC_BUTTON, no_inc_dec_var84
0AFF C002       758            push AR2
0B01 7A32       758            mov R2, #50
0B03 120039     758            lcall ?Wait_Milli_Seconds
0B06 D002       758            pop AR2
0B08 20840B     758            jb DEC_BUTTON, no_inc_dec_var84
0B0B C002       758            push AR2
0B0D 7A64       758            mov R2, #100
0B0F 120039     758            lcall ?Wait_Milli_Seconds
0B12 D002       758            pop AR2
0B14            758   
0B14 1535       758            dec soak_temp
0B16            758            
0B16            758   no_inc_dec_var84:
0B16            758   
0B16            759            
0B16            760            ; MAC (CYCLE_BUTTON:    Constant string for the button name           3: state to jump to if the button is pressed )
0B16 208020     760            jb CYCLE_BUTTON, no_button_pressed87
0B19 C002       760            push AR2
0B1B 7A32       760            mov R2, #50
0B1D 120039     760            lcall ?Wait_Milli_Seconds
0B20 D002       760            pop AR2
0B22 208014     760            jb CYCLE_BUTTON, no_button_pressed87
0B25 3080FD     760            jnb CYCLE_BUTTON, $
0B28            760            
0B28 755A03     760            mov state, #3
0B2B 7401       760            mov a, #0x01
0B2D 120083     760            lcall ?WriteCommand
0B30 C002       760            push AR2
0B32 7A02       760            mov R2, #2
0B34 120039     760            lcall ?Wait_Milli_Seconds
0B37 D002       760            pop AR2
0B39            760   no_button_pressed87:
0B39            760   
0B39 0208FF     761            ljmp forever                                                                    
0B3C            762   
0B3C            763   ; initializing the Reflow Time 
0B3C            764   state3:
0B3C            765                    ; 3 state number    4 next state
0B3C E55A       765       mov a, state
0B3E B40302     765       cjne a, #3, skipstate91
0B41 8003       765            sjmp no_skip_state91
0B43            765   skipstate91:
0B43 020C1C     765       ljmp state4
0B46            765   no_skip_state91:
0B46            765   
0B46            766            
0B46            767            ; MAC (ReflowTime_Message:    Constant string for the first line on LCD       reflow_seconds: value to be shown on second line                          Secs: unit )
0B46 C0E0       767            push acc
0B48 7401       767            mov a, #1
0B4A 14         767            dec a
0B4B 1200C1     767            lcall ?Set_Cursor_1 ; Select column and row
0B4E D0E0       767            pop acc
0B50 C083       767            push dph
0B52 C082       767            push dpl
0B54 C0E0       767            push acc
0B56 90045C     767            mov dptr, #ReflowTime_Message
0B59 1200B4     767            lcall ?Send_Constant_String
0B5C D0E0       767            pop acc
0B5E D082       767            pop dpl
0B60 D083       767            pop dph
0B62 C0E0       767            push acc
0B64 7401       767            mov a, #1
0B66 14         767            dec a
0B67 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
0B6A D0E0       767            pop acc
0B6C 85363F     767            mov x+0, reflow_seconds+0 
0B6F 754000     767            mov x+1, #0
0B72 754100     767            mov x+2, #0 
0B75 754200     767            mov x+3, #0
0B78 1200DC     767            lcall hex2bcd
0B7B C000       767            push ar0
0B7D C0E0       767            push acc
0B7F 7420       767            mov a, #' '
0B81 12007E     767            lcall ?WriteData
0B84 A84A       767            mov r0, bcd+1
0B86 E8         767            mov a, r0
0B87 540F       767            anl a, #0fh
0B89 4430       767            orl a, #30h
0B8B 12007E     767            lcall ?WriteData
0B8E D0E0       767            pop acc
0B90 D000       767            pop ar0
0B92 C000       767            push ar0
0B94 A849       767            mov r0, bcd
0B96 1200C6     767            lcall ?Display_BCD
0B99 D000       767            pop ar0
0B9B C0E0       767            push acc
0B9D 7405       767            mov a, #5
0B9F 14         767            dec a
0BA0 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
0BA3 D0E0       767            pop acc
0BA5 C083       767            push dph
0BA7 C082       767            push dpl
0BA9 C0E0       767            push acc
0BAB 9005F3     767            mov dptr, #Secs
0BAE 1200B4     767            lcall ?Send_Constant_String
0BB1 D0E0       767            pop acc
0BB3 D082       767            pop dpl
0BB5 D083       767            pop dph         
0BB7            768            ;Mac (INC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0BB7 208217     768            jb INC_BUTTON, no_inc_dec_var101
0BBA C002       768            push AR2
0BBC 7A32       768            mov R2, #50
0BBE 120039     768            lcall ?Wait_Milli_Seconds
0BC1 D002       768            pop AR2
0BC3 20820B     768            jb INC_BUTTON, no_inc_dec_var101
0BC6 C002       768            push AR2
0BC8 7A64       768            mov R2, #100
0BCA 120039     768            lcall ?Wait_Milli_Seconds
0BCD D002       768            pop AR2
0BCF            768   
0BCF 0536       768            inc reflow_seconds
0BD1            768            
0BD1            768   no_inc_dec_var101:
0BD1            768   
0BD1            769            ;Mac (DEC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0BD1 208417     769            jb DEC_BUTTON, no_inc_dec_var104
0BD4 C002       769            push AR2
0BD6 7A32       769            mov R2, #50
0BD8 120039     769            lcall ?Wait_Milli_Seconds
0BDB D002       769            pop AR2
0BDD 20840B     769            jb DEC_BUTTON, no_inc_dec_var104
0BE0 C002       769            push AR2
0BE2 7A64       769            mov R2, #100
0BE4 120039     769            lcall ?Wait_Milli_Seconds
0BE7 D002       769            pop AR2
0BE9            769   
0BE9 1536       769            dec reflow_seconds
0BEB            769            
0BEB            769   no_inc_dec_var104:
0BEB            769   
0BEB            770            
0BEB E536       771            mov a, reflow_seconds
0BED C3         771     clr c
0BEE 14         771     dec a
0BEF 942D       771     subb a, #45                    ;reflow time should be less than 45 seconds
0BF1 4003       771     jc     Not_over_Limit107       ;if reflow_seconds - 45 < 0
0BF3            771   
0BF3 75362D     771     mov reflow_seconds, #45        ;reset reflow seconds to 0s
0BF6            771     
0BF6            771   Not_over_Limit107:  
0BF6            772     
0BF6            773            ; MAC (CYCLE_BUTTON:    Constant string for the button name           4: state to jump to if the button is pressed )
0BF6 208020     773            jb CYCLE_BUTTON, no_button_pressed108
0BF9 C002       773            push AR2
0BFB 7A32       773            mov R2, #50
0BFD 120039     773            lcall ?Wait_Milli_Seconds
0C00 D002       773            pop AR2
0C02 208014     773            jb CYCLE_BUTTON, no_button_pressed108
0C05 3080FD     773            jnb CYCLE_BUTTON, $
0C08            773            
0C08 755A04     773            mov state, #4
0C0B 7401       773            mov a, #0x01
0C0D 120083     773            lcall ?WriteCommand
0C10 C002       773            push AR2
0C12 7A02       773            mov R2, #2
0C14 120039     773            lcall ?Wait_Milli_Seconds
0C17 D002       773            pop AR2
0C19            773   no_button_pressed108:
0C19            773   
0C19 0208FF     774            ljmp forever                                                                    
0C1C            775   
0C1C            776   ; initializing the Reflow Temperature 
0C1C            777   state4:
0C1C            778                    ; 4 state number    5 next state
0C1C E55A       778       mov a, state
0C1E B40402     778       cjne a, #4, skipstate112
0C21 8003       778            sjmp no_skip_state112
0C23            778   skipstate112:
0C23 020CFC     778       ljmp state5
0C26            778   no_skip_state112:
0C26            779            
0C26            780            ; MAC (ReflowTemp_Message:    Constant string for the first line on LCD       reflow_temp: value to be shown on second line                             Cels: unit )
0C26 C0E0       780            push acc
0C28 7401       780            mov a, #1
0C2A 14         780            dec a
0C2B 1200C1     780            lcall ?Set_Cursor_1 ; Select column and row
0C2E D0E0       780            pop acc
0C30 C083       780            push dph
0C32 C082       780            push dpl
0C34 C0E0       780            push acc
0C36 90046D     780            mov dptr, #ReflowTemp_Message
0C39 1200B4     780            lcall ?Send_Constant_String
0C3C D0E0       780            pop acc
0C3E D082       780            pop dpl
0C40 D083       780            pop dph
0C42 C0E0       780            push acc
0C44 7401       780            mov a, #1
0C46 14         780            dec a
0C47 1200BF     780            lcall ?Set_Cursor_2 ; Select column and row
0C4A D0E0       780            pop acc
0C4C 85373F     780            mov x+0, reflow_temp+0 
0C4F 754000     780            mov x+1, #0
0C52 754100     780            mov x+2, #0 
0C55 754200     780            mov x+3, #0
0C58 1200DC     780            lcall hex2bcd
0C5B C000       780            push ar0
0C5D C0E0       780            push acc
0C5F 7420       780            mov a, #' '
0C61 12007E     780            lcall ?WriteData
0C64 A84A       780            mov r0, bcd+1
0C66 E8         780            mov a, r0
0C67 540F       780            anl a, #0fh
0C69 4430       780            orl a, #30h
0C6B 12007E     780            lcall ?WriteData
0C6E D0E0       780            pop acc
0C70 D000       780            pop ar0
0C72 C000       780            push ar0
0C74 A849       780            mov r0, bcd
0C76 1200C6     780            lcall ?Display_BCD
0C79 D000       780            pop ar0
0C7B C0E0       780            push acc
0C7D 7405       780            mov a, #5
0C7F 14         780            dec a
0C80 1200BF     780            lcall ?Set_Cursor_2 ; Select column and row
0C83 D0E0       780            pop acc
0C85 C083       780            push dph
0C87 C082       780            push dpl
0C89 C0E0       780            push acc
0C8B 9005EF     780            mov dptr, #Cels
0C8E 1200B4     780            lcall ?Send_Constant_String
0C91 D0E0       780            pop acc
0C93 D082       780            pop dpl
0C95 D083       780            pop dph                 
0C97            781            ;Mac (INC_BUTTON : inc/dec button    reflow_temp : variable ) 
0C97 208217     781            jb INC_BUTTON, no_inc_dec_var122
0C9A C002       781            push AR2
0C9C 7A32       781            mov R2, #50
0C9E 120039     781            lcall ?Wait_Milli_Seconds
0CA1 D002       781            pop AR2
0CA3 20820B     781            jb INC_BUTTON, no_inc_dec_var122
0CA6 C002       781            push AR2
0CA8 7A64       781            mov R2, #100
0CAA 120039     781            lcall ?Wait_Milli_Seconds
0CAD D002       781            pop AR2
0CAF            781   
0CAF            781   
0CAF 0537       781            inc reflow_temp
0CB1            781            
0CB1            781   no_inc_dec_var122:
0CB1            781   
0CB1            782            ;Mac (DEC_BUTTON : inc/dec button    reflow_temp : variable ) 
0CB1 208417     782            jb DEC_BUTTON, no_inc_dec_var125
0CB4 C002       782            push AR2
0CB6 7A32       782            mov R2, #50
0CB8 120039     782            lcall ?Wait_Milli_Seconds
0CBB D002       782            pop AR2
0CBD 20840B     782            jb DEC_BUTTON, no_inc_dec_var125
0CC0 C002       782            push AR2
0CC2 7A64       782            mov R2, #100
0CC4 120039     782            lcall ?Wait_Milli_Seconds
0CC7 D002       782            pop AR2
0CC9            782   
0CC9            782   
0CC9 1537       782            dec reflow_temp
0CCB            782            
0CCB            782   no_inc_dec_var125:
0CCB            782   
0CCB            783            
0CCB E537       784            mov a, reflow_temp
0CCD C3         784     clr c
0CCE 14         784     dec a
0CCF 94EB       784     subb a, #235                   ;reflow time should be less than 45 seconds
0CD1 4003       784     jc     Not_over_Limit128       ;if reflow_seconds - 45 < 0
0CD3            784   
0CD3 7537EB     784     mov reflow_temp, #235  ;reset reflow seconds to 0s
0CD6            784     
0CD6            784   Not_over_Limit128:  
0CD6            785     
0CD6            786            ; MAC (CYCLE_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0CD6 208020     786            jb CYCLE_BUTTON, no_button_pressed129
0CD9 C002       786            push AR2
0CDB 7A32       786            mov R2, #50
0CDD 120039     786            lcall ?Wait_Milli_Seconds
0CE0 D002       786            pop AR2
0CE2 208014     786            jb CYCLE_BUTTON, no_button_pressed129
0CE5 3080FD     786            jnb CYCLE_BUTTON, $
0CE8            786            
0CE8 755A00     786            mov state, #0
0CEB 7401       786            mov a, #0x01
0CED 120083     786            lcall ?WriteCommand
0CF0 C002       786            push AR2
0CF2 7A02       786            mov R2, #2
0CF4 120039     786            lcall ?Wait_Milli_Seconds
0CF7 D002       786            pop AR2
0CF9            786   no_button_pressed129:
0CF9            786   
0CF9 0208FF     787            ljmp forever                                                                    
0CFC            788            
0CFC            789   ; Saves value in Flash Memory and Presents Confirmation Screen to Start Process
0CFC            790   state5:
0CFC            791                    ; 5 state number    6 next state
0CFC E55A       791       mov a, state
0CFE B40502     791       cjne a, #5, skipstate133
0D01 8003       791            sjmp no_skip_state133
0D03            791   skipstate133:
0D03 020E51     791       ljmp state6
0D06            791   no_skip_state133:
0D06            792            
0D06 300461     793     jnb settings_modified_flag, state5TempSet ; Save values once, once saved skip this
0D09            794     
0D09 12086B     795            lcall Save_Configuration ; Call to save data to flash memory
0D0C C204       796            clr settings_modified_flag
0D0E C0E0       797            push acc
0D10 7401       797            mov a, #1
0D12 14         797            dec a
0D13 1200C1     797            lcall ?Set_Cursor_1 ; Select column and row
0D16 D0E0       797            pop acc
0D18 C083       797            push dph
0D1A C082       797            push dpl
0D1C C0E0       797            push acc
0D1E 9004E4     797            mov dptr, #SaveToFlash_Msg
0D21 1200B4     797            lcall ?Send_Constant_String
0D24 D0E0       797            pop acc
0D26 D082       797            pop dpl
0D28 D083       797            pop dph
0D2A C0E0       797            push acc
0D2C 7401       797            mov a, #1
0D2E 14         797            dec a
0D2F 1200BF     797            lcall ?Set_Cursor_2 ; Select column and row
0D32 D0E0       797            pop acc
0D34 C083       797            push dph
0D36 C082       797            push dpl
0D38 C0E0       797            push acc
0D3A 900506     797            mov dptr, #BlankMsg
0D3D 1200B4     797            lcall ?Send_Constant_String
0D40 D0E0       797            pop acc
0D42 D082       797            pop dpl
0D44 D083       797            pop dph
0D46 C002       798            push AR2
0D48 7AFA       798            mov R2, #250
0D4A 120039     798            lcall ?Wait_Milli_Seconds
0D4D D002       798            pop AR2
0D4F C002       799            push AR2
0D51 7AFA       799            mov R2, #250
0D53 120039     799            lcall ?Wait_Milli_Seconds
0D56 D002       799            pop AR2
0D58 C002       800            push AR2
0D5A 7AFA       800            mov R2, #250
0D5C 120039     800            lcall ?Wait_Milli_Seconds
0D5F D002       800            pop AR2
0D61 C002       801            push AR2
0D63 7AFA       801            mov R2, #250
0D65 120039     801            lcall ?Wait_Milli_Seconds
0D68 D002       801            pop AR2
0D6A            802     
0D6A            803   state5TempSet:
0D6A E55B       804     mov a, current_temp
0D6C C3         805     clr c 
0D6D 9535       806     subb a, soak_temp ; Compare to soak temp
0D6F 405F       807            jc state5AndThreeQuarters ; If temp is too high, do not allow user to continue
0D71 C0E0       808            push acc
0D73 7401       808            mov a, #1
0D75 14         808            dec a
0D76 1200C1     808            lcall ?Set_Cursor_1 ; Select column and row
0D79 D0E0       808            pop acc
0D7B C083       808            push dph
0D7D C082       808            push dpl
0D7F C0E0       808            push acc
0D81 9004A0     808            mov dptr, #TempTooHighMsg
0D84 1200B4     808            lcall ?Send_Constant_String
0D87 D0E0       808            pop acc
0D89 D082       808            pop dpl
0D8B D083       808            pop dph
0D8D C0E0       808            push acc
0D8F 7401       808            mov a, #1
0D91 14         808            dec a
0D92 1200BF     808            lcall ?Set_Cursor_2 ; Select column and row
0D95 D0E0       808            pop acc
0D97 C083       808            push dph
0D99 C082       808            push dpl
0D9B C0E0       808            push acc
0D9D 9004B1     808            mov dptr, #TempTooHighMsg2
0DA0 1200B4     808            lcall ?Send_Constant_String
0DA3 D0E0       808            pop acc
0DA5 D082       808            pop dpl
0DA7 D083       808            pop dph ; Display cooling message, prevent user from starting reflow process
0DA9 C002       809            push AR2
0DAB 7AFA       809            mov R2, #250
0DAD 120039     809            lcall ?Wait_Milli_Seconds
0DB0 D002       809            pop AR2
0DB2 C002       810            push AR2
0DB4 7AFA       810            mov R2, #250
0DB6 120039     810            lcall ?Wait_Milli_Seconds
0DB9 D002       810            pop AR2
0DBB C002       811            push AR2
0DBD 7AFA       811            mov R2, #250
0DBF 120039     811            lcall ?Wait_Milli_Seconds
0DC2 D002       811            pop AR2
0DC4 C002       812            push AR2
0DC6 7AFA       812            mov R2, #250
0DC8 120039     812            lcall ?Wait_Milli_Seconds
0DCB D002       812            pop AR2
0DCD 0208FF     813     ljmp forever
0DD0            814   state5AndThreeQuarters:
0DD0 C0E0       815            push acc
0DD2 7401       815            mov a, #1
0DD4 14         815            dec a
0DD5 1200C1     815            lcall ?Set_Cursor_1 ; Select column and row
0DD8 D0E0       815            pop acc
0DDA C083       815            push dph
0DDC C082       815            push dpl
0DDE C0E0       815            push acc
0DE0 90047E     815            mov dptr, #Start_Message
0DE3 1200B4     815            lcall ?Send_Constant_String
0DE6 D0E0       815            pop acc
0DE8 D082       815            pop dpl
0DEA D083       815            pop dph
0DEC C0E0       815            push acc
0DEE 7401       815            mov a, #1
0DF0 14         815            dec a
0DF1 1200BF     815            lcall ?Set_Cursor_2 ; Select column and row
0DF4 D0E0       815            pop acc
0DF6 C083       815            push dph
0DF8 C082       815            push dpl
0DFA C0E0       815            push acc
0DFC 90048F     815            mov dptr, #Y_N_Message
0DFF 1200B4     815            lcall ?Send_Constant_String
0E02 D0E0       815            pop acc
0E04 D082       815            pop dpl
0E06 D083       815            pop dph
0E08            816            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0E08 208420     816            jb DEC_BUTTON, no_button_pressed157
0E0B C002       816            push AR2
0E0D 7A32       816            mov R2, #50
0E0F 120039     816            lcall ?Wait_Milli_Seconds
0E12 D002       816            pop AR2
0E14 208414     816            jb DEC_BUTTON, no_button_pressed157
0E17 3084FD     816            jnb DEC_BUTTON, $
0E1A            816            
0E1A 755A00     816            mov state, #0
0E1D 7401       816            mov a, #0x01
0E1F 120083     816            lcall ?WriteCommand
0E22 C002       816            push AR2
0E24 7A02       816            mov R2, #2
0E26 120039     816            lcall ?Wait_Milli_Seconds
0E29 D002       816            pop AR2
0E2B            816   no_button_pressed157:
0E2B            816            ; Move to state 0 to reselect values
0E2B            817            ; MAC (INC_BUTTON:    Constant string for the button name           6: state to jump to if the button is pressed )
0E2B 208220     817            jb INC_BUTTON, no_button_pressed161
0E2E C002       817            push AR2
0E30 7A32       817            mov R2, #50
0E32 120039     817            lcall ?Wait_Milli_Seconds
0E35 D002       817            pop AR2
0E37 208214     817            jb INC_BUTTON, no_button_pressed161
0E3A 3082FD     817            jnb INC_BUTTON, $
0E3D            817            
0E3D 755A06     817            mov state, #6
0E40 7401       817            mov a, #0x01
0E42 120083     817            lcall ?WriteCommand
0E45 C002       817            push AR2
0E47 7A02       817            mov R2, #2
0E49 120039     817            lcall ?Wait_Milli_Seconds
0E4C D002       817            pop AR2
0E4E            817   no_button_pressed161:
0E4E            817            ; Start Process
0E4E            818    
0E4E 0208FF     819     ljmp forever   
0E51            820   
0E51            821   state6:
0E51            822                    ; 6 state number    10 next state
0E51 E55A       822       mov a, state
0E53 B40602     822       cjne a, #6, skipstate165
0E56 8003       822            sjmp no_skip_state165
0E58            822   skipstate165:
0E58 020E6C     822       ljmp state10
0E5B            822   no_skip_state165:
0E5B C201       823            clr one_min_flag
0E5D            824            
0E5D E4         825     clr a
0E5E F539       826     mov run_time_sec, a
0E60 F538       827     mov run_time_min, a
0E62 F53A       828     mov state_time, a
0E64 755A0A     829     mov state, #10
0E67 D206       830     setb short_beep_flag
0E69 0208FF     831     ljmp forever
0E6C            832     
0E6C            833   state10:
0E6C            834   
0E6C            835                    ; 10 state number    11 next state
0E6C E55A       835       mov a, state
0E6E B40A02     835       cjne a, #10, skipstate166
0E71 8003       835            sjmp no_skip_state166
0E73            835   skipstate166:
0E73 020F75     835       ljmp state11
0E76            835   no_skip_state166:
0E76            836            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0E76 208020     836            jb CYCLE_BUTTON, no_button_pressed167
0E79 C002       836            push AR2
0E7B 7A32       836            mov R2, #50
0E7D 120039     836            lcall ?Wait_Milli_Seconds
0E80 D002       836            pop AR2
0E82 208014     836            jb CYCLE_BUTTON, no_button_pressed167
0E85 3080FD     836            jnb CYCLE_BUTTON, $
0E88            836            
0E88 755A11     836            mov state, #17
0E8B 7401       836            mov a, #0x01
0E8D 120083     836            lcall ?WriteCommand
0E90 C002       836            push AR2
0E92 7A02       836            mov R2, #2
0E94 120039     836            lcall ?Wait_Milli_Seconds
0E97 D002       836            pop AR2
0E99            836   no_button_pressed167:
0E99            836   
0E99 C202       837            clr pwm_on                      ;100% pwm
0E9B D2B7       838            setb SSR_OUT            ; for 100% power
0E9D            839            ; MAC (Ramp2Soak:    Constant string for the first line on LCD           current_temp: Temperature                      run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
0E9D C0E0       839            push acc
0E9F 7401       839            mov a, #1
0EA1 14         839            dec a
0EA2 1200C1     839            lcall ?Set_Cursor_1 ; Select column and row
0EA5 D0E0       839            pop acc
0EA7 C083       839            push dph
0EA9 C082       839            push dpl
0EAB C0E0       839            push acc
0EAD 900548     839            mov dptr, #Ramp2Soak
0EB0 1200B4     839            lcall ?Send_Constant_String
0EB3 D0E0       839            pop acc
0EB5 D082       839            pop dpl
0EB7 D083       839            pop dph
0EB9            839     
0EB9 C0E0       839            push acc
0EBB 7401       839            mov a, #1
0EBD 14         839            dec a
0EBE 1200BF     839            lcall ?Set_Cursor_2 ; Select column and row
0EC1 D0E0       839            pop acc         ;show temperture
0EC3 855B3F     839            mov x+0, current_temp+0 
0EC6 754000     839            mov x+1, #0
0EC9 754100     839            mov x+2, #0 
0ECC 754200     839            mov x+3, #0
0ECF 1200DC     839            lcall hex2bcd
0ED2 C000       839            push ar0
0ED4 C0E0       839            push acc
0ED6 7420       839            mov a, #' '
0ED8 12007E     839            lcall ?WriteData
0EDB A84A       839            mov r0, bcd+1
0EDD E8         839            mov a, r0
0EDE 540F       839            anl a, #0fh
0EE0 4430       839            orl a, #30h
0EE2 12007E     839            lcall ?WriteData
0EE5 D0E0       839            pop acc
0EE7 D000       839            pop ar0
0EE9 C000       839            push ar0
0EEB A849       839            mov r0, bcd
0EED 1200C6     839            lcall ?Display_BCD
0EF0 D000       839            pop ar0
0EF2            839   
0EF2 C0E0       839            push acc
0EF4 7405       839            mov a, #5
0EF6 14         839            dec a
0EF7 1200BF     839            lcall ?Set_Cursor_2 ; Select column and row
0EFA D0E0       839            pop acc
0EFC C083       839            push dph
0EFE C082       839            push dpl
0F00 C0E0       839            push acc
0F02 9005EF     839            mov dptr, #Cels
0F05 1200B4     839            lcall ?Send_Constant_String
0F08 D0E0       839            pop acc
0F0A D082       839            pop dpl
0F0C D083       839            pop dph
0F0E            839   
0F0E C0E0       839            push acc
0F10 740B       839            mov a, #11
0F12 14         839            dec a
0F13 1200BF     839            lcall ?Set_Cursor_2 ; Select column and row
0F16 D0E0       839            pop acc
0F18 85383F     839            mov x+0, run_time_min+0 
0F1B 754000     839            mov x+1, #0
0F1E 754100     839            mov x+2, #0 
0F21 754200     839            mov x+3, #0
0F24 1200DC     839     lcall hex2bcd
0F27 C000       839            push ar0
0F29 A849       839            mov r0, bcd
0F2B 1200C6     839            lcall ?Display_BCD
0F2E D000       839            pop ar0
0F30 C0E0       839            push acc
0F32 743A       839            mov a, #':'
0F34 12007E     839            lcall ?WriteData
0F37 D0E0       839            pop acc
0F39 85393F     839            mov x+0, run_time_sec+0 
0F3C 754000     839            mov x+1, #0
0F3F 754100     839            mov x+2, #0 
0F42 754200     839            mov x+3, #0
0F45 1200DC     839     lcall hex2bcd
0F48 C000       839            push ar0
0F4A A849       839            mov r0, bcd
0F4C 1200C6     839            lcall ?Display_BCD
0F4F D000       839            pop ar0
0F51            839   
0F51            839     
0F51            839    
0F51            839            ;display the current stage and current temperature
0F51 30010F     840     jnb one_min_flag, not_one_min      ;check if 60 seconds has passed
0F54 C201       841     clr one_min_flag
0F56 E55B       842     mov a, current_temp
0F58 C3         843     clr c
0F59 B43200     844     cjne a, #50, check_thermocouple  ;check if thermocouple degree is bigger than 50
0F5C            845   check_thermocouple:
0F5C 5005       846     jnc not_one_min   ;if not bigger than 50, c=1, jump to display error
0F5E 755A10     847     mov state, #16
0F61 800F       848     sjmp state10_Loop
0F63            849     
0F63            850   not_one_min:
0F63 E535       851            mov a, soak_temp 
0F65 C3         852     clr c 
0F66 955B       853     subb a, current_temp   ;compare current_temp and soak_temp
0F68 5008       854     jnc state10_Loop
0F6A            855     
0F6A 755A0B     856     mov state, #11
0F6D E4         857     clr a
0F6E F53A       858            mov state_time, a       ; reset state time to 0 for next state 
0F70            859    
0F70 D206       860     setb short_beep_flag
0F72            861            
0F72            862   
0F72            863   state10_Loop:
0F72 0208FF     864            ljmp forever
0F75            865                    
0F75            866   ; Soak Stage             
0F75            867   state11:
0F75            868                    ; 11 state number    12 next state
0F75 E55A       868       mov a, state
0F77 B40B02     868       cjne a, #11, skipstate186
0F7A 8003       868            sjmp no_skip_state186
0F7C            868   skipstate186:
0F7C 02106A     868       ljmp state12
0F7F            868   no_skip_state186:
0F7F            869            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0F7F 208020     869            jb CYCLE_BUTTON, no_button_pressed187
0F82 C002       869            push AR2
0F84 7A32       869            mov R2, #50
0F86 120039     869            lcall ?Wait_Milli_Seconds
0F89 D002       869            pop AR2
0F8B 208014     869            jb CYCLE_BUTTON, no_button_pressed187
0F8E 3080FD     869            jnb CYCLE_BUTTON, $
0F91            869            
0F91 755A11     869            mov state, #17
0F94 7401       869            mov a, #0x01
0F96 120083     869            lcall ?WriteCommand
0F99 C002       869            push AR2
0F9B 7A02       869            mov R2, #2
0F9D 120039     869            lcall ?Wait_Milli_Seconds
0FA0 D002       869            pop AR2
0FA2            869   no_button_pressed187:
0FA2            869   
0FA2 D202       870            setb pwm_on                     ;25% pwm
0FA4            871            ; MAC (Soak:    Constant string for the first line on LCD           current_temp: Temperature                   run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
0FA4 C0E0       871            push acc
0FA6 7401       871            mov a, #1
0FA8 14         871            dec a
0FA9 1200C1     871            lcall ?Set_Cursor_1 ; Select column and row
0FAC D0E0       871            pop acc
0FAE C083       871            push dph
0FB0 C082       871            push dpl
0FB2 C0E0       871            push acc
0FB4 900559     871            mov dptr, #Soak
0FB7 1200B4     871            lcall ?Send_Constant_String
0FBA D0E0       871            pop acc
0FBC D082       871            pop dpl
0FBE D083       871            pop dph
0FC0            871     
0FC0 C0E0       871            push acc
0FC2 7401       871            mov a, #1
0FC4 14         871            dec a
0FC5 1200BF     871            lcall ?Set_Cursor_2 ; Select column and row
0FC8 D0E0       871            pop acc         ;show temperture
0FCA 855B3F     871            mov x+0, current_temp+0 
0FCD 754000     871            mov x+1, #0
0FD0 754100     871            mov x+2, #0 
0FD3 754200     871            mov x+3, #0
0FD6 1200DC     871            lcall hex2bcd
0FD9 C000       871            push ar0
0FDB C0E0       871            push acc
0FDD 7420       871            mov a, #' '
0FDF 12007E     871            lcall ?WriteData
0FE2 A84A       871            mov r0, bcd+1
0FE4 E8         871            mov a, r0
0FE5 540F       871            anl a, #0fh
0FE7 4430       871            orl a, #30h
0FE9 12007E     871            lcall ?WriteData
0FEC D0E0       871            pop acc
0FEE D000       871            pop ar0
0FF0 C000       871            push ar0
0FF2 A849       871            mov r0, bcd
0FF4 1200C6     871            lcall ?Display_BCD
0FF7 D000       871            pop ar0
0FF9            871   
0FF9 C0E0       871            push acc
0FFB 7405       871            mov a, #5
0FFD 14         871            dec a
0FFE 1200BF     871            lcall ?Set_Cursor_2 ; Select column and row
1001 D0E0       871            pop acc
1003 C083       871            push dph
1005 C082       871            push dpl
1007 C0E0       871            push acc
1009 9005EF     871            mov dptr, #Cels
100C 1200B4     871            lcall ?Send_Constant_String
100F D0E0       871            pop acc
1011 D082       871            pop dpl
1013 D083       871            pop dph
1015            871   
1015 C0E0       871            push acc
1017 740B       871            mov a, #11
1019 14         871            dec a
101A 1200BF     871            lcall ?Set_Cursor_2 ; Select column and row
101D D0E0       871            pop acc
101F 85383F     871            mov x+0, run_time_min+0 
1022 754000     871            mov x+1, #0
1025 754100     871            mov x+2, #0 
1028 754200     871            mov x+3, #0
102B 1200DC     871     lcall hex2bcd
102E C000       871            push ar0
1030 A849       871            mov r0, bcd
1032 1200C6     871            lcall ?Display_BCD
1035 D000       871            pop ar0
1037 C0E0       871            push acc
1039 743A       871            mov a, #':'
103B 12007E     871            lcall ?WriteData
103E D0E0       871            pop acc
1040 85393F     871            mov x+0, run_time_sec+0 
1043 754000     871            mov x+1, #0
1046 754100     871            mov x+2, #0 
1049 754200     871            mov x+3, #0
104C 1200DC     871     lcall hex2bcd
104F C000       871            push ar0
1051 A849       871            mov r0, bcd
1053 1200C6     871            lcall ?Display_BCD
1056 D000       871            pop ar0
1058            871   
1058            871     
1058            871    
1058            871   ;display the current stage and current temperature
1058 E53A       872            mov a, state_time 
105A C3         873            clr c
105B 9534       874            subb a, soak_seconds 
105D            875   ;        jnc time_not_equal
105D 4008       876            jc      State11_Loop
105F            877     
105F 755A0C     878     mov state, #12 ;if time is equal set state to 12
1062 E4         879     clr a
1063 F53A       880            mov state_time, a       ; reset state time to 0 for next state 
1065            881     
1065 D206       882     setb short_beep_flag
1067            883     ;--------------------------------------------------------------------;
1067            884     ; A short beep
1067            885     ;--------------------------------------------------------------------;
1067            886   ;time_not_equal:
1067            887     ;compare temp                                                                                                  pattern to check temp:                                                                 ____     
1067            888   ;  mov a, current_temp ;                                                                                                                                                                                         ____      /    \____/
1067            889   ;        clr c                                                           ;                                                                                                                                                                                                /    \____/     
1067            890   ;        subb a, soak_temp       ;                                                                                                               ____/
1067            891   ;        jnc temp_too_low                
1067            892   ;        sjmp State11_done:      ;                                                                       checks every temperature twice for the right one
1067            893                                                                                                                                                            
1067            894   ;temp_not_low:           
1067            895   ;        inc current_temp
1067            896   ;  inc current temp
1067            897   ;        mov a, current_temp 
1067            898   ;        clr c
1067            899   ;        subb a, soak_temp 
1067            900   ;        jnc temp_too_high
1067            901   ;  sjmp State11_done:
1067            902   
1067            903   ;temp_too_high:  
1067            904   ;  dec current_temp
1067            905   
1067            906   State11_Loop:
1067 0208FF     907     ljmp forever
106A            908     
106A            909                    
106A            910   ; Ramp to Reflow Stage, compare current_temp with reflow_temp            
106A            911   state12:
106A            912                    ; 12 state number    13 next state
106A E55A       912       mov a, state
106C B40C02     912       cjne a, #12, skipstate206
106F 8003       912            sjmp no_skip_state206
1071            912   skipstate206:
1071 021161     912       ljmp state13
1074            912   no_skip_state206:
1074            913            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1074 208020     913            jb CYCLE_BUTTON, no_button_pressed207
1077 C002       913            push AR2
1079 7A32       913            mov R2, #50
107B 120039     913            lcall ?Wait_Milli_Seconds
107E D002       913            pop AR2
1080 208014     913            jb CYCLE_BUTTON, no_button_pressed207
1083 3080FD     913            jnb CYCLE_BUTTON, $
1086            913            
1086 755A11     913            mov state, #17
1089 7401       913            mov a, #0x01
108B 120083     913            lcall ?WriteCommand
108E C002       913            push AR2
1090 7A02       913            mov R2, #2
1092 120039     913            lcall ?Wait_Milli_Seconds
1095 D002       913            pop AR2
1097            913   no_button_pressed207:
1097            913   
1097 C202       914     clr pwm_on
1099 D2B7       915     setb SSR_OUT   ;100% power on
109B            916            ; MAC (Ramp2Reflow:    Constant string for the first line on LCD           current_temp: Temperature                    run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
109B C0E0       916            push acc
109D 7401       916            mov a, #1
109F 14         916            dec a
10A0 1200C1     916            lcall ?Set_Cursor_1 ; Select column and row
10A3 D0E0       916            pop acc
10A5 C083       916            push dph
10A7 C082       916            push dpl
10A9 C0E0       916            push acc
10AB 900537     916            mov dptr, #Ramp2Reflow
10AE 1200B4     916            lcall ?Send_Constant_String
10B1 D0E0       916            pop acc
10B3 D082       916            pop dpl
10B5 D083       916            pop dph
10B7            916     
10B7 C0E0       916            push acc
10B9 7401       916            mov a, #1
10BB 14         916            dec a
10BC 1200BF     916            lcall ?Set_Cursor_2 ; Select column and row
10BF D0E0       916            pop acc
10C1            916            ;show temperture
10C1 855B3F     916            mov x+0, current_temp+0 
10C4 754000     916            mov x+1, #0
10C7 754100     916            mov x+2, #0 
10CA 754200     916            mov x+3, #0
10CD 1200DC     916            lcall hex2bcd
10D0 C000       916            push ar0
10D2 C0E0       916            push acc
10D4 7420       916            mov a, #' '
10D6 12007E     916            lcall ?WriteData
10D9 A84A       916            mov r0, bcd+1
10DB E8         916            mov a, r0
10DC 540F       916            anl a, #0fh
10DE 4430       916            orl a, #30h
10E0 12007E     916            lcall ?WriteData
10E3 D0E0       916            pop acc
10E5 D000       916            pop ar0
10E7 C000       916            push ar0
10E9 A849       916            mov r0, bcd
10EB 1200C6     916            lcall ?Display_BCD
10EE D000       916            pop ar0
10F0            916   
10F0 C0E0       916            push acc
10F2 7405       916            mov a, #5
10F4 14         916            dec a
10F5 1200BF     916            lcall ?Set_Cursor_2 ; Select column and row
10F8 D0E0       916            pop acc
10FA C083       916            push dph
10FC C082       916            push dpl
10FE C0E0       916            push acc
1100 9005EF     916            mov dptr, #Cels
1103 1200B4     916            lcall ?Send_Constant_String
1106 D0E0       916            pop acc
1108 D082       916            pop dpl
110A D083       916            pop dph
110C            916   
110C C0E0       916            push acc
110E 740B       916            mov a, #11
1110 14         916            dec a
1111 1200BF     916            lcall ?Set_Cursor_2 ; Select column and row
1114 D0E0       916            pop acc
1116 85383F     916            mov x+0, run_time_min+0 
1119 754000     916            mov x+1, #0
111C 754100     916            mov x+2, #0 
111F 754200     916            mov x+3, #0
1122 1200DC     916     lcall hex2bcd
1125 C000       916            push ar0
1127 A849       916            mov r0, bcd
1129 1200C6     916            lcall ?Display_BCD
112C D000       916            pop ar0
112E C0E0       916            push acc
1130 743A       916            mov a, #':'
1132 12007E     916            lcall ?WriteData
1135 D0E0       916            pop acc
1137 85393F     916            mov x+0, run_time_sec+0 
113A 754000     916            mov x+1, #0
113D 754100     916            mov x+2, #0 
1140 754200     916            mov x+3, #0
1143 1200DC     916     lcall hex2bcd
1146 C000       916            push ar0
1148 A849       916            mov r0, bcd
114A 1200C6     916            lcall ?Display_BCD
114D D000       916            pop ar0
114F            916   
114F            916     
114F            916            ;display the current, temperature and running time
114F E537       917     mov a, reflow_temp
1151 C3         918     clr c
1152 955B       919     subb a, current_temp
1154 5008       920     jnc State12Loop
1156            921     
1156 755A0D     922            mov state, #13
1159 D206       923     setb short_beep_flag
115B E4         924     clr a
115C F53A       925            mov state_time, a       ; reset state time to 0 for next state 
115E            926     
115E            927   State12Loop:
115E 0208FF     928     ljmp forever
1161            929   
1161            930   ; Reflow stage, compare reflow_seconds to current time, move to cooling stage when complete (Still need beep code)
1161            931   state13:
1161            932                    ; 13 state number    14 next state
1161 E55A       932       mov a, state
1163 B40D02     932       cjne a, #13, skipstate226
1166 8003       932            sjmp no_skip_state226
1168            932   skipstate226:
1168 0212B9     932       ljmp state14
116B            932   no_skip_state226:
116B            933            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
116B 208020     933            jb CYCLE_BUTTON, no_button_pressed227
116E C002       933            push AR2
1170 7A32       933            mov R2, #50
1172 120039     933            lcall ?Wait_Milli_Seconds
1175 D002       933            pop AR2
1177 208014     933            jb CYCLE_BUTTON, no_button_pressed227
117A 3080FD     933            jnb CYCLE_BUTTON, $
117D            933            
117D 755A11     933            mov state, #17
1180 7401       933            mov a, #0x01
1182 120083     933            lcall ?WriteCommand
1185 C002       933            push AR2
1187 7A02       933            mov R2, #2
1189 120039     933            lcall ?Wait_Milli_Seconds
118C D002       933            pop AR2
118E            933   no_button_pressed227:
118E            933   
118E            933   
118E D202       934     setb pwm_on ; Set PWM to 25% power
1190            935            ; MAC (Reflow:    Constant string for the first line on LCD           current_temp: Temperature                         run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
1190 C0E0       935            push acc
1192 7401       935            mov a, #1
1194 14         935            dec a
1195 1200C1     935            lcall ?Set_Cursor_1 ; Select column and row
1198 D0E0       935            pop acc
119A C083       935            push dph
119C C082       935            push dpl
119E C0E0       935            push acc
11A0 90056A     935            mov dptr, #Reflow
11A3 1200B4     935            lcall ?Send_Constant_String
11A6 D0E0       935            pop acc
11A8 D082       935            pop dpl
11AA D083       935            pop dph
11AC            935     
11AC C0E0       935            push acc
11AE 7401       935            mov a, #1
11B0 14         935            dec a
11B1 1200BF     935            lcall ?Set_Cursor_2 ; Select column and row
11B4 D0E0       935            pop acc         ;show temperture
11B6 855B3F     935            mov x+0, current_temp+0 
11B9 754000     935            mov x+1, #0
11BC 754100     935            mov x+2, #0 
11BF 754200     935            mov x+3, #0
11C2 1200DC     935            lcall hex2bcd
11C5 C000       935            push ar0
11C7 C0E0       935            push acc
11C9 7420       935            mov a, #' '
11CB 12007E     935            lcall ?WriteData
11CE A84A       935            mov r0, bcd+1
11D0 E8         935            mov a, r0
11D1 540F       935            anl a, #0fh
11D3 4430       935            orl a, #30h
11D5 12007E     935            lcall ?WriteData
11D8 D0E0       935            pop acc
11DA D000       935            pop ar0
11DC C000       935            push ar0
11DE A849       935            mov r0, bcd
11E0 1200C6     935            lcall ?Display_BCD
11E3 D000       935            pop ar0
11E5            935   
11E5 C0E0       935            push acc
11E7 7405       935            mov a, #5
11E9 14         935            dec a
11EA 1200BF     935            lcall ?Set_Cursor_2 ; Select column and row
11ED D0E0       935            pop acc
11EF C083       935            push dph
11F1 C082       935            push dpl
11F3 C0E0       935            push acc
11F5 9005EF     935            mov dptr, #Cels
11F8 1200B4     935            lcall ?Send_Constant_String
11FB D0E0       935            pop acc
11FD D082       935            pop dpl
11FF D083       935            pop dph
1201            935   
1201 C0E0       935            push acc
1203 740B       935            mov a, #11
1205 14         935            dec a
1206 1200BF     935            lcall ?Set_Cursor_2 ; Select column and row
1209 D0E0       935            pop acc
120B 85383F     935            mov x+0, run_time_min+0 
120E 754000     935            mov x+1, #0
1211 754100     935            mov x+2, #0 
1214 754200     935            mov x+3, #0
1217 1200DC     935     lcall hex2bcd
121A C000       935            push ar0
121C A849       935            mov r0, bcd
121E 1200C6     935            lcall ?Display_BCD
1221 D000       935            pop ar0
1223 C0E0       935            push acc
1225 743A       935            mov a, #':'
1227 12007E     935            lcall ?WriteData
122A D0E0       935            pop acc
122C 85393F     935            mov x+0, run_time_sec+0 
122F 754000     935            mov x+1, #0
1232 754100     935            mov x+2, #0 
1235 754200     935            mov x+3, #0
1238 1200DC     935     lcall hex2bcd
123B C000       935            push ar0
123D A849       935            mov r0, bcd
123F 1200C6     935            lcall ?Display_BCD
1242 D000       935            pop ar0
1244            935   
1244            935     
1244            935    
1244            935   ;display the current stage and current temperature
1244            936     
1244            937     ;compare the temperature with 235 degree for safety consideration
1244 E55B       938     mov a, current_temp
1246 C3         939     clr c
1247 94EB       940     subb a, #235
1249 405C       941     jc no_Burn_Warning                                                     ;if current temperature - 235 <= 0 (c=1), no warning
124B C0E0       942            push acc
124D 7401       942            mov a, #1
124F 14         942            dec a
1250 1200C1     942            lcall ?Set_Cursor_1 ; Select column and row
1253 D0E0       942            pop acc
1255 C083       942            push dph
1257 C082       942            push dpl
1259 C0E0       942            push acc
125B 9005F6     942            mov dptr, #BurnMsg
125E 1200B4     942            lcall ?Send_Constant_String
1261 D0E0       942            pop acc
1263 D082       942            pop dpl
1265 D083       942            pop dph
1267 C0E0       942            push acc
1269 7401       942            mov a, #1
126B 14         942            dec a
126C 1200BF     942            lcall ?Set_Cursor_2 ; Select column and row
126F D0E0       942            pop acc
1271 C083       942            push dph
1273 C082       942            push dpl
1275 C0E0       942            push acc
1277 900607     942            mov dptr, #StopMsg
127A 1200B4     942            lcall ?Send_Constant_String
127D D0E0       942            pop acc
127F D082       942            pop dpl
1281 D083       942            pop dph                 ;displaying warning message and ask the user to press STOP button to stop reflow process
1283 C002       943            push AR2
1285 7AFA       943            mov R2, #250
1287 120039     943            lcall ?Wait_Milli_Seconds
128A D002       943            pop AR2
128C C002       944            push AR2
128E 7AFA       944            mov R2, #250
1290 120039     944            lcall ?Wait_Milli_Seconds
1293 D002       944            pop AR2
1295 C002       945            push AR2
1297 7AFA       945            mov R2, #250
1299 120039     945            lcall ?Wait_Milli_Seconds
129C D002       945            pop AR2
129E C002       946            push AR2
12A0 7AFA       946            mov R2, #250
12A2 120039     946            lcall ?Wait_Milli_Seconds
12A5 D002       946            pop AR2
12A7            947     
12A7            948   no_Burn_Warning: 
12A7 E536       949     mov a, reflow_seconds
12A9 C3         950     clr c
12AA 953A       951     subb a, state_time 
12AC 5008       952     jnc state13Loop ; Compare if time elapsed = reflow time
12AE 755A0E     953     mov state, #14         ; Reflow done, move to cooling
12B1 E4         954     clr a
12B2 F53A       955     mov state_time, a ; Reset state time variable
12B4 D207       956     setb long_beep_flag
12B6            957   state13Loop:
12B6 0208FF     958            ljmp forever
12B9            959   
12B9            960   ; Cooling stage, power is set to 0, finish and sound multiple beeps when temperature is below 60
12B9            961   state14:
12B9            962                    ; 14 state number    15 next state
12B9 E55A       962       mov a, state
12BB B40E02     962       cjne a, #14, skipstate255
12BE 8003       962            sjmp no_skip_state255
12C0            962   skipstate255:
12C0 0213AF     962       ljmp state15
12C3            962   no_skip_state255:
12C3            963            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
12C3 208020     963            jb CYCLE_BUTTON, no_button_pressed256
12C6 C002       963            push AR2
12C8 7A32       963            mov R2, #50
12CA 120039     963            lcall ?Wait_Milli_Seconds
12CD D002       963            pop AR2
12CF 208014     963            jb CYCLE_BUTTON, no_button_pressed256
12D2 3080FD     963            jnb CYCLE_BUTTON, $
12D5            963            
12D5 755A11     963            mov state, #17
12D8 7401       963            mov a, #0x01
12DA 120083     963            lcall ?WriteCommand
12DD C002       963            push AR2
12DF 7A02       963            mov R2, #2
12E1 120039     963            lcall ?Wait_Milli_Seconds
12E4 D002       963            pop AR2
12E6            963   no_button_pressed256:
12E6            963   
12E6 C202       964       clr pwm_on
12E8 C203       964       clr pwm_high
12EA C2B7       964       clr SSR_OUT
12EC            964   
12EC            965            ; MAC (Cooling:    Constant string for the first line on LCD           current_temp: Temperature                        run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
12EC C0E0       965            push acc
12EE 7401       965            mov a, #1
12F0 14         965            dec a
12F1 1200C1     965            lcall ?Set_Cursor_1 ; Select column and row
12F4 D0E0       965            pop acc
12F6 C083       965            push dph
12F8 C082       965            push dpl
12FA C0E0       965            push acc
12FC 90057B     965            mov dptr, #Cooling
12FF 1200B4     965            lcall ?Send_Constant_String
1302 D0E0       965            pop acc
1304 D082       965            pop dpl
1306 D083       965            pop dph
1308            965     
1308 C0E0       965            push acc
130A 7401       965            mov a, #1
130C 14         965            dec a
130D 1200BF     965            lcall ?Set_Cursor_2 ; Select column and row
1310 D0E0       965            pop acc         ;show temperture
1312 855B3F     965            mov x+0, current_temp+0 
1315 754000     965            mov x+1, #0
1318 754100     965            mov x+2, #0 
131B 754200     965            mov x+3, #0
131E 1200DC     965            lcall hex2bcd
1321 C000       965            push ar0
1323 C0E0       965            push acc
1325 7420       965            mov a, #' '
1327 12007E     965            lcall ?WriteData
132A A84A       965            mov r0, bcd+1
132C E8         965            mov a, r0
132D 540F       965            anl a, #0fh
132F 4430       965            orl a, #30h
1331 12007E     965            lcall ?WriteData
1334 D0E0       965            pop acc
1336 D000       965            pop ar0
1338 C000       965            push ar0
133A A849       965            mov r0, bcd
133C 1200C6     965            lcall ?Display_BCD
133F D000       965            pop ar0
1341            965   
1341 C0E0       965            push acc
1343 7405       965            mov a, #5
1345 14         965            dec a
1346 1200BF     965            lcall ?Set_Cursor_2 ; Select column and row
1349 D0E0       965            pop acc
134B C083       965            push dph
134D C082       965            push dpl
134F C0E0       965            push acc
1351 9005EF     965            mov dptr, #Cels
1354 1200B4     965            lcall ?Send_Constant_String
1357 D0E0       965            pop acc
1359 D082       965            pop dpl
135B D083       965            pop dph
135D            965   
135D C0E0       965            push acc
135F 740B       965            mov a, #11
1361 14         965            dec a
1362 1200BF     965            lcall ?Set_Cursor_2 ; Select column and row
1365 D0E0       965            pop acc
1367 85383F     965            mov x+0, run_time_min+0 
136A 754000     965            mov x+1, #0
136D 754100     965            mov x+2, #0 
1370 754200     965            mov x+3, #0
1373 1200DC     965     lcall hex2bcd
1376 C000       965            push ar0
1378 A849       965            mov r0, bcd
137A 1200C6     965            lcall ?Display_BCD
137D D000       965            pop ar0
137F C0E0       965            push acc
1381 743A       965            mov a, #':'
1383 12007E     965            lcall ?WriteData
1386 D0E0       965            pop acc
1388 85393F     965            mov x+0, run_time_sec+0 
138B 754000     965            mov x+1, #0
138E 754100     965            mov x+2, #0 
1391 754200     965            mov x+3, #0
1394 1200DC     965     lcall hex2bcd
1397 C000       965            push ar0
1399 A849       965            mov r0, bcd
139B 1200C6     965            lcall ?Display_BCD
139E D000       965            pop ar0
13A0            965   
13A0            965     
13A0            965    
13A0            965   
13A0 E55B       966     mov a, current_temp
13A2 C3         967     clr c
13A3 943C       968     subb a, #60
13A5 5005       969     jnc state14loop ; If more than 60 degrees, not safe to touch yet
13A7            970     
13A7            971   SafeBeep: ;If temp is safe then beeeeepppppppppppp
13A7 D208       972     setb six_beep_flag
13A9 755A0F     973     mov state, #15 ; Go to done state
13AC            974   state14loop:
13AC 0208FF     975            ljmp forever
13AF            976     
13AF            977   ; Cooling completed state, accessed when temperature has cooled down to below 60C
13AF            978   state15:   
13AF            979                    ; 15 state number    16 next state
13AF E55A       979       mov a, state
13B1 B40F02     979       cjne a, #15, skipstate276
13B4 8003       979            sjmp no_skip_state276
13B6            979   skipstate276:
13B6 021417     979       ljmp state16
13B9            979   no_skip_state276:
13B9 C0E0       980            push acc
13BB 7401       980            mov a, #1
13BD 14         980            dec a
13BE 1200C1     980            lcall ?Set_Cursor_1 ; Select column and row
13C1 D0E0       980            pop acc
13C3 C083       980            push dph
13C5 C082       980            push dpl
13C7 C0E0       980            push acc
13C9 90058C     980            mov dptr, #CompleteMsg
13CC 1200B4     980            lcall ?Send_Constant_String
13CF D0E0       980            pop acc
13D1 D082       980            pop dpl
13D3 D083       980            pop dph
13D5 C0E0       980            push acc
13D7 7401       980            mov a, #1
13D9 14         980            dec a
13DA 1200BF     980            lcall ?Set_Cursor_2 ; Select column and row
13DD D0E0       980            pop acc
13DF            980   
13DF C083       980            push dph
13E1 C082       980            push dpl
13E3 C0E0       980            push acc
13E5 9005BF     980            mov dptr, #ConfirmMsg
13E8 1200B4     980            lcall ?Send_Constant_String
13EB D0E0       980            pop acc
13ED D082       980            pop dpl
13EF D083       980            pop dph
13F1            980   
13F1            981            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
13F1 208420     981            jb DEC_BUTTON, no_button_pressed282
13F4 C002       981            push AR2
13F6 7A32       981            mov R2, #50
13F8 120039     981            lcall ?Wait_Milli_Seconds
13FB D002       981            pop AR2
13FD 208414     981            jb DEC_BUTTON, no_button_pressed282
1400 3084FD     981            jnb DEC_BUTTON, $
1403            981            
1403 755A00     981            mov state, #0
1406 7401       981            mov a, #0x01
1408 120083     981            lcall ?WriteCommand
140B C002       981            push AR2
140D 7A02       981            mov R2, #2
140F 120039     981            lcall ?Wait_Milli_Seconds
1412 D002       981            pop AR2
1414            981   no_button_pressed282:
1414            981   
1414 0208FF     982     ljmp forever
1417            983     
1417            984   state16:                         ;display error message
1417            985                    ; 16 state number    17 next state
1417 E55A       985       mov a, state
1419 B41002     985       cjne a, #16, skipstate286
141C 8003       985            sjmp no_skip_state286
141E            985   skipstate286:
141E 021485     985       ljmp state17
1421            985   no_skip_state286:
1421 C202       986       clr pwm_on
1423 C203       986       clr pwm_high
1425 C2B7       986       clr SSR_OUT
1427 C0E0       987            push acc
1429 7401       987            mov a, #1
142B 14         987            dec a
142C 1200C1     987            lcall ?Set_Cursor_1 ; Select column and row
142F D0E0       987            pop acc
1431 C083       987            push dph
1433 C082       987            push dpl
1435 C0E0       987            push acc
1437 90059D     987            mov dptr, #Lessthan50ErrorMsg
143A 1200B4     987            lcall ?Send_Constant_String
143D D0E0       987            pop acc
143F D082       987            pop dpl
1441 D083       987            pop dph
1443 C0E0       987            push acc
1445 7401       987            mov a, #1
1447 14         987            dec a
1448 1200BF     987            lcall ?Set_Cursor_2 ; Select column and row
144B D0E0       987            pop acc
144D C083       987            push dph
144F C082       987            push dpl
1451 C0E0       987            push acc
1453 9005BF     987            mov dptr, #ConfirmMsg
1456 1200B4     987            lcall ?Send_Constant_String
1459 D0E0       987            pop acc
145B D082       987            pop dpl
145D D083       987            pop dph         
145F            988            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
145F 208420     988            jb DEC_BUTTON, no_button_pressed293
1462 C002       988            push AR2
1464 7A32       988            mov R2, #50
1466 120039     988            lcall ?Wait_Milli_Seconds
1469 D002       988            pop AR2
146B 208414     988            jb DEC_BUTTON, no_button_pressed293
146E 3084FD     988            jnb DEC_BUTTON, $
1471            988            
1471 755A00     988            mov state, #0
1474 7401       988            mov a, #0x01
1476 120083     988            lcall ?WriteCommand
1479 C002       988            push AR2
147B 7A02       988            mov R2, #2
147D 120039     988            lcall ?Wait_Milli_Seconds
1480 D002       988            pop AR2
1482            988   no_button_pressed293:
1482            988   
1482 0208FF     989     ljmp forever
1485            990     
1485            991   ; Force Quit state, accessed when STOP button is pressed during any reflow stage
1485            992   state17:
1485 C202       993       clr pwm_on
1487 C203       993       clr pwm_high
1489 C2B7       993       clr SSR_OUT
148B            993   
148B C0E0       994            push acc
148D 7401       994            mov a, #1
148F 14         994            dec a
1490 1200C1     994            lcall ?Set_Cursor_1 ; Select column and row
1493 D0E0       994            pop acc
1495 C083       994            push dph
1497 C082       994            push dpl
1499 C0E0       994            push acc
149B 9005AE     994            mov dptr, #AbortMsg
149E 1200B4     994            lcall ?Send_Constant_String
14A1 D0E0       994            pop acc
14A3 D082       994            pop dpl
14A5 D083       994            pop dph
14A7 C0E0       994            push acc
14A9 7401       994            mov a, #1
14AB 14         994            dec a
14AC 1200BF     994            lcall ?Set_Cursor_2 ; Select column and row
14AF D0E0       994            pop acc
14B1 C083       994            push dph
14B3 C082       994            push dpl
14B5 C0E0       994            push acc
14B7 9005BF     994            mov dptr, #ConfirmMsg
14BA 1200B4     994            lcall ?Send_Constant_String
14BD D0E0       994            pop acc
14BF D082       994            pop dpl
14C1 D083       994            pop dph
14C3            995            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
14C3 208420     995            jb DEC_BUTTON, no_button_pressed303
14C6 C002       995            push AR2
14C8 7A32       995            mov R2, #50
14CA 120039     995            lcall ?Wait_Milli_Seconds
14CD D002       995            pop AR2
14CF 208414     995            jb DEC_BUTTON, no_button_pressed303
14D2 3084FD     995            jnb DEC_BUTTON, $
14D5            995            
14D5 755A00     995            mov state, #0
14D8 7401       995            mov a, #0x01
14DA 120083     995            lcall ?WriteCommand
14DD C002       995            push AR2
14DF 7A02       995            mov R2, #2
14E1 120039     995            lcall ?Wait_Milli_Seconds
14E4 D002       995            pop AR2
14E6            995   no_button_pressed303:
14E6            995   
14E6 0208FF     996     ljmp forever
14E9            997            
14E9            998   
14E9            999   
14E9           1000   end ;-;
