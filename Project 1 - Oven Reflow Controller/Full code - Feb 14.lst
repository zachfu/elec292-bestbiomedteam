                  2   $LIST
0000              4   ; Reset vector
0000              5   org 0000H
0000 0208F2       6      ljmp MainProgram
0003              7   
0003              8   ; External interrupt 0 vector (not used in this code)
0003              9   org 0x0003
0003 32          10            reti
0004             11   
0004             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 02064D      14            ljmp Timer0_ISR
000E             15            
000E             16   ; External interrupt 1 vector (not used in this code)
0013             17   org 0x0013
0013 32          18            reti
0014             19   
0014             20   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             21   org 0x001B
001B 32          22            reti
001C             23   
001C             24   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             25   org 0x0023 
0023 32          26            reti
0024             27            
0024             28   ; Timer/Counter 2 overflow interrupt vector
002B             29   org 0x002B
002B 02068C      30            ljmp Timer2_ISR
002E             31            
002E             32   ;++++++++++++++++++ CONSTANTS ++++++++++++++++++++
002E             33   VLED     EQU 207
002E             34   ;++++++++++++++++++ TIMER & BAUDRATE  ++++++++++++
002E             35   CLK              EQU 22118400                                                     ; Microcontroller system crystal frequency in Hz
002E             36   TIMER0_RATE        EQU 4096                                                               ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             37   TIMER0_RELOAD      EQU ((65536-(CLK/TIMER0_RATE)))
002E             38   TIMER2_RATE        EQU 1000                                                               ; 1000Hz, for a timer tick of 1ms
002E             39   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
002E             40   BAUD                                     EQU 115200
002E             41   T1LOAD                                   EQU (0x100-(CLK/(16*BAUD)))
002E             42   
002E             43   SAMPLE_INTERVAL EQU 250                                                                  ; Millisecond Interval when sampling (KEEP LESS THAN 256)
002E             44   
002E             45   PWM_PERCENT                      EQU 20
002E             46   PWM_RELOAD_HIGH EQU (255*PWM_PERCENT/100)
002E             47   PWM_RELOAD_LOW   EQU     (255 - PWM_RELOAD_HIGH)
002E             48   
002E             49   SHORT_BEEP_LENGTH        EQU 4   ; Length of short beep (in 100s of ms)
002E             50   LONG_BEEP_LENGTH         EQU 10          ; Length of long beep   (in 100s of ms)
002E             51   SIX_BEEP_LENGTH          EQU 12  ; Total length of six beep sequence (in 100s of ms)(keep at 12 until further notice)
002E             52   
002E             53   ;------------------------------------------------
002E             54   
002E             55   ;++++++++++++++++++ SPI PINS ++++++++++++++++
002E             56   CE_ADC  EQU P2.0
002E             57   MY_MOSI EQU P2.1
002E             58   MY_MISO EQU P2.2
002E             59   MY_SCLK EQU P2.3
002E             60   ;--------------------------------------------
002E             61   
002E             62   ;++++++++++++++++++ LCD PINS ++++++++++++++++
002E             63   LCD_RS equ P1.2
002E             64   LCD_RW equ P1.3
002E             65   LCD_E  equ P1.4
002E             66   LCD_D4 equ P3.2
002E             67   LCD_D5 equ P3.3
002E             68   LCD_D6 equ P3.4
002E             69   LCD_D7 equ P3.5
002E             70   ;--------------------------------------------
002E             71   
002E             72   GREEN    equ P2.4
002E             73   YELLOW   equ P2.5
002E             74   RED              equ     P2.6
002E             75   BLUE     equ P2.7
002E             76   
002E             77   SSR_OUT              equ P3.7    ; Pin connected to SSR
002E             78   BOOT_BUTTON     equ P4.5
002E             79   PWM_BUTTON      equ P0.3
002E             80   SOUND_OUT       equ P1.0         ; Pin connected to speaker
002E             81   
002E             82   ;++++++++++++++++++ CONTROL BUTTONS++++++++++
002E             83   CYCLE_BUTTON        equ P0.0     ; Button to change cycles
002E             84   INC_BUTTON                                       equ P0.2
002E             85   DEC_BUTTON          equ P0.4
002E             86   ;--------------------------------------------
002E             87   
                218   $LIST
                586   $LIST
                 96   $LIST
0418            111   $LIST
                 93   $LIST
0418             95   
0418             96            
0418             97   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             98   DSEG at 0x30
0030             99   
0030            100            Count1ms:                                       ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032            101            Count_Sample:                   ds 1 ; Sample is taken every 250ms
0033            102            Count_PWM:                              ds 1 ; PWM cycle runs every 255ms
0034            103            soak_seconds:                   ds 1
0035            104            soak_temp:                              ds 1
0036            105            reflow_seconds:                 ds 1
0037            106            reflow_temp:                    ds 1
0038            107     run_time_min:                          ds 1
0039            108            run_time_sec:                   ds 1
003A            109            state_time:                             ds 1
003B            110     Count100ms:     ds 1     ; Incremented every 1ms when Timer 2 ISR is triggered, used to determine when 0.1s has passed
003C            111            Short_Beep_Counter: ds 1
003D            112            Long_Beep_Counter:  ds 1
003E            113            Six_Beep_Counter:         ds 1 ;
003F            114            
003F            115   ;+++++++++ 32 bit Calculation variables +++++++++++      
003F            116            x:                                      ds 4
0043            117            y:                                                      ds 4
0047            118            Result:                                         ds 2
0049            119            bcd:                                                    ds 5
004E            120            x_lm335:                                        ds 4
0052            121            Vcc:                                                    ds 4
0056            122            samplesum:                              ds 4
005A            123   ;--------------------------------------------
005A            124            state:                                          ds 1
005B            125            current_temp:                   ds 4
005F            126   
005F            127            
005F            128   
0000            129   BSEG
0000            130            mf:                                                     dbit 1
0001            131            one_min_flag:           dbit 1  ; Set to 1 after first 60 seconds of reflow cycle
0002            132            pwm_on:                                         dbit 1  ; Set to 1 to turn PWM on
0003            133            pwm_high:                               dbit 1  ; Flag for when PWM output is currently high
0004            134     settings_modified_flag:                dbit 1  ; Flag for when parameters have been changed
0005            135            sample_flag:                    dbit 1  ; Flag turned on every SAMPLE_INTERVAL to take a reading
0006            136     short_beep_flag:       dbit 1
0007            137            long_beep_flag:                 dbit 1
0008            138            six_beep_flag:          dbit 1
0009            139            led_flag:               dbit 1
000A            140   
0418            141   CSEG
0418            142   ;                                                                        1234567890123456    <- This helps determine the location of the Strings
0418 20526566   143     StartMessage:                                  db ' Reflow Control ', 0
     6C6F7720
     436F6E74
     726F6C20
     00
0429 53746172   144     StartMessage2:                         db 'Start / Settings', 0
     74202F20
     53657474
     696E6773
     00
043A 536F616B   145            SoakTime_Message:               db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
044B 536F616B   146            SoakTemp_Message:               db 'Soak Temperature', 0
     2054656D
     70657261
     74757265
     00
045C 5265666C   147            ReflowTime_Message:     db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
046D 5265666C   148            ReflowTemp_Message:     db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
047E 53746172   149            Start_Message:                          db 'Start Process?  ', 0
     74205072
     6F636573
     733F2020
     00
048F 20202D20   150     Y_N_Message:                                   db '  - No | + Yes  ', 0
     4E6F207C
     202B2059
     65732020
     00
04A0 20436F6F   151     TempTooHighMsg:                                db ' Cooling...     ', 0
     6C696E67
     2E2E2E20
     20202020
     00
04B1 20506C65   152     TempTooHighMsg2:      db ' Please Wait    ', 0
     61736520
     57616974
     20202020
     00
04C2 50574D20   153            PWM_ON_MESSAGE:                 db 'PWM IS ON       ', 0
     4953204F
     4E202020
     20202020
     00
04D3 50574D20   154            PWM_OFF_MESSAGE:                db 'PWM IS OFF      ', 0
     4953204F
     46462020
     20202020
     00
04E4 20202044   155     SaveToFlash_Msg:               db '   Data Saved   ', 0
     61746120
     53617665
     64202020
     00
04F5 50726F63   156            Stopped:                                db 'Process Stopped ', 0
     65737320
     53746F70
     70656420
     00
0506 20202020   157            BlankMsg:                               db '                ', 0
     20202020
     20202020
     20202020
     00
0517 2D205265   158            ChooseChangeValueMsg:   db '- Reselect Vals     ', 0
     73656C65
     63742056
     616C7309
     00
0528 2B095374   159            ChooseStartMsg:                         db '+   Start Reflow', 0
     61727420
     5265666C
     6F7700
0537 52616D70   160            Ramp2Reflow:                    db 'Ramp to Reflow  ', 0
     20746F20
     5265666C
     6F772020
     00
0548 52616D70   161            Ramp2Soak:                              db 'Ramp to Soak    ', 0
     20746F20
     536F616B
     20202020
     00
0559 50726568   162            Soak:                                   db 'Preheat / Soak  ', 0
     65617420
     2F20536F
     616B2020
     00
056A 5265666C   163            Reflow:                                         db 'Reflow          ', 0
     6F772020
     20202020
     20202020
     00
057B 436F6F6C   164            Cooling:                                db 'Cooling         ', 0
     696E6720
     20202020
     20202020
     00
058C 5265666C   165            CompleteMsg:                    db 'Reflow Complete!', 0
     6F772043
     6F6D706C
     65746521
     00
059D 43686563   166            Lessthan50ErrorMsg:     db 'Check T-Couple! ', 0
     6B20542D
     436F7570
     6C652120
     00
05AE 50726F63   167            AbortMsg:                               db 'Process Aborted!', 0
     65737320
     41626F72
     74656421
     00
05BF 2D20436F   168            ConfirmMsg:                     db '- Continue?     ', 0
     6E74696E
     75653F20
     20202020
     00
05D0 49542057   169            TestMessage:                    db 'IT WORKS?!!!!!!!', 0
     4F524B53
     3F212121
     21212121
     00
05E1 54656D70   170            Temp:                                   db 'Temp:', 0           
     3A00
05E7 54696D65   171            Time:                                   db 'Time:', 0
     3A00
05ED 0A00       172            NEWLINE:                                db '\n', 0  
05EF 20DF4300   173     Cels: db ' ',11011111b, 'C',0
05F3 207300     174     Secs:                  db ' s',0
05F6 50434220   175            BurnMsg:                                        db 'PCB Burn Warning', 0
     4275726E
     20576172
     6E696E67
     00
0607 20204162   176     StopMsg:                                       db '  Aborting!...  ', 0
     6F727469
     6E67212E
     2E2E2020
     00
0618 546F6F20   177     Too_Long:                                      db 'Too Long!       ', 0
     4C6F6E67
     21202020
     20202020
     00
0629 546F6F20   178     Too_High:                              db 'Too High!       ', 0
     48696768
     21202020
     20202020
     00
063A            179     
063A            180     ;---------------------------------;
063A            181   ; Routine to initialize the ISR   ;
063A            182   ; for timer 0                     ;
063A            183   ;---------------------------------;
063A            184   Timer0_Init:
063A E589       185            mov a, TMOD
063C 54F0       186            anl a, #0xf0                                            ; Clear the bits for timer 0
063E 4401       187            orl a, #0x01                                            ; Configure timer 0 as 16-timer
0640 F589       188            mov TMOD, a
0642 758CEA     189            mov TH0, #high(TIMER0_RELOAD)
0645 758AE8     190            mov TL0, #low(TIMER0_RELOAD)
0648            191            ; Enable the timer and interrupts
0648 D2A9       192            setb ET0                                                        ; Enable timer 0 interrupt
064A C28C       193            clr TR0                                                         ; Disable timer 0 by default
064C 22         194   ret
064D            195            
064D            196   ;---------------------------------;
064D            197   ; ISR for timer 0.  Set to execute;
064D            198   ; every 1/4096Hz to generate a    ;
064D            199   ; 2048 Hz square wave at pin P3.6 ;
064D            200   ;---------------------------------;
064D            201   Timer0_ISR:
064D            202            ;clr TF0  ; According to the data sheet this is done for us already.
064D            203            ; In mode 1 we need to reload the timer.
064D C28C       204            clr TR0
064F 758CEA     205            mov TH0, #high(TIMER0_RELOAD)
0652 758AE8     206            mov TL0, #low(TIMER0_RELOAD)
0655 D28C       207            setb TR0
0657 B290       208            cpl SOUND_OUT ; Connect speaker to P3.6!
0659 32         209            reti
065A            210     
065A            211   ;---------------------------------;
065A            212   ; Routine to initialize the ISR   ;
065A            213   ; for timer 2                     ;
065A            214   ;---------------------------------;
065A            215            
065A            216   Timer2_Init:
065A 75C800     217            mov T2CON, #0                                           ; Stop timer/counter.  Autoreload mode.
065D 75CBA9     218            mov RCAP2H, #high(TIMER2_RELOAD)
0660 75CA9A     219            mov RCAP2L, #low(TIMER2_RELOAD)
0663            220            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0663 E4         221            clr a
0664 F530       222            mov Count1ms+0, a
0666 F531       223            mov Count1ms+1, a
0668 F533       224            mov Count_PWM, a
066A F532       225            mov Count_Sample, a
066C F534       226     mov soak_seconds, a
066E F535       227     mov soak_temp, a
0670 F536       228     mov reflow_seconds, a
0672 F537       229     mov reflow_temp, a
0674 F55A       230     mov state, a
0676 F53A       231     mov state_time, a
0678 F539       232     mov run_time_sec, a
067A F538       233     mov run_time_min, a
067C F53B       234     mov Count100ms, a
067E 753C04     235     mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
0681 753D0A     236     mov Long_Beep_Counter, #LONG_BEEP_LENGTH
0684 753E0C     237     mov Six_Beep_Counter, #SIX_BEEP_LENGTH
0687            238            ; Enable the timer and interrupts
0687 D2AD       239            setb ET2  ; Enable timer 2 interrupt
0689 D2CA       240            setb TR2  ; Enable timer 2
068B 22         241   ret
068C            242   
068C            243     
068C            244   ;---------------------------------;
068C            245   ; ISR for timer 2                 ;
068C            246   ;---------------------------------;
068C            247   Timer2_ISR:
068C C2CF       248            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
068E            249            
068E            250            ; The two registers used in the ISR must be saved in the stack
068E C0E0       251            push acc
0690 C0D0       252            push psw
0692            253            
0692 053B       254     inc Count100ms                         ; Increment every 1ms  
0694 0532       255     inc Count_Sample
0696            256            ; Increment the 16-bit one mili second counter
0696 0530       257            inc Count1ms+0    ; Increment the low 8-bits first
0698 E530       258            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
069A 7002       259            jnz Timer2_Inc_100ms
069C 0531       260            inc Count1ms+1
069E            261     
069E            262   Timer2_Inc_100ms:
069E            263   
069E E53B       264            mov a, Count100ms
06A0 B46442     265            cjne a, #100, Inc_Done_1sec; Run following code every 100ms
06A3            266            
06A3 E4         267            clr a
06A4 F53B       268            mov Count100ms, a               ; Return to 0
06A6            269            ; If any of the beep flags are set, run their corresponding code
06A6 200608     270            jb short_beep_flag, Timer2_Short_Beep
06A9 200717     271            jb long_beep_flag, Timer2_Long_Beep
06AC 200826     272            jb six_beep_flag, Timer2_Six_Beep
06AF 8034       273            sjmp Inc_Done_1sec
06B1            274            
06B1            275   Timer2_Short_Beep:
06B1 D28C       276            setb TR0
06B3 153C       277            dec Short_Beep_Counter
06B5 E53C       278            mov a, Short_Beep_Counter
06B7 B4002B     279            cjne a, #0, Inc_Done_1sec
06BA            280            ; Once counter has reached 0
06BA C28C       281            clr TR0
06BC C206       282            clr short_beep_flag
06BE 753C04     283            mov Short_Beep_Counter, #SHORT_BEEP_LENGTH
06C1 8022       284            sjmp Inc_Done_1sec
06C3            285            
06C3            286   Timer2_Long_Beep:
06C3 D28C       287            setb TR0
06C5 153D       288            dec Long_Beep_Counter
06C7 E53D       289            mov a, Long_Beep_Counter
06C9 B40019     290            cjne a, #0, Inc_Done_1sec
06CC            291            ; Once counter has reached 0
06CC C28C       292            clr TR0
06CE C207       293            clr long_beep_flag
06D0 753D0A     294            mov Long_Beep_Counter, #LONG_BEEP_LENGTH
06D3 8010       295            sjmp Inc_Done_1sec
06D5            296            
06D5            297   Timer2_Six_Beep:
06D5 B28C       298            cpl TR0
06D7 153E       299            dec Six_Beep_Counter
06D9 E53E       300            mov a, Six_Beep_Counter
06DB B40007     301            cjne a, #0, Inc_Done_1sec
06DE            302            ; Once counter has reached 0
06DE C28C       303            clr TR0
06E0 C208       304            clr six_beep_flag
06E2 753E0C     305            mov Six_Beep_Counter, #SIX_BEEP_LENGTH
06E5            306            
06E5            307   Inc_Done_1sec:
06E5            308            ; Check if one second has passed
06E5 E530       309            mov a, Count1ms+0
06E7 B4E824     310            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
06EA E531       311            mov a, Count1ms+1
06EC B4031F     312            cjne a, #high(1000), Inc_Done_Sample
06EF            313            
06EF B209       314            cpl led_flag
06F1            315            
06F1 753000     316            mov Count1ms+0, #0
06F4 753100     316            mov Count1ms+1, #0
06F7            317     ; time for state, will reset after every state
06F7 053A       318     inc state_time
06F9            319     
06F9 E53A       320     mov a, state_time
06FB B43C02     321     cjne a,#60, Inc_Done_Run_Time
06FE D201       322            setb one_min_flag
0700            323            
0700            324   Inc_Done_Run_Time:
0700 0539       325     inc run_time_sec
0702 E539       326     mov a, run_time_sec
0704 B43C07     327     cjne a, #60, Inc_Done_Sample
0707            328     
0707 E4         329     clr a
0708 F539       330     mov run_time_sec, a
070A 0538       331     inc run_time_min
070C 8000       332            sjmp Inc_Done_Sample
070E            333   
070E            334   Inc_Done_Sample:
070E            335            
070E E532       336     mov a, Count_Sample
0710 B4FA05     337     cjne a, #SAMPLE_INTERVAL, Inc_Done_PWM
0713            338     
0713 D205       339     setb sample_flag
0715            340     
0715 E4         341     clr a
0716 F532       342     mov Count_Sample, a
0718            343   
0718            344   Inc_Done_PWM:
0718            345            
0718 30021F     346            jnb pwm_on, Timer2_ISR_done
071B 0533       347            inc Count_PWM
071D 30030E     348            jnb pwm_high, Inc_Done_PWM_Low
0720            349   
0720 E533       350            mov a, Count_PWM
0722 B43315     351            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
0725            352            
0725 C203       353            clr pwm_high
0727 C2B7       354            clr SSR_OUT
0729            355            
0729 E4         356            clr a
072A F533       357            mov Count_PWM, a
072C            358            
072C 800C       359            sjmp Timer2_ISR_done
072E            360            
072E            361   Inc_Done_PWM_Low:
072E            362   
072E E533       363            mov a, Count_PWM
0730 B4CC07     364            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
0733            365            
0733 D203       366            setb pwm_high
0735 D2B7       367            setb SSR_OUT
0737            368            
0737 E4         369            clr a
0738 F533       370            mov Count_PWM, a
073A            371            
073A            372   Timer2_ISR_done:
073A D0D0       373            pop psw
073C D0E0       374            pop acc
073E 32         375   reti
073F            376   
073F            377   ;------------------------------------------------------------------;
073F            378   ; Subroutine to take sample from Thermocouple, LM335, and LED for Vref
073F            379   ;------------------------------------------------------------------;
073F            380   Take_Sample:
073F C205       381            clr sample_flag
0741            382            ;reading the LED voltage for Vref
0741 75F007     383            mov b, #7
0744 12038B     383            lcall ?Average_ADC_Channel      
0747 12075D     384            lcall Calculate_Vref
074A            385            ;fetch result from channel 0 as room temperature
074A 75F000     386            mov b, #0
074D 12038B     386            lcall ?Average_ADC_Channel
0750 120794     387            lcall LM335_Result_SPI_Routine
0753            388            ;fetch result from channel 1
0753 75F001     389            mov b, #1
0756 12038B     389            lcall ?Average_ADC_Channel
0759 1207DD     390     lcall Result_SPI_Routine       ; 0.5 second delay between samples
075C 22         391            ret
075D            392   
075D            393   ;calculating Vref from Vled      
075D            394   Calculate_Vref:
075D 854743     395            mov y+0, result+0 
0760 854844     395            mov y+1, result+1
0763 754500     395            mov y+2, #0 
0766 754600     395            mov y+3, #0
0769 753F31     396            mov x+0, #low (VLED*1023 % 0x10000) 
076C 75403B     396            mov x+1, #high(VLED*1023 % 0x10000) 
076F 754103     396            mov x+2, #low (VLED*1023 / 0x10000) 
0772 754200     396            mov x+3, #high(VLED*1023 / 0x10000) 
0775 1202E3     397            lcall div32
0778 754310     398            mov y+0, #low (10000 % 0x10000) 
077B 754427     398            mov y+1, #high(10000 % 0x10000) 
077E 754500     398            mov y+2, #low (10000 / 0x10000) 
0781 754600     398            mov y+3, #high(10000 / 0x10000) 
0784 120256     399            lcall mul32                     ; Gets Vcc*10^6
0787            400   
0787 853F52     401            mov Vcc+0, x+0 
078A 854053     401            mov Vcc+1, x+1
078D 854154     401            mov Vcc+2, x+2 
0790 854255     401            mov Vcc+3, x+3
0793            402            
0793 22         403            ret
0794            404            
0794            405   ;calculating cold junction temperature
0794            406   LM335_Result_SPI_Routine:
0794 855243     407            mov y+0, Vcc+0 
0797 855344     407            mov y+1, Vcc+1
079A 855445     407            mov y+2, Vcc+2 
079D 855546     407            mov y+3, Vcc+3
07A0            408   
07A0 120256     409       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
07A3 7543FF     410            mov y+0, #low (1023 % 0x10000) 
07A6 754403     410            mov y+1, #high(1023 % 0x10000) 
07A9 754500     410            mov y+2, #low (1023 / 0x10000) 
07AC 754600     410            mov y+3, #high(1023 / 0x10000)          
07AF 1202E3     411       lcall div32
07B2 754310     412            mov y+0, #low (2730000 % 0x10000) 
07B5 7544A8     412            mov y+1, #high(2730000 % 0x10000) 
07B8 754529     412            mov y+2, #low (2730000 / 0x10000) 
07BB 754600     412            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
07BE 1201C2     413       lcall sub32
07C1 754364     414            mov y+0, #low (100 % 0x10000) 
07C4 754400     414            mov y+1, #high(100 % 0x10000) 
07C7 754500     414            mov y+2, #low (100 / 0x10000) 
07CA 754600     414            mov y+3, #high(100 / 0x10000)           
07CD 1202E3     415       lcall div32
07D0            416   
07D0 853F4E     417            mov x_lm335+0, x+0 
07D3 85404F     417            mov x_lm335+1, x+1
07D6 854150     417            mov x_lm335+2, x+2 
07D9 854251     417            mov x_lm335+3, x+3
07DC            418            
07DC 22         419            ret
07DD            420   
07DD            421   ;calculating the oven temperature and sending it to computer and LCD
07DD            422   Result_SPI_Routine:
07DD 855243     423            mov y+0, Vcc+0 
07E0 855344     423            mov y+1, Vcc+1
07E3 855445     423            mov y+2, Vcc+2 
07E6 855546     423            mov y+3, Vcc+3
07E9            424            
07E9 120256     425            lcall mul32
07EC 7543FF     426            mov y+0, #low (1023 % 0x10000) 
07EF 754403     426            mov y+1, #high(1023 % 0x10000) 
07F2 754500     426            mov y+2, #low (1023 / 0x10000) 
07F5 754600     426            mov y+3, #high(1023 / 0x10000) 
07F8 1202E3     427            lcall div32
07FB 754364     428            mov y+0, #low (100 % 0x10000) 
07FE 754400     428            mov y+1, #high(100 % 0x10000) 
0801 754500     428            mov y+2, #low (100 / 0x10000) 
0804 754600     428            mov y+3, #high(100 / 0x10000) 
0807 120256     429            lcall mul32     
080A 7543C6     430            mov y+0, #low (454 % 0x10000) 
080D 754401     430            mov y+1, #high(454 % 0x10000) 
0810 754500     430            mov y+2, #low (454 / 0x10000) 
0813 754600     430            mov y+3, #high(454 / 0x10000)   ;Gain 
0816 1202E3     431            lcall div32
0819 754329     432            mov y+0, #low (41 % 0x10000) 
081C 754400     432            mov y+1, #high(41 % 0x10000) 
081F 754500     432            mov y+2, #low (41 / 0x10000) 
0822 754600     432            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
0825 1202E3     433            lcall div32
0828            434            
0828 854E43     435            mov y+0, x_lm335+0 
082B 854F44     435            mov y+1, x_lm335+1
082E 855045     435            mov y+2, x_lm335+2 
0831 855146     435            mov y+3, x_lm335+3
0834 1201A1     436            lcall add32
0837            437     
0837 754364     438            mov y+0, #low (100 % 0x10000) 
083A 754400     438            mov y+1, #high(100 % 0x10000) 
083D 754500     438            mov y+2, #low (100 / 0x10000) 
0840 754600     438            mov y+3, #high(100 / 0x10000) 
0843 1202E3     439     lcall div32
0846            440   
0846            441            ;updating the temperature of OVEN variable
0846 853F5B     442            mov current_temp+0, x+0 
0849 85405C     442            mov current_temp+1, x+1
084C 85415D     442            mov current_temp+2, x+2 
084F 85425E     442            mov current_temp+3, x+3
0852            443            
0852 1200DC     444            lcall hex2bcd
0855            445   
0855            446   ;sending Oven temperature to Computer
0855            447   Send_Serial:
0855 C000       448       push ar0
0857 A84A       448       mov r0, bcd+1
0859 1203EF     448       lcall ?Send_BCD
085C D000       448       pop ar0
085E C000       449       push ar0
0860 A849       449       mov r0, bcd
0862 1203EF     449       lcall ?Send_BCD
0865 D000       449       pop ar0
0867 740A       450            mov a, #'\n'
0869 1203DC     451            lcall putchar
086C            452            
086C            453            ;sending the state to computer
086C 855A3F     454            mov x+0, state+0 
086F 754000     454            mov x+1, #0
0872 754100     454            mov x+2, #0 
0875 754200     454            mov x+3, #0
0878 1200DC     455            lcall hex2bcd
087B C000       456       push ar0
087D A849       456       mov r0, bcd
087F 1203EF     456       lcall ?Send_BCD
0882 D000       456       pop ar0
0884 740A       457            mov a, #'\n'
0886 1203DC     458            lcall putchar
0889 22         459   ret
088A            460   
088A            461   ;Saving variables to Flash Memory
088A            462   Save_Configuration:
088A            463            ; Erase FDATA page 1
088A C2AF       464            clr EA ; Disables interrupts to allow access to flash memory
088C 759658     465            mov MEMCON, #01011000B ; AERS=1, MWEN=1, DMEN=1, 
088F            466            ; ^ Erases page in flash memory, enables programming to nonvolatie mem location
088F            467            ; Enables nonvolatile data memory and maps it into FDATA space
088F 900000     468            mov DPTR, #0x0000 ; Set data pointer to start of flash memory
0892 74FF       469            mov a, #0xff                    ; Write 1111 1111 to flash mem
0894 F0         470            movx @DPTR, A
0895            471            ; Load page
0895 759638     472            mov MEMCON, #00111000B ; LDPG=1, MWEN=1, DMEN=1
0898            473            ; Enables loading of multiple bytes to temporary page buffer
0898            474            ; Enables programming of nonvolatile memory location
0898            475            ; Enables nonvolatile data memory and map it into FDATA space
0898            476            ; Save variables
0898 E535       477            mov a, soak_temp        ; Move soak temperature to accumulator
089A F0         478            movx @DPTR, A                   ; Save data in buffer
089B A3         479            inc DPTR                                        ; Increment data pointer
089C E534       480            mov a, soak_seconds ; Repeat for remaining variables
089E F0         481            movx @DPTR, A
089F A3         482            inc DPTR
08A0 E537       483            mov a, reflow_temp
08A2 F0         484            movx @DPTR,A
08A3 A3         485            inc DPTR
08A4 E536       486            mov a, reflow_seconds
08A6 F0         487            movx @DPTR, A
08A7            488            ; Write Validation Keys to flash memory (Check upon write)
08A7 A3         489            inc DPTR
08A8 7455       490            mov a, #0x55 ; First key value (0101 0101)
08AA F0         491            movx @DPTR, A
08AB A3         492            inc DPTR
08AC 74AA       493            mov a, #0xAA ; Second key value (1010 1010)
08AE F0         494            movx @DPTR, A
08AF            495            ; Copy Buffer to Flash
08AF 759618     496            mov MEMCON, #00011000B ; Copy page to flash
08B2 74FF       497            mov a, #0xff
08B4 F0         498            movx @DPTR, A
08B5 759600     499            mov MEMCON, #00000000B ; Disable access to data flash
08B8 D2AF       500            setb EA ; Re-enable interrupts
08BA 22         501            ret
08BB            502   
08BB            503   ; Reading variables from flash memory
08BB            504   Load_Configuration:
08BB 759608     505            mov MEMCON, #00001000B ; Enable read access to data flash
08BE            506     
08BE 900004     507            mov dptr, #0x0004 ; Move dptr to first key value location
08C1 E0         508            movx a, @dptr
08C2 B4551B     509            cjne a, #0x55, Load_Defaults ; If keys do not match, write to flash failed, load default values
08C5 A3         510            inc dptr ; Second key value location
08C6 E0         511            movx a, @dptr
08C7 B4AA16     512            cjne a, #0xAA, Load_Defaults ; Check if second keys match or not, if not then load defaults
08CA            513            ; Keys match. Now load saved values from flash
08CA 900000     514            mov dptr, #0x0000
08CD E0         515            movx a, @dptr
08CE F535       516            mov soak_temp, a        ; Load soak temperature
08D0 A3         517            inc dptr
08D1 E0         518            movx a, @dptr
08D2 F534       519            mov soak_seconds, a ; Load soak time
08D4 A3         520            inc dptr
08D5 E0         521            movx a, @dptr
08D6 F537       522            mov reflow_temp, a ; Load reflow temperature
08D8 A3         523            inc dptr
08D9 E0         524            movx a, @dptr
08DA F536       525            mov reflow_seconds, a ; Load reflow time
08DC 759600     526            mov MEMCON, #00000000B ; Disables access to data flashx
08DF 22         527            ret
08E0            528            
08E0            529   ; Default (optimal) values for soldering profile
08E0            530   Load_Defaults: ; Load defaults if keys are incorrect
08E0 753596     531            mov soak_temp, #150
08E3 75342D     532            mov soak_seconds, #45
08E6 7537E1     533            mov reflow_temp, #225
08E9 75361E     534            mov reflow_seconds, #30
08EC 759600     535            mov MEMCON, #00000000B ; Disables access to data flash
08EF 020928     536            ljmp forever 
08F2            537    
08F2            538   ;------------------------------------------------------------------;
08F2            539   ; ********************MACRO LIST***********************************;
08F2            540   ;------------------------------------------------------------------;
08F2            541   
08F2            542   ;------------------------------------------------------------------;
08F2            543   ; MACRO for incrementing a variable
08F2            544   ;------------------------------------------------------------------;
                545   Inc_variable MAC
                546   	;Mac (%0 : inc/dec button    %1 : variable ) 
                547   	jb %0, no_inc_dec_var%M
                548   	Wait_Milli_Seconds(#50)
                549   	jb %0, no_inc_dec_var%M
                550     	Wait_Milli_Seconds(#100)
                551   
                552   	inc %1
                553   	
                554   no_inc_dec_var%M:
                555   
                556   ENDMAC
08F2            557   
08F2            558   ;------------------------------------------------------------------;
08F2            559   ; MACRO for decrementing a variable
08F2            560   ;------------------------------------------------------------------;
                561   Dec_variable MAC
                562   	;Mac (%0 : inc/dec button    %1 : variable ) 
                563   	jb %0, no_inc_dec_var%M
                564   	Wait_Milli_Seconds(#50)
                565   	jb %0, no_inc_dec_var%M
                566   	Wait_Milli_Seconds(#100)
                567   
                568   	dec %1
                569   	
                570   no_inc_dec_var%M:
                571   
                572   ENDMAC
08F2            573   
08F2            574   ;------------------------------------------------------------------;
08F2            575   ; MACRO for Showing values with header on LCD
08F2            576   ;------------------------------------------------------------------;
                577   Show_Header_and_Value Mac
                578   	; MAC (%0:    Constant string for the first line on LCD       %1: value to be shown on second line				%2: unit )
                579   	Set_Cursor(1,1)
                580   	Send_Constant_String(#%0)
                581   	Set_Cursor(2,1)
                582   	Move_1B_to_4B ( x, %1)
                583   	lcall hex2bcd
                584     	Display_BCD_1_digit(bcd+1)
                585   	Display_BCD(bcd)
                586     	Set_Cursor(2,5)
                587     	Send_Constant_String(#%2)
                588   ENDMAC
08F2            589   
08F2            590   
08F2            591   ;------------------------------------------------------------------;
08F2            592   ; MACRO for Showing messages with header on LCD
08F2            593   ;------------------------------------------------------------------;
                594   Show_Header Mac
                595   	Set_Cursor(1,1)
                596     	Send_Constant_String(#%0)
                597     	Set_Cursor(2,1)
                598     	Send_Constant_String(#%1)
                599   ENDMAC
08F2            600   
08F2            601   ;------------------------------------------------------------------;
08F2            602   ; MACRO for Showing 2 values with header on LCD
08F2            603   ;------------------------------------------------------------------;
                604   Show_Stage_Temp_Time Mac
                605   	; MAC (%0:    Constant string for the first line on LCD           %1: Temperature			%2: Time (minutes)   %3: Time (seconds) )
                606   	Set_Cursor(1,1)
                607   	Send_Constant_String(#%0)
                608     
                609     	Set_Cursor(2,1)	;show temperture
                610   	Move_1B_to_4B ( x, %1)
                611   	lcall hex2bcd
                612     	Display_BCD_1_digit(bcd+1)
                613   	Display_BCD(bcd)
                614   
                615   	Set_Cursor(2,5)
                616   	Send_Constant_String(#Cels)
                617   
                618     	Set_Cursor(2,11)
                619     	Move_1B_to_4B (x, %2)
                620     	lcall hex2bcd
                621     	Display_BCD(bcd)
                622     	Display_char(#':')
                623    	Move_1B_to_4B (x, %3)
                624     	lcall hex2bcd
                625     	Display_BCD(bcd)
                626   
                627   ENDMAC
08F2            628   
08F2            629   ;------------------------------------------------------------------;
08F2            630   ; MACRO for checking a button and changing state
08F2            631   ;------------------------------------------------------------------;
                632   Check_button_for_State_change Mac
                633   	; MAC (%0:    Constant string for the button name           %1: state to jump to if the button is pressed )
                634   	jb %0, no_button_pressed%M
                635   	Wait_Milli_Seconds(#50)
                636   	jb %0, no_button_pressed%M
                637   	jnb %0, $
                638   	
                639   	mov state, #%1
                640    	WriteCommand(#0x01)
                641     	Wait_Milli_Seconds(#2)
                642   no_button_pressed%M:
                643   
                644   ENDMAC
08F2            645   
08F2            646   ;------------------------------------------------------------------;
08F2            647   ; MACRO for comparing 2 values and changing state
08F2            648   ;------------------------------------------------------------------;
                649   Compare_Values_for_State_Change MAC
                650   	;	%0: variable to check
                651   	;	%1: value set at using the buttons
                652   	;	%2: next state
                653   	mov a, %0
                654     	clr c
                655     	subb a, %1
                656     	jnc values_not_equal%M
                657   	mov state, #%2
                658   	WriteCommand(#0x01)
                659     	Wait_Milli_Seconds(#2)
                660   values_not_equal%M:
                661   
                662   ENDMAC
08F2            663   ;------------------------------------------------------------------;
08F2            664   ; MACRO for turning the SSR off
08F2            665   ;------------------------------------------------------------------;
                666   SSR_OFF MAC
                667       clr pwm_on
                668       clr pwm_high
                669       clr SSR_OUT
                670   ENDMAC
08F2            671   
08F2            672   ;------------------------------------------------------------------;
08F2            673   ; MACRO for going to next state
08F2            674   ;------------------------------------------------------------------;
                675   check_state MAC
                676   		; %0 state number    %1 next state
                677       mov a, state
                678       cjne a, #%0, skipstate%M
                679     	sjmp no_skip_state%M
                680   skipstate%M:
                681       ljmp state%1
                682   no_skip_state%M:
                683   ENDMAC
08F2            684   
                685   Over_Limit MAC
                686   	mov a, %0
                687     	clr c
                688     	dec a
                689     	subb a, #%1			;reflow time should be less than 45 seconds
                690     	jc	Not_over_Limit%M	;if reflow_seconds - 45 < 0
                691   	
                692     	mov %0, #%1	;reset reflow seconds to 0s
                693     
                694   Not_over_Limit%M:  
                695   ENDMAC
08F2            696   ;------------------------------------------------------------------;
08F2            697   ; Main program   (FSM)
08F2            698   ;        -state 0:  Start Screen
08F2            699   ;        -state 1:  initialization       Soak Time  
08F2            700   ;        -state 2:  initialization               Soak Temperature
08F2            701   ;        -state 3:  initialization               Reflow Time
08F2            702   ;        -state 4:  initialization               Reflow Temp
08F2            703   ;        -state 5:  Storing the variables in flash memory, and asking for user confirmation to begin process                             
08F2            704   ;        -state 6:  initialising Timer and resetting Global Timer
08F2            705   ;
08F2            706   ;        -state 10: Ramp to Soak
08F2            707   ;        -state 11: Soak
08F2            708   ;        -state 12: Ramp to reflow
08F2            709   ;        -state 13: Reflow
08F2            710   ;        -state 14: Cooling
08F2            711   ;        -state 15: Finished successfully
08F2            712   ;        -state 16: ERROR State
08F2            713   ;        -state 17: Force Quit State
08F2            714   ;------------------------------------------------------------------;
08F2            715   MainProgram:
08F2            716   
08F2            717            ; Initialization
08F2 75817F     718       mov SP, #0x7F
08F5 75C100     719       mov PMOD, #0 ; Configure all ports in bidirectional mode
08F8 12063A     720       lcall Timer0_Init
08FB 12065A     721       lcall Timer2_Init
08FE D2AF       722       setb EA   ; Enable Global interrupts
0900 12034C     723       lcall INIT_SPI
0903 1203BD     724            lcall InitSerialPort
0906 120088     725       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0909            726       
0909 C202       727       clr pwm_on
090B C203       727       clr pwm_high
090D C2B7       727       clr SSR_OUT
090F            727            ; clears  pwm_on ------- pwm_high ------- SSR_OUT ------- in_process                            
090F            728   
090F C204       729            clr settings_modified_flag
0911 C201       730       clr one_min_flag
0913 C205       731       clr sample_flag
0915 C206       732       clr short_beep_flag
0917 C207       733       clr long_beep_flag
0919 C208       734       clr six_beep_flag
091B C209       735       clr led_flag
091D C2A4       736            clr GREEN
091F C2A5       737            clr YELLOW
0921 C2A6       738            clr RED
0923 C2A7       739            clr BLUE
0925            740            
0925 1208BB     741            lcall Load_Configuration ; Read values from data flash
0928            742            
0928            743   forever:         
0928 300503     744            jnb sample_flag, state0
092B 12073F     745            lcall Take_Sample
092E            746   
092E            747   ; Main start screen appears on boot and 
092E            748   state0:
092E            749                    ; 0 state number    1 next state
092E E55A       749       mov a, state
0930 B40002     749       cjne a, #0, skipstate39
0933 8003       749            sjmp no_skip_state39
0935            749   skipstate39:
0935 0209C1     749       ljmp state1
0938            749   no_skip_state39:
0938 C2A4       750            clr GREEN
093A C2A5       751            clr YELLOW
093C C2A6       752            clr RED
093E C2A7       753            clr BLUE
0940            754            
0940 C0E0       755            push acc
0942 7401       755            mov a, #1
0944 14         755            dec a
0945 1200C1     755            lcall ?Set_Cursor_1 ; Select column and row
0948 D0E0       755            pop acc
094A C083       755            push dph
094C C082       755            push dpl
094E C0E0       755            push acc
0950 900418     755            mov dptr, #StartMessage
0953 1200B4     755            lcall ?Send_Constant_String
0956 D0E0       755            pop acc
0958 D082       755            pop dpl
095A D083       755            pop dph
095C C0E0       755            push acc
095E 7401       755            mov a, #1
0960 14         755            dec a
0961 1200BF     755            lcall ?Set_Cursor_2 ; Select column and row
0964 D0E0       755            pop acc
0966 C083       755            push dph
0968 C082       755            push dpl
096A C0E0       755            push acc
096C 900429     755            mov dptr, #StartMessage2
096F 1200B4     755            lcall ?Send_Constant_String
0972 D0E0       755            pop acc
0974 D082       755            pop dpl
0976 D083       755            pop dph
0978            756     
0978            757            ; MAC (CYCLE_BUTTON:    Constant string for the button name           1: state to jump to if the button is pressed )
0978 208020     757            jb CYCLE_BUTTON, no_button_pressed45
097B C002       757            push AR2
097D 7A32       757            mov R2, #50
097F 120039     757            lcall ?Wait_Milli_Seconds
0982 D002       757            pop AR2
0984 208014     757            jb CYCLE_BUTTON, no_button_pressed45
0987 3080FD     757            jnb CYCLE_BUTTON, $
098A            757            
098A 755A01     757            mov state, #1
098D 7401       757            mov a, #0x01
098F 120083     757            lcall ?WriteCommand
0992 C002       757            push AR2
0994 7A02       757            mov R2, #2
0996 120039     757            lcall ?Wait_Milli_Seconds
0999 D002       757            pop AR2
099B            757   no_button_pressed45:
099B            757                    ; Transition to parameter select states
099B            758            ; MAC (INC_BUTTON:    Constant string for the button name           5: state to jump to if the button is pressed )
099B 208220     758            jb INC_BUTTON, no_button_pressed49
099E C002       758            push AR2
09A0 7A32       758            mov R2, #50
09A2 120039     758            lcall ?Wait_Milli_Seconds
09A5 D002       758            pop AR2
09A7 208214     758            jb INC_BUTTON, no_button_pressed49
09AA 3082FD     758            jnb INC_BUTTON, $
09AD            758            
09AD 755A05     758            mov state, #5
09B0 7401       758            mov a, #0x01
09B2 120083     758            lcall ?WriteCommand
09B5 C002       758            push AR2
09B7 7A02       758            mov R2, #2
09B9 120039     758            lcall ?Wait_Milli_Seconds
09BC D002       758            pop AR2
09BE            758   no_button_pressed49:
09BE            758                            ; Transition to save/start confirm state
09BE 020928     759            ljmp forever
09C1            760   ; initializing the Soak Time 
09C1            761   state1:
09C1            762                    ; 1 state number    2 next state
09C1 E55A       762       mov a, state
09C3 B40102     762       cjne a, #1, skipstate53
09C6 8003       762            sjmp no_skip_state53
09C8            762   skipstate53:
09C8 020AAD     762       ljmp state2
09CB            762   no_skip_state53:
09CB D204       763            setb settings_modified_flag
09CD 20090A     764            jb led_flag, state1ledon
09D0 D2A4       765            setb GREEN
09D2 D2A5       766            setb YELLOW
09D4 D2A6       767            setb RED
09D6 D2A7       768            setb BLUE
09D8 8008       769            sjmp state1b
09DA            770   state1ledon:
09DA C2A4       771            clr GREEN
09DC C2A5       772            clr YELLOW
09DE C2A6       773            clr RED
09E0 C2A7       774            clr BLUE
09E2            775   state1b:
09E2            776            ; MAC (SoakTime_Message:    Constant string for the first line on LCD       soak_seconds: value to be shown on second line                              Secs: unit )
09E2 C0E0       776            push acc
09E4 7401       776            mov a, #1
09E6 14         776            dec a
09E7 1200C1     776            lcall ?Set_Cursor_1 ; Select column and row
09EA D0E0       776            pop acc
09EC C083       776            push dph
09EE C082       776            push dpl
09F0 C0E0       776            push acc
09F2 90043A     776            mov dptr, #SoakTime_Message
09F5 1200B4     776            lcall ?Send_Constant_String
09F8 D0E0       776            pop acc
09FA D082       776            pop dpl
09FC D083       776            pop dph
09FE C0E0       776            push acc
0A00 7401       776            mov a, #1
0A02 14         776            dec a
0A03 1200BF     776            lcall ?Set_Cursor_2 ; Select column and row
0A06 D0E0       776            pop acc
0A08 85343F     776            mov x+0, soak_seconds+0 
0A0B 754000     776            mov x+1, #0
0A0E 754100     776            mov x+2, #0 
0A11 754200     776            mov x+3, #0
0A14 1200DC     776            lcall hex2bcd
0A17 C000       776            push ar0
0A19 C0E0       776            push acc
0A1B 7420       776            mov a, #' '
0A1D 12007E     776            lcall ?WriteData
0A20 A84A       776            mov r0, bcd+1
0A22 E8         776            mov a, r0
0A23 540F       776            anl a, #0fh
0A25 4430       776            orl a, #30h
0A27 12007E     776            lcall ?WriteData
0A2A D0E0       776            pop acc
0A2C D000       776            pop ar0
0A2E C000       776            push ar0
0A30 A849       776            mov r0, bcd
0A32 1200C6     776            lcall ?Display_BCD
0A35 D000       776            pop ar0
0A37 C0E0       776            push acc
0A39 7405       776            mov a, #5
0A3B 14         776            dec a
0A3C 1200BF     776            lcall ?Set_Cursor_2 ; Select column and row
0A3F D0E0       776            pop acc
0A41 C083       776            push dph
0A43 C082       776            push dpl
0A45 C0E0       776            push acc
0A47 9005F3     776            mov dptr, #Secs
0A4A 1200B4     776            lcall ?Send_Constant_String
0A4D D0E0       776            pop acc
0A4F D082       776            pop dpl
0A51 D083       776            pop dph
0A53            777            ;Mac (INC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A53 208217     777            jb INC_BUTTON, no_inc_dec_var63
0A56 C002       777            push AR2
0A58 7A32       777            mov R2, #50
0A5A 120039     777            lcall ?Wait_Milli_Seconds
0A5D D002       777            pop AR2
0A5F 20820B     777            jb INC_BUTTON, no_inc_dec_var63
0A62 C002       777            push AR2
0A64 7A64       777            mov R2, #100
0A66 120039     777            lcall ?Wait_Milli_Seconds
0A69 D002       777            pop AR2
0A6B            777   
0A6B 0534       777            inc soak_seconds
0A6D            777            
0A6D            777   no_inc_dec_var63:
0A6D            777   
0A6D            778            ;Mac (DEC_BUTTON : inc/dec button    soak_seconds : variable ) 
0A6D 208417     778            jb DEC_BUTTON, no_inc_dec_var66
0A70 C002       778            push AR2
0A72 7A32       778            mov R2, #50
0A74 120039     778            lcall ?Wait_Milli_Seconds
0A77 D002       778            pop AR2
0A79 20840B     778            jb DEC_BUTTON, no_inc_dec_var66
0A7C C002       778            push AR2
0A7E 7A64       778            mov R2, #100
0A80 120039     778            lcall ?Wait_Milli_Seconds
0A83 D002       778            pop AR2
0A85            778   
0A85 1534       778            dec soak_seconds
0A87            778            
0A87            778   no_inc_dec_var66:
0A87            778   
0A87            779            
0A87            780            ; MAC (CYCLE_BUTTON:    Constant string for the button name           2: state to jump to if the button is pressed )
0A87 208020     780            jb CYCLE_BUTTON, no_button_pressed69
0A8A C002       780            push AR2
0A8C 7A32       780            mov R2, #50
0A8E 120039     780            lcall ?Wait_Milli_Seconds
0A91 D002       780            pop AR2
0A93 208014     780            jb CYCLE_BUTTON, no_button_pressed69
0A96 3080FD     780            jnb CYCLE_BUTTON, $
0A99            780            
0A99 755A02     780            mov state, #2
0A9C 7401       780            mov a, #0x01
0A9E 120083     780            lcall ?WriteCommand
0AA1 C002       780            push AR2
0AA3 7A02       780            mov R2, #2
0AA5 120039     780            lcall ?Wait_Milli_Seconds
0AA8 D002       780            pop AR2
0AAA            780   no_button_pressed69:
0AAA            780   
0AAA 020928     781            ljmp forever                                                                    
0AAD            782            
0AAD            783   ; initializing the Soak Temperature 
0AAD            784   state2:
0AAD            785                    ; 2 state number    3 next state
0AAD E55A       785       mov a, state
0AAF B40202     785       cjne a, #2, skipstate73
0AB2 8003       785            sjmp no_skip_state73
0AB4            785   skipstate73:
0AB4 020B97     785       ljmp state3
0AB7            785   no_skip_state73:
0AB7            785   
0AB7 20090A     786            jb led_flag, state2ledon
0ABA D2A4       787            setb GREEN
0ABC D2A5       788            setb YELLOW
0ABE D2A6       789            setb RED
0AC0 D2A7       790            setb BLUE
0AC2 8008       791            sjmp state2b
0AC4            792   state2ledon:
0AC4 C2A4       793            clr GREEN
0AC6 C2A5       794            clr YELLOW
0AC8 C2A6       795            clr RED
0ACA C2A7       796            clr BLUE
0ACC            797   state2b:
0ACC            798            ; MAC (SoakTemp_Message:    Constant string for the first line on LCD       soak_temp: value to be shown on second line                                 Cels: unit )
0ACC C0E0       798            push acc
0ACE 7401       798            mov a, #1
0AD0 14         798            dec a
0AD1 1200C1     798            lcall ?Set_Cursor_1 ; Select column and row
0AD4 D0E0       798            pop acc
0AD6 C083       798            push dph
0AD8 C082       798            push dpl
0ADA C0E0       798            push acc
0ADC 90044B     798            mov dptr, #SoakTemp_Message
0ADF 1200B4     798            lcall ?Send_Constant_String
0AE2 D0E0       798            pop acc
0AE4 D082       798            pop dpl
0AE6 D083       798            pop dph
0AE8 C0E0       798            push acc
0AEA 7401       798            mov a, #1
0AEC 14         798            dec a
0AED 1200BF     798            lcall ?Set_Cursor_2 ; Select column and row
0AF0 D0E0       798            pop acc
0AF2 85353F     798            mov x+0, soak_temp+0 
0AF5 754000     798            mov x+1, #0
0AF8 754100     798            mov x+2, #0 
0AFB 754200     798            mov x+3, #0
0AFE 1200DC     798            lcall hex2bcd
0B01 C000       798            push ar0
0B03 C0E0       798            push acc
0B05 7420       798            mov a, #' '
0B07 12007E     798            lcall ?WriteData
0B0A A84A       798            mov r0, bcd+1
0B0C E8         798            mov a, r0
0B0D 540F       798            anl a, #0fh
0B0F 4430       798            orl a, #30h
0B11 12007E     798            lcall ?WriteData
0B14 D0E0       798            pop acc
0B16 D000       798            pop ar0
0B18 C000       798            push ar0
0B1A A849       798            mov r0, bcd
0B1C 1200C6     798            lcall ?Display_BCD
0B1F D000       798            pop ar0
0B21 C0E0       798            push acc
0B23 7405       798            mov a, #5
0B25 14         798            dec a
0B26 1200BF     798            lcall ?Set_Cursor_2 ; Select column and row
0B29 D0E0       798            pop acc
0B2B C083       798            push dph
0B2D C082       798            push dpl
0B2F C0E0       798            push acc
0B31 9005EF     798            mov dptr, #Cels
0B34 1200B4     798            lcall ?Send_Constant_String
0B37 D0E0       798            pop acc
0B39 D082       798            pop dpl
0B3B D083       798            pop dph
0B3D            799            ;Mac (INC_BUTTON : inc/dec button    soak_temp : variable ) 
0B3D 208217     799            jb INC_BUTTON, no_inc_dec_var83
0B40 C002       799            push AR2
0B42 7A32       799            mov R2, #50
0B44 120039     799            lcall ?Wait_Milli_Seconds
0B47 D002       799            pop AR2
0B49 20820B     799            jb INC_BUTTON, no_inc_dec_var83
0B4C C002       799            push AR2
0B4E 7A64       799            mov R2, #100
0B50 120039     799            lcall ?Wait_Milli_Seconds
0B53 D002       799            pop AR2
0B55            799   
0B55 0535       799            inc soak_temp
0B57            799            
0B57            799   no_inc_dec_var83:
0B57            799   
0B57            800            ;Mac (DEC_BUTTON : inc/dec button    soak_temp : variable ) 
0B57 208417     800            jb DEC_BUTTON, no_inc_dec_var86
0B5A C002       800            push AR2
0B5C 7A32       800            mov R2, #50
0B5E 120039     800            lcall ?Wait_Milli_Seconds
0B61 D002       800            pop AR2
0B63 20840B     800            jb DEC_BUTTON, no_inc_dec_var86
0B66 C002       800            push AR2
0B68 7A64       800            mov R2, #100
0B6A 120039     800            lcall ?Wait_Milli_Seconds
0B6D D002       800            pop AR2
0B6F            800   
0B6F 1535       800            dec soak_temp
0B71            800            
0B71            800   no_inc_dec_var86:
0B71            800   
0B71            801            
0B71            802            ; MAC (CYCLE_BUTTON:    Constant string for the button name           3: state to jump to if the button is pressed )
0B71 208020     802            jb CYCLE_BUTTON, no_button_pressed89
0B74 C002       802            push AR2
0B76 7A32       802            mov R2, #50
0B78 120039     802            lcall ?Wait_Milli_Seconds
0B7B D002       802            pop AR2
0B7D 208014     802            jb CYCLE_BUTTON, no_button_pressed89
0B80 3080FD     802            jnb CYCLE_BUTTON, $
0B83            802            
0B83 755A03     802            mov state, #3
0B86 7401       802            mov a, #0x01
0B88 120083     802            lcall ?WriteCommand
0B8B C002       802            push AR2
0B8D 7A02       802            mov R2, #2
0B8F 120039     802            lcall ?Wait_Milli_Seconds
0B92 D002       802            pop AR2
0B94            802   no_button_pressed89:
0B94            802   
0B94 020928     803            ljmp forever                                                                    
0B97            804   
0B97            805   ; initializing the Reflow Time 
0B97            806   state3:
0B97            807                    ; 3 state number    4 next state
0B97 E55A       807       mov a, state
0B99 B40302     807       cjne a, #3, skipstate93
0B9C 8003       807            sjmp no_skip_state93
0B9E            807   skipstate93:
0B9E 020C8C     807       ljmp state4
0BA1            807   no_skip_state93:
0BA1            807   
0BA1 20090A     808            jb led_flag, state3ledon
0BA4 D2A4       809            setb GREEN
0BA6 D2A5       810            setb YELLOW
0BA8 D2A6       811            setb RED
0BAA D2A7       812            setb BLUE
0BAC 8008       813            sjmp state3b
0BAE            814   state3ledon:
0BAE C2A4       815            clr GREEN
0BB0 C2A5       816            clr YELLOW
0BB2 C2A6       817            clr RED
0BB4 C2A7       818            clr BLUE
0BB6            819   state3b:
0BB6            820            ; MAC (ReflowTime_Message:    Constant string for the first line on LCD       reflow_seconds: value to be shown on second line                          Secs: unit )
0BB6 C0E0       820            push acc
0BB8 7401       820            mov a, #1
0BBA 14         820            dec a
0BBB 1200C1     820            lcall ?Set_Cursor_1 ; Select column and row
0BBE D0E0       820            pop acc
0BC0 C083       820            push dph
0BC2 C082       820            push dpl
0BC4 C0E0       820            push acc
0BC6 90045C     820            mov dptr, #ReflowTime_Message
0BC9 1200B4     820            lcall ?Send_Constant_String
0BCC D0E0       820            pop acc
0BCE D082       820            pop dpl
0BD0 D083       820            pop dph
0BD2 C0E0       820            push acc
0BD4 7401       820            mov a, #1
0BD6 14         820            dec a
0BD7 1200BF     820            lcall ?Set_Cursor_2 ; Select column and row
0BDA D0E0       820            pop acc
0BDC 85363F     820            mov x+0, reflow_seconds+0 
0BDF 754000     820            mov x+1, #0
0BE2 754100     820            mov x+2, #0 
0BE5 754200     820            mov x+3, #0
0BE8 1200DC     820            lcall hex2bcd
0BEB C000       820            push ar0
0BED C0E0       820            push acc
0BEF 7420       820            mov a, #' '
0BF1 12007E     820            lcall ?WriteData
0BF4 A84A       820            mov r0, bcd+1
0BF6 E8         820            mov a, r0
0BF7 540F       820            anl a, #0fh
0BF9 4430       820            orl a, #30h
0BFB 12007E     820            lcall ?WriteData
0BFE D0E0       820            pop acc
0C00 D000       820            pop ar0
0C02 C000       820            push ar0
0C04 A849       820            mov r0, bcd
0C06 1200C6     820            lcall ?Display_BCD
0C09 D000       820            pop ar0
0C0B C0E0       820            push acc
0C0D 7405       820            mov a, #5
0C0F 14         820            dec a
0C10 1200BF     820            lcall ?Set_Cursor_2 ; Select column and row
0C13 D0E0       820            pop acc
0C15 C083       820            push dph
0C17 C082       820            push dpl
0C19 C0E0       820            push acc
0C1B 9005F3     820            mov dptr, #Secs
0C1E 1200B4     820            lcall ?Send_Constant_String
0C21 D0E0       820            pop acc
0C23 D082       820            pop dpl
0C25 D083       820            pop dph         
0C27            821            ;Mac (INC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0C27 208217     821            jb INC_BUTTON, no_inc_dec_var103
0C2A C002       821            push AR2
0C2C 7A32       821            mov R2, #50
0C2E 120039     821            lcall ?Wait_Milli_Seconds
0C31 D002       821            pop AR2
0C33 20820B     821            jb INC_BUTTON, no_inc_dec_var103
0C36 C002       821            push AR2
0C38 7A64       821            mov R2, #100
0C3A 120039     821            lcall ?Wait_Milli_Seconds
0C3D D002       821            pop AR2
0C3F            821   
0C3F 0536       821            inc reflow_seconds
0C41            821            
0C41            821   no_inc_dec_var103:
0C41            821   
0C41            822            ;Mac (DEC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0C41 208417     822            jb DEC_BUTTON, no_inc_dec_var106
0C44 C002       822            push AR2
0C46 7A32       822            mov R2, #50
0C48 120039     822            lcall ?Wait_Milli_Seconds
0C4B D002       822            pop AR2
0C4D 20840B     822            jb DEC_BUTTON, no_inc_dec_var106
0C50 C002       822            push AR2
0C52 7A64       822            mov R2, #100
0C54 120039     822            lcall ?Wait_Milli_Seconds
0C57 D002       822            pop AR2
0C59            822   
0C59 1536       822            dec reflow_seconds
0C5B            822            
0C5B            822   no_inc_dec_var106:
0C5B            822   
0C5B            823            
0C5B E536       824            mov a, reflow_seconds
0C5D C3         824            clr c
0C5E 14         824            dec a
0C5F 942D       824            subb a, #45                     ;reflow time should be less than 45 seconds
0C61 4003       824            jc      Not_over_Limit109       ;if reflow_seconds - 45 < 0
0C63            824            
0C63 75362D     824            mov reflow_seconds, #45         ;reset reflow seconds to 0s
0C66            824     
0C66            824   Not_over_Limit109:  
0C66            825     
0C66            826            ; MAC (CYCLE_BUTTON:    Constant string for the button name           4: state to jump to if the button is pressed )
0C66 208020     826            jb CYCLE_BUTTON, no_button_pressed110
0C69 C002       826            push AR2
0C6B 7A32       826            mov R2, #50
0C6D 120039     826            lcall ?Wait_Milli_Seconds
0C70 D002       826            pop AR2
0C72 208014     826            jb CYCLE_BUTTON, no_button_pressed110
0C75 3080FD     826            jnb CYCLE_BUTTON, $
0C78            826            
0C78 755A04     826            mov state, #4
0C7B 7401       826            mov a, #0x01
0C7D 120083     826            lcall ?WriteCommand
0C80 C002       826            push AR2
0C82 7A02       826            mov R2, #2
0C84 120039     826            lcall ?Wait_Milli_Seconds
0C87 D002       826            pop AR2
0C89            826   no_button_pressed110:
0C89            826   
0C89 020928     827            ljmp forever                                                                    
0C8C            828   
0C8C            829   ; initializing the Reflow Temperature 
0C8C            830   state4:
0C8C            831                    ; 4 state number    5 next state
0C8C E55A       831       mov a, state
0C8E B40402     831       cjne a, #4, skipstate114
0C91 8003       831            sjmp no_skip_state114
0C93            831   skipstate114:
0C93 020D81     831       ljmp state5
0C96            831   no_skip_state114:
0C96 20090A     832            jb led_flag, state4ledon
0C99 D2A4       833            setb GREEN
0C9B D2A5       834            setb YELLOW
0C9D D2A6       835            setb RED
0C9F D2A7       836            setb BLUE
0CA1 8008       837            sjmp state4b
0CA3            838   state4ledon:
0CA3 C2A4       839            clr GREEN
0CA5 C2A5       840            clr YELLOW
0CA7 C2A6       841            clr RED
0CA9 C2A7       842            clr BLUE
0CAB            843   state4b:
0CAB            844            ; MAC (ReflowTemp_Message:    Constant string for the first line on LCD       reflow_temp: value to be shown on second line                             Cels: unit )
0CAB C0E0       844            push acc
0CAD 7401       844            mov a, #1
0CAF 14         844            dec a
0CB0 1200C1     844            lcall ?Set_Cursor_1 ; Select column and row
0CB3 D0E0       844            pop acc
0CB5 C083       844            push dph
0CB7 C082       844            push dpl
0CB9 C0E0       844            push acc
0CBB 90046D     844            mov dptr, #ReflowTemp_Message
0CBE 1200B4     844            lcall ?Send_Constant_String
0CC1 D0E0       844            pop acc
0CC3 D082       844            pop dpl
0CC5 D083       844            pop dph
0CC7 C0E0       844            push acc
0CC9 7401       844            mov a, #1
0CCB 14         844            dec a
0CCC 1200BF     844            lcall ?Set_Cursor_2 ; Select column and row
0CCF D0E0       844            pop acc
0CD1 85373F     844            mov x+0, reflow_temp+0 
0CD4 754000     844            mov x+1, #0
0CD7 754100     844            mov x+2, #0 
0CDA 754200     844            mov x+3, #0
0CDD 1200DC     844            lcall hex2bcd
0CE0 C000       844            push ar0
0CE2 C0E0       844            push acc
0CE4 7420       844            mov a, #' '
0CE6 12007E     844            lcall ?WriteData
0CE9 A84A       844            mov r0, bcd+1
0CEB E8         844            mov a, r0
0CEC 540F       844            anl a, #0fh
0CEE 4430       844            orl a, #30h
0CF0 12007E     844            lcall ?WriteData
0CF3 D0E0       844            pop acc
0CF5 D000       844            pop ar0
0CF7 C000       844            push ar0
0CF9 A849       844            mov r0, bcd
0CFB 1200C6     844            lcall ?Display_BCD
0CFE D000       844            pop ar0
0D00 C0E0       844            push acc
0D02 7405       844            mov a, #5
0D04 14         844            dec a
0D05 1200BF     844            lcall ?Set_Cursor_2 ; Select column and row
0D08 D0E0       844            pop acc
0D0A C083       844            push dph
0D0C C082       844            push dpl
0D0E C0E0       844            push acc
0D10 9005EF     844            mov dptr, #Cels
0D13 1200B4     844            lcall ?Send_Constant_String
0D16 D0E0       844            pop acc
0D18 D082       844            pop dpl
0D1A D083       844            pop dph                 
0D1C            845            ;Mac (INC_BUTTON : inc/dec button    reflow_temp : variable ) 
0D1C 208217     845            jb INC_BUTTON, no_inc_dec_var124
0D1F C002       845            push AR2
0D21 7A32       845            mov R2, #50
0D23 120039     845            lcall ?Wait_Milli_Seconds
0D26 D002       845            pop AR2
0D28 20820B     845            jb INC_BUTTON, no_inc_dec_var124
0D2B C002       845            push AR2
0D2D 7A64       845            mov R2, #100
0D2F 120039     845            lcall ?Wait_Milli_Seconds
0D32 D002       845            pop AR2
0D34            845   
0D34            845   
0D34 0537       845            inc reflow_temp
0D36            845            
0D36            845   no_inc_dec_var124:
0D36            845   
0D36            846            ;Mac (DEC_BUTTON : inc/dec button    reflow_temp : variable ) 
0D36 208417     846            jb DEC_BUTTON, no_inc_dec_var127
0D39 C002       846            push AR2
0D3B 7A32       846            mov R2, #50
0D3D 120039     846            lcall ?Wait_Milli_Seconds
0D40 D002       846            pop AR2
0D42 20840B     846            jb DEC_BUTTON, no_inc_dec_var127
0D45 C002       846            push AR2
0D47 7A64       846            mov R2, #100
0D49 120039     846            lcall ?Wait_Milli_Seconds
0D4C D002       846            pop AR2
0D4E            846   
0D4E            846   
0D4E 1537       846            dec reflow_temp
0D50            846            
0D50            846   no_inc_dec_var127:
0D50            846   
0D50            847            
0D50 E537       848            mov a, reflow_temp
0D52 C3         848            clr c
0D53 14         848            dec a
0D54 94EB       848            subb a, #235                    ;reflow time should be less than 45 seconds
0D56 4003       848            jc      Not_over_Limit130       ;if reflow_seconds - 45 < 0
0D58            848            
0D58 7537EB     848            mov reflow_temp, #235   ;reset reflow seconds to 0s
0D5B            848     
0D5B            848   Not_over_Limit130:  
0D5B            849     
0D5B            850            ; MAC (CYCLE_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0D5B 208020     850            jb CYCLE_BUTTON, no_button_pressed131
0D5E C002       850            push AR2
0D60 7A32       850            mov R2, #50
0D62 120039     850            lcall ?Wait_Milli_Seconds
0D65 D002       850            pop AR2
0D67 208014     850            jb CYCLE_BUTTON, no_button_pressed131
0D6A 3080FD     850            jnb CYCLE_BUTTON, $
0D6D            850            
0D6D 755A00     850            mov state, #0
0D70 7401       850            mov a, #0x01
0D72 120083     850            lcall ?WriteCommand
0D75 C002       850            push AR2
0D77 7A02       850            mov R2, #2
0D79 120039     850            lcall ?Wait_Milli_Seconds
0D7C D002       850            pop AR2
0D7E            850   no_button_pressed131:
0D7E            850   
0D7E            850   
0D7E 020928     851            ljmp forever                                                                    
0D81            852            
0D81            853   ; Saves value in Flash Memory and Presents Confirmation Screen to Start Process
0D81            854   state5:
0D81            855                    ; 5 state number    6 next state
0D81 E55A       855       mov a, state
0D83 B40502     855       cjne a, #5, skipstate135
0D86 8003       855            sjmp no_skip_state135
0D88            855   skipstate135:
0D88 020EDE     855       ljmp state6
0D8B            855   no_skip_state135:
0D8B D2A4       856            setb GREEN
0D8D D2A5       857            setb YELLOW
0D8F D2A6       858            setb RED
0D91 D2A7       859            setb BLUE
0D93 300461     860            jnb settings_modified_flag, state5TempSet ; Save values once, once saved skip this
0D96            861     
0D96 12088A     862            lcall Save_Configuration ; Call to save data to flash memory
0D99 C204       863            clr settings_modified_flag
0D9B C0E0       864            push acc
0D9D 7401       864            mov a, #1
0D9F 14         864            dec a
0DA0 1200C1     864            lcall ?Set_Cursor_1 ; Select column and row
0DA3 D0E0       864            pop acc
0DA5 C083       864            push dph
0DA7 C082       864            push dpl
0DA9 C0E0       864            push acc
0DAB 9004E4     864            mov dptr, #SaveToFlash_Msg
0DAE 1200B4     864            lcall ?Send_Constant_String
0DB1 D0E0       864            pop acc
0DB3 D082       864            pop dpl
0DB5 D083       864            pop dph
0DB7 C0E0       864            push acc
0DB9 7401       864            mov a, #1
0DBB 14         864            dec a
0DBC 1200BF     864            lcall ?Set_Cursor_2 ; Select column and row
0DBF D0E0       864            pop acc
0DC1 C083       864            push dph
0DC3 C082       864            push dpl
0DC5 C0E0       864            push acc
0DC7 900506     864            mov dptr, #BlankMsg
0DCA 1200B4     864            lcall ?Send_Constant_String
0DCD D0E0       864            pop acc
0DCF D082       864            pop dpl
0DD1 D083       864            pop dph
0DD3 C002       865            push AR2
0DD5 7AFA       865            mov R2, #250
0DD7 120039     865            lcall ?Wait_Milli_Seconds
0DDA D002       865            pop AR2
0DDC C002       866            push AR2
0DDE 7AFA       866            mov R2, #250
0DE0 120039     866            lcall ?Wait_Milli_Seconds
0DE3 D002       866            pop AR2
0DE5 C002       867            push AR2
0DE7 7AFA       867            mov R2, #250
0DE9 120039     867            lcall ?Wait_Milli_Seconds
0DEC D002       867            pop AR2
0DEE C002       868            push AR2
0DF0 7AFA       868            mov R2, #250
0DF2 120039     868            lcall ?Wait_Milli_Seconds
0DF5 D002       868            pop AR2
0DF7            869     
0DF7            870   state5TempSet:
0DF7 E55B       871            mov a, current_temp
0DF9 C3         872            clr c 
0DFA 9535       873            subb a, soak_temp ; Compare to soak temp
0DFC 405F       874            jc state5AndThreeQuarters ; If temp is too high, do not allow user to continue
0DFE C0E0       875            push acc
0E00 7401       875            mov a, #1
0E02 14         875            dec a
0E03 1200C1     875            lcall ?Set_Cursor_1 ; Select column and row
0E06 D0E0       875            pop acc
0E08 C083       875            push dph
0E0A C082       875            push dpl
0E0C C0E0       875            push acc
0E0E 9004A0     875            mov dptr, #TempTooHighMsg
0E11 1200B4     875            lcall ?Send_Constant_String
0E14 D0E0       875            pop acc
0E16 D082       875            pop dpl
0E18 D083       875            pop dph
0E1A C0E0       875            push acc
0E1C 7401       875            mov a, #1
0E1E 14         875            dec a
0E1F 1200BF     875            lcall ?Set_Cursor_2 ; Select column and row
0E22 D0E0       875            pop acc
0E24 C083       875            push dph
0E26 C082       875            push dpl
0E28 C0E0       875            push acc
0E2A 9004B1     875            mov dptr, #TempTooHighMsg2
0E2D 1200B4     875            lcall ?Send_Constant_String
0E30 D0E0       875            pop acc
0E32 D082       875            pop dpl
0E34 D083       875            pop dph ; Display cooling message, prevent user from starting reflow process
0E36 C002       876            push AR2
0E38 7AFA       876            mov R2, #250
0E3A 120039     876            lcall ?Wait_Milli_Seconds
0E3D D002       876            pop AR2
0E3F C002       877            push AR2
0E41 7AFA       877            mov R2, #250
0E43 120039     877            lcall ?Wait_Milli_Seconds
0E46 D002       877            pop AR2
0E48 C002       878            push AR2
0E4A 7AFA       878            mov R2, #250
0E4C 120039     878            lcall ?Wait_Milli_Seconds
0E4F D002       878            pop AR2
0E51 C002       879            push AR2
0E53 7AFA       879            mov R2, #250
0E55 120039     879            lcall ?Wait_Milli_Seconds
0E58 D002       879            pop AR2
0E5A 020928     880            ljmp forever
0E5D            881   state5AndThreeQuarters:
0E5D C0E0       882            push acc
0E5F 7401       882            mov a, #1
0E61 14         882            dec a
0E62 1200C1     882            lcall ?Set_Cursor_1 ; Select column and row
0E65 D0E0       882            pop acc
0E67 C083       882            push dph
0E69 C082       882            push dpl
0E6B C0E0       882            push acc
0E6D 90047E     882            mov dptr, #Start_Message
0E70 1200B4     882            lcall ?Send_Constant_String
0E73 D0E0       882            pop acc
0E75 D082       882            pop dpl
0E77 D083       882            pop dph
0E79 C0E0       882            push acc
0E7B 7401       882            mov a, #1
0E7D 14         882            dec a
0E7E 1200BF     882            lcall ?Set_Cursor_2 ; Select column and row
0E81 D0E0       882            pop acc
0E83 C083       882            push dph
0E85 C082       882            push dpl
0E87 C0E0       882            push acc
0E89 90048F     882            mov dptr, #Y_N_Message
0E8C 1200B4     882            lcall ?Send_Constant_String
0E8F D0E0       882            pop acc
0E91 D082       882            pop dpl
0E93 D083       882            pop dph
0E95            883            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0E95 208420     883            jb DEC_BUTTON, no_button_pressed159
0E98 C002       883            push AR2
0E9A 7A32       883            mov R2, #50
0E9C 120039     883            lcall ?Wait_Milli_Seconds
0E9F D002       883            pop AR2
0EA1 208414     883            jb DEC_BUTTON, no_button_pressed159
0EA4 3084FD     883            jnb DEC_BUTTON, $
0EA7            883            
0EA7 755A00     883            mov state, #0
0EAA 7401       883            mov a, #0x01
0EAC 120083     883            lcall ?WriteCommand
0EAF C002       883            push AR2
0EB1 7A02       883            mov R2, #2
0EB3 120039     883            lcall ?Wait_Milli_Seconds
0EB6 D002       883            pop AR2
0EB8            883   no_button_pressed159:
0EB8            883            ; Move to state 0 to reselect values
0EB8            884            ; MAC (INC_BUTTON:    Constant string for the button name           6: state to jump to if the button is pressed )
0EB8 208220     884            jb INC_BUTTON, no_button_pressed163
0EBB C002       884            push AR2
0EBD 7A32       884            mov R2, #50
0EBF 120039     884            lcall ?Wait_Milli_Seconds
0EC2 D002       884            pop AR2
0EC4 208214     884            jb INC_BUTTON, no_button_pressed163
0EC7 3082FD     884            jnb INC_BUTTON, $
0ECA            884            
0ECA 755A06     884            mov state, #6
0ECD 7401       884            mov a, #0x01
0ECF 120083     884            lcall ?WriteCommand
0ED2 C002       884            push AR2
0ED4 7A02       884            mov R2, #2
0ED6 120039     884            lcall ?Wait_Milli_Seconds
0ED9 D002       884            pop AR2
0EDB            884   no_button_pressed163:
0EDB            884            ; Start Process
0EDB            885    
0EDB 020928     886            ljmp forever    
0EDE            887   
0EDE            888   state6:
0EDE            889                    ; 6 state number    10 next state
0EDE E55A       889       mov a, state
0EE0 B40602     889       cjne a, #6, skipstate167
0EE3 8003       889            sjmp no_skip_state167
0EE5            889   skipstate167:
0EE5 020EF9     889       ljmp state10
0EE8            889   no_skip_state167:
0EE8 C201       890            clr one_min_flag
0EEA            891            
0EEA E4         892            clr a
0EEB F539       893            mov run_time_sec, a
0EED F538       894            mov run_time_min, a
0EEF F53A       895            mov state_time, a
0EF1 755A0A     896            mov state, #10
0EF4 D206       897            setb short_beep_flag
0EF6 020928     898            ljmp forever
0EF9            899     
0EF9            900   state10:
0EF9            901   
0EF9            902                    ; 10 state number    11 next state
0EF9 E55A       902       mov a, state
0EFB B40A02     902       cjne a, #10, skipstate168
0EFE 8003       902            sjmp no_skip_state168
0F00            902   skipstate168:
0F00 021019     902       ljmp state11
0F03            902   no_skip_state168:
0F03 20090A     903            jb led_flag, state10ledon
0F06 D2A4       904            setb GREEN
0F08 D2A5       905            setb YELLOW
0F0A D2A6       906            setb RED
0F0C D2A7       907            setb BLUE
0F0E 8008       908            sjmp state10b
0F10            909   state10ledon:
0F10 D2A4       910            setb GREEN
0F12 C2A5       911            clr YELLOW
0F14 D2A6       912            setb RED
0F16 D2A7       913            setb BLUE
0F18            914   state10b:
0F18            915   
0F18            916            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0F18 208020     916            jb CYCLE_BUTTON, no_button_pressed169
0F1B C002       916            push AR2
0F1D 7A32       916            mov R2, #50
0F1F 120039     916            lcall ?Wait_Milli_Seconds
0F22 D002       916            pop AR2
0F24 208014     916            jb CYCLE_BUTTON, no_button_pressed169
0F27 3080FD     916            jnb CYCLE_BUTTON, $
0F2A            916            
0F2A 755A11     916            mov state, #17
0F2D 7401       916            mov a, #0x01
0F2F 120083     916            lcall ?WriteCommand
0F32 C002       916            push AR2
0F34 7A02       916            mov R2, #2
0F36 120039     916            lcall ?Wait_Milli_Seconds
0F39 D002       916            pop AR2
0F3B            916   no_button_pressed169:
0F3B            916   
0F3B C202       917            clr pwm_on                      ;100% pwm
0F3D D2B7       918            setb SSR_OUT            ; for 100% power
0F3F            919            ; MAC (Ramp2Soak:    Constant string for the first line on LCD           current_temp: Temperature                      run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
0F3F C0E0       919            push acc
0F41 7401       919            mov a, #1
0F43 14         919            dec a
0F44 1200C1     919            lcall ?Set_Cursor_1 ; Select column and row
0F47 D0E0       919            pop acc
0F49 C083       919            push dph
0F4B C082       919            push dpl
0F4D C0E0       919            push acc
0F4F 900548     919            mov dptr, #Ramp2Soak
0F52 1200B4     919            lcall ?Send_Constant_String
0F55 D0E0       919            pop acc
0F57 D082       919            pop dpl
0F59 D083       919            pop dph
0F5B            919     
0F5B C0E0       919            push acc
0F5D 7401       919            mov a, #1
0F5F 14         919            dec a
0F60 1200BF     919            lcall ?Set_Cursor_2 ; Select column and row
0F63 D0E0       919            pop acc         ;show temperture
0F65 855B3F     919            mov x+0, current_temp+0 
0F68 754000     919            mov x+1, #0
0F6B 754100     919            mov x+2, #0 
0F6E 754200     919            mov x+3, #0
0F71 1200DC     919            lcall hex2bcd
0F74 C000       919            push ar0
0F76 C0E0       919            push acc
0F78 7420       919            mov a, #' '
0F7A 12007E     919            lcall ?WriteData
0F7D A84A       919            mov r0, bcd+1
0F7F E8         919            mov a, r0
0F80 540F       919            anl a, #0fh
0F82 4430       919            orl a, #30h
0F84 12007E     919            lcall ?WriteData
0F87 D0E0       919            pop acc
0F89 D000       919            pop ar0
0F8B C000       919            push ar0
0F8D A849       919            mov r0, bcd
0F8F 1200C6     919            lcall ?Display_BCD
0F92 D000       919            pop ar0
0F94            919   
0F94 C0E0       919            push acc
0F96 7405       919            mov a, #5
0F98 14         919            dec a
0F99 1200BF     919            lcall ?Set_Cursor_2 ; Select column and row
0F9C D0E0       919            pop acc
0F9E C083       919            push dph
0FA0 C082       919            push dpl
0FA2 C0E0       919            push acc
0FA4 9005EF     919            mov dptr, #Cels
0FA7 1200B4     919            lcall ?Send_Constant_String
0FAA D0E0       919            pop acc
0FAC D082       919            pop dpl
0FAE D083       919            pop dph
0FB0            919   
0FB0 C0E0       919            push acc
0FB2 740B       919            mov a, #11
0FB4 14         919            dec a
0FB5 1200BF     919            lcall ?Set_Cursor_2 ; Select column and row
0FB8 D0E0       919            pop acc
0FBA 85383F     919            mov x+0, run_time_min+0 
0FBD 754000     919            mov x+1, #0
0FC0 754100     919            mov x+2, #0 
0FC3 754200     919            mov x+3, #0
0FC6 1200DC     919            lcall hex2bcd
0FC9 C000       919            push ar0
0FCB A849       919            mov r0, bcd
0FCD 1200C6     919            lcall ?Display_BCD
0FD0 D000       919            pop ar0
0FD2 C0E0       919            push acc
0FD4 743A       919            mov a, #':'
0FD6 12007E     919            lcall ?WriteData
0FD9 D0E0       919            pop acc
0FDB 85393F     919            mov x+0, run_time_sec+0 
0FDE 754000     919            mov x+1, #0
0FE1 754100     919            mov x+2, #0 
0FE4 754200     919            mov x+3, #0
0FE7 1200DC     919            lcall hex2bcd
0FEA C000       919            push ar0
0FEC A849       919            mov r0, bcd
0FEE 1200C6     919            lcall ?Display_BCD
0FF1 D000       919            pop ar0
0FF3            919            ;display the current stage and current temperature
0FF3 300111     920            jnb one_min_flag, not_one_min      ;check if 60 seconds has passed
0FF6 C201       921            clr one_min_flag
0FF8 E55B       922            mov a, current_temp
0FFA C3         923            clr c
0FFB B43200     924            cjne a, #50, check_thermocouple  ;check if thermocouple degree is bigger than 50
0FFE            925   check_thermocouple:
0FFE 5007       926            jnc not_one_min   ;if not bigger than 50, c=1, jump to display error
1000 755A10     927            mov state, #16
1003 D207       928            setb long_beep_flag
1005 800F       929            sjmp state10_Loop
1007            930     
1007            931   not_one_min:
1007 E535       932            mov a, soak_temp 
1009 C3         933            clr c 
100A 955B       934            subb a, current_temp   ;compare current_temp and soak_temp
100C 5008       935            jnc state10_Loop
100E            936     
100E 755A0B     937            mov state, #11
1011 E4         938            clr a
1012 F53A       939            mov state_time, a       ; reset state time to 0 for next state 
1014            940    
1014 D206       941            setb short_beep_flag
1016            942            
1016            943   
1016            944   state10_Loop:
1016 020928     945            ljmp forever
1019            946                    
1019            947   ; Soak Stage             
1019            948   state11:
1019            949                    ; 11 state number    12 next state
1019 E55A       949       mov a, state
101B B40B02     949       cjne a, #11, skipstate188
101E 8003       949            sjmp no_skip_state188
1020            949   skipstate188:
1020 021110     949       ljmp state12
1023            949   no_skip_state188:
1023 C2A5       950            clr YELLOW
1025            951            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1025 208020     951            jb CYCLE_BUTTON, no_button_pressed189
1028 C002       951            push AR2
102A 7A32       951            mov R2, #50
102C 120039     951            lcall ?Wait_Milli_Seconds
102F D002       951            pop AR2
1031 208014     951            jb CYCLE_BUTTON, no_button_pressed189
1034 3080FD     951            jnb CYCLE_BUTTON, $
1037            951            
1037 755A11     951            mov state, #17
103A 7401       951            mov a, #0x01
103C 120083     951            lcall ?WriteCommand
103F C002       951            push AR2
1041 7A02       951            mov R2, #2
1043 120039     951            lcall ?Wait_Milli_Seconds
1046 D002       951            pop AR2
1048            951   no_button_pressed189:
1048            951   
1048 D202       952            setb pwm_on                     ;25% pwm
104A            953            ; MAC (Soak:    Constant string for the first line on LCD           current_temp: Temperature                   run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
104A C0E0       953            push acc
104C 7401       953            mov a, #1
104E 14         953            dec a
104F 1200C1     953            lcall ?Set_Cursor_1 ; Select column and row
1052 D0E0       953            pop acc
1054 C083       953            push dph
1056 C082       953            push dpl
1058 C0E0       953            push acc
105A 900559     953            mov dptr, #Soak
105D 1200B4     953            lcall ?Send_Constant_String
1060 D0E0       953            pop acc
1062 D082       953            pop dpl
1064 D083       953            pop dph
1066            953     
1066 C0E0       953            push acc
1068 7401       953            mov a, #1
106A 14         953            dec a
106B 1200BF     953            lcall ?Set_Cursor_2 ; Select column and row
106E D0E0       953            pop acc         ;show temperture
1070 855B3F     953            mov x+0, current_temp+0 
1073 754000     953            mov x+1, #0
1076 754100     953            mov x+2, #0 
1079 754200     953            mov x+3, #0
107C 1200DC     953            lcall hex2bcd
107F C000       953            push ar0
1081 C0E0       953            push acc
1083 7420       953            mov a, #' '
1085 12007E     953            lcall ?WriteData
1088 A84A       953            mov r0, bcd+1
108A E8         953            mov a, r0
108B 540F       953            anl a, #0fh
108D 4430       953            orl a, #30h
108F 12007E     953            lcall ?WriteData
1092 D0E0       953            pop acc
1094 D000       953            pop ar0
1096 C000       953            push ar0
1098 A849       953            mov r0, bcd
109A 1200C6     953            lcall ?Display_BCD
109D D000       953            pop ar0
109F            953   
109F C0E0       953            push acc
10A1 7405       953            mov a, #5
10A3 14         953            dec a
10A4 1200BF     953            lcall ?Set_Cursor_2 ; Select column and row
10A7 D0E0       953            pop acc
10A9 C083       953            push dph
10AB C082       953            push dpl
10AD C0E0       953            push acc
10AF 9005EF     953            mov dptr, #Cels
10B2 1200B4     953            lcall ?Send_Constant_String
10B5 D0E0       953            pop acc
10B7 D082       953            pop dpl
10B9 D083       953            pop dph
10BB            953   
10BB C0E0       953            push acc
10BD 740B       953            mov a, #11
10BF 14         953            dec a
10C0 1200BF     953            lcall ?Set_Cursor_2 ; Select column and row
10C3 D0E0       953            pop acc
10C5 85383F     953            mov x+0, run_time_min+0 
10C8 754000     953            mov x+1, #0
10CB 754100     953            mov x+2, #0 
10CE 754200     953            mov x+3, #0
10D1 1200DC     953            lcall hex2bcd
10D4 C000       953            push ar0
10D6 A849       953            mov r0, bcd
10D8 1200C6     953            lcall ?Display_BCD
10DB D000       953            pop ar0
10DD C0E0       953            push acc
10DF 743A       953            mov a, #':'
10E1 12007E     953            lcall ?WriteData
10E4 D0E0       953            pop acc
10E6 85393F     953            mov x+0, run_time_sec+0 
10E9 754000     953            mov x+1, #0
10EC 754100     953            mov x+2, #0 
10EF 754200     953            mov x+3, #0
10F2 1200DC     953            lcall hex2bcd
10F5 C000       953            push ar0
10F7 A849       953            mov r0, bcd
10F9 1200C6     953            lcall ?Display_BCD
10FC D000       953            pop ar0
10FE            953   ;display the current stage and current temperature
10FE E53A       954            mov a, state_time 
1100 C3         955            clr c
1101 9534       956            subb a, soak_seconds 
1103 4008       957            jc      State11_Loop
1105            958     
1105 755A0C     959            mov state, #12 ;if time is equal set state to 12
1108 E4         960            clr a
1109 F53A       961            mov state_time, a       ; reset state time to 0 for next state 
110B            962     
110B D206       963            setb short_beep_flag
110D            964                    
110D            965   State11_Loop:
110D 020928     966     ljmp forever
1110            967     
1110            968                    
1110            969   ; Ramp to Reflow Stage, compare current_temp with reflow_temp            
1110            970   state12:
1110            971                    ; 12 state number    13 next state
1110 E55A       971       mov a, state
1112 B40C02     971       cjne a, #12, skipstate208
1115 8003       971            sjmp no_skip_state208
1117            971   skipstate208:
1117 02121C     971       ljmp state13
111A            971   no_skip_state208:
111A 20090A     972            jb led_flag, state12ledon
111D D2A4       973            setb GREEN
111F D2A5       974            setb YELLOW
1121 D2A6       975            setb RED
1123 D2A7       976            setb BLUE
1125 8008       977            sjmp state12b
1127            978   state12ledon:
1127 D2A4       979            setb GREEN
1129 D2A5       980            setb YELLOW
112B C2A6       981            clr RED
112D D2A7       982            setb BLUE
112F            983   state12b:
112F            984            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
112F 208020     984            jb CYCLE_BUTTON, no_button_pressed209
1132 C002       984            push AR2
1134 7A32       984            mov R2, #50
1136 120039     984            lcall ?Wait_Milli_Seconds
1139 D002       984            pop AR2
113B 208014     984            jb CYCLE_BUTTON, no_button_pressed209
113E 3080FD     984            jnb CYCLE_BUTTON, $
1141            984            
1141 755A11     984            mov state, #17
1144 7401       984            mov a, #0x01
1146 120083     984            lcall ?WriteCommand
1149 C002       984            push AR2
114B 7A02       984            mov R2, #2
114D 120039     984            lcall ?Wait_Milli_Seconds
1150 D002       984            pop AR2
1152            984   no_button_pressed209:
1152            984   
1152 C202       985            clr pwm_on
1154 D2B7       986            setb SSR_OUT    ;100% power on
1156            987            ; MAC (Ramp2Reflow:    Constant string for the first line on LCD           current_temp: Temperature                    run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
1156 C0E0       987            push acc
1158 7401       987            mov a, #1
115A 14         987            dec a
115B 1200C1     987            lcall ?Set_Cursor_1 ; Select column and row
115E D0E0       987            pop acc
1160 C083       987            push dph
1162 C082       987            push dpl
1164 C0E0       987            push acc
1166 900537     987            mov dptr, #Ramp2Reflow
1169 1200B4     987            lcall ?Send_Constant_String
116C D0E0       987            pop acc
116E D082       987            pop dpl
1170 D083       987            pop dph
1172            987     
1172 C0E0       987            push acc
1174 7401       987            mov a, #1
1176 14         987            dec a
1177 1200BF     987            lcall ?Set_Cursor_2 ; Select column and row
117A D0E0       987            pop acc
117C            987            ;show temperture
117C 855B3F     987            mov x+0, current_temp+0 
117F 754000     987            mov x+1, #0
1182 754100     987            mov x+2, #0 
1185 754200     987            mov x+3, #0
1188 1200DC     987            lcall hex2bcd
118B C000       987            push ar0
118D C0E0       987            push acc
118F 7420       987            mov a, #' '
1191 12007E     987            lcall ?WriteData
1194 A84A       987            mov r0, bcd+1
1196 E8         987            mov a, r0
1197 540F       987            anl a, #0fh
1199 4430       987            orl a, #30h
119B 12007E     987            lcall ?WriteData
119E D0E0       987            pop acc
11A0 D000       987            pop ar0
11A2 C000       987            push ar0
11A4 A849       987            mov r0, bcd
11A6 1200C6     987            lcall ?Display_BCD
11A9 D000       987            pop ar0
11AB            987   
11AB C0E0       987            push acc
11AD 7405       987            mov a, #5
11AF 14         987            dec a
11B0 1200BF     987            lcall ?Set_Cursor_2 ; Select column and row
11B3 D0E0       987            pop acc
11B5 C083       987            push dph
11B7 C082       987            push dpl
11B9 C0E0       987            push acc
11BB 9005EF     987            mov dptr, #Cels
11BE 1200B4     987            lcall ?Send_Constant_String
11C1 D0E0       987            pop acc
11C3 D082       987            pop dpl
11C5 D083       987            pop dph
11C7            987   
11C7 C0E0       987            push acc
11C9 740B       987            mov a, #11
11CB 14         987            dec a
11CC 1200BF     987            lcall ?Set_Cursor_2 ; Select column and row
11CF D0E0       987            pop acc
11D1 85383F     987            mov x+0, run_time_min+0 
11D4 754000     987            mov x+1, #0
11D7 754100     987            mov x+2, #0 
11DA 754200     987            mov x+3, #0
11DD 1200DC     987            lcall hex2bcd
11E0 C000       987            push ar0
11E2 A849       987            mov r0, bcd
11E4 1200C6     987            lcall ?Display_BCD
11E7 D000       987            pop ar0
11E9 C0E0       987            push acc
11EB 743A       987            mov a, #':'
11ED 12007E     987            lcall ?WriteData
11F0 D0E0       987            pop acc
11F2 85393F     987            mov x+0, run_time_sec+0 
11F5 754000     987            mov x+1, #0
11F8 754100     987            mov x+2, #0 
11FB 754200     987            mov x+3, #0
11FE 1200DC     987            lcall hex2bcd
1201 C000       987            push ar0
1203 A849       987            mov r0, bcd
1205 1200C6     987            lcall ?Display_BCD
1208 D000       987            pop ar0
120A            987            ;display the current, temperature and running time
120A E537       988            mov a, reflow_temp
120C C3         989            clr c
120D 955B       990            subb a, current_temp
120F 5008       991            jnc State12Loop
1211            992     
1211 755A0D     993            mov state, #13
1214 D206       994            setb short_beep_flag
1216 E4         995            clr a
1217 F53A       996            mov state_time, a       ; reset state time to 0 for next state 
1219            997     
1219            998   State12Loop:
1219 020928     999            ljmp forever
121C           1000   
121C           1001   ; Reflow stage, compare reflow_seconds to current time, move to cooling stage when complete (Still need beep code)
121C           1002   state13:
121C           1003                    ; 13 state number    14 next state
121C E55A      1003       mov a, state
121E B40D02    1003       cjne a, #13, skipstate228
1221 8003      1003            sjmp no_skip_state228
1223           1003   skipstate228:
1223 02137B    1003       ljmp state14
1226           1003   no_skip_state228:
1226 C2A6      1004            clr RED
1228           1005            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1228 208020    1005            jb CYCLE_BUTTON, no_button_pressed229
122B C002      1005            push AR2
122D 7A32      1005            mov R2, #50
122F 120039    1005            lcall ?Wait_Milli_Seconds
1232 D002      1005            pop AR2
1234 208014    1005            jb CYCLE_BUTTON, no_button_pressed229
1237 3080FD    1005            jnb CYCLE_BUTTON, $
123A           1005            
123A 755A11    1005            mov state, #17
123D 7401      1005            mov a, #0x01
123F 120083    1005            lcall ?WriteCommand
1242 C002      1005            push AR2
1244 7A02      1005            mov R2, #2
1246 120039    1005            lcall ?Wait_Milli_Seconds
1249 D002      1005            pop AR2
124B           1005   no_button_pressed229:
124B           1005   
124B D202      1006            setb pwm_on ; Set PWM to 25% power
124D           1007            ; MAC (Reflow:    Constant string for the first line on LCD           current_temp: Temperature                         run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
124D C0E0      1007            push acc
124F 7401      1007            mov a, #1
1251 14        1007            dec a
1252 1200C1    1007            lcall ?Set_Cursor_1 ; Select column and row
1255 D0E0      1007            pop acc
1257 C083      1007            push dph
1259 C082      1007            push dpl
125B C0E0      1007            push acc
125D 90056A    1007            mov dptr, #Reflow
1260 1200B4    1007            lcall ?Send_Constant_String
1263 D0E0      1007            pop acc
1265 D082      1007            pop dpl
1267 D083      1007            pop dph
1269           1007     
1269 C0E0      1007            push acc
126B 7401      1007            mov a, #1
126D 14        1007            dec a
126E 1200BF    1007            lcall ?Set_Cursor_2 ; Select column and row
1271 D0E0      1007            pop acc         ;show temperture
1273 855B3F    1007            mov x+0, current_temp+0 
1276 754000    1007            mov x+1, #0
1279 754100    1007            mov x+2, #0 
127C 754200    1007            mov x+3, #0
127F 1200DC    1007            lcall hex2bcd
1282 C000      1007            push ar0
1284 C0E0      1007            push acc
1286 7420      1007            mov a, #' '
1288 12007E    1007            lcall ?WriteData
128B A84A      1007            mov r0, bcd+1
128D E8        1007            mov a, r0
128E 540F      1007            anl a, #0fh
1290 4430      1007            orl a, #30h
1292 12007E    1007            lcall ?WriteData
1295 D0E0      1007            pop acc
1297 D000      1007            pop ar0
1299 C000      1007            push ar0
129B A849      1007            mov r0, bcd
129D 1200C6    1007            lcall ?Display_BCD
12A0 D000      1007            pop ar0
12A2           1007   
12A2 C0E0      1007            push acc
12A4 7405      1007            mov a, #5
12A6 14        1007            dec a
12A7 1200BF    1007            lcall ?Set_Cursor_2 ; Select column and row
12AA D0E0      1007            pop acc
12AC C083      1007            push dph
12AE C082      1007            push dpl
12B0 C0E0      1007            push acc
12B2 9005EF    1007            mov dptr, #Cels
12B5 1200B4    1007            lcall ?Send_Constant_String
12B8 D0E0      1007            pop acc
12BA D082      1007            pop dpl
12BC D083      1007            pop dph
12BE           1007   
12BE C0E0      1007            push acc
12C0 740B      1007            mov a, #11
12C2 14        1007            dec a
12C3 1200BF    1007            lcall ?Set_Cursor_2 ; Select column and row
12C6 D0E0      1007            pop acc
12C8 85383F    1007            mov x+0, run_time_min+0 
12CB 754000    1007            mov x+1, #0
12CE 754100    1007            mov x+2, #0 
12D1 754200    1007            mov x+3, #0
12D4 1200DC    1007            lcall hex2bcd
12D7 C000      1007            push ar0
12D9 A849      1007            mov r0, bcd
12DB 1200C6    1007            lcall ?Display_BCD
12DE D000      1007            pop ar0
12E0 C0E0      1007            push acc
12E2 743A      1007            mov a, #':'
12E4 12007E    1007            lcall ?WriteData
12E7 D0E0      1007            pop acc
12E9 85393F    1007            mov x+0, run_time_sec+0 
12EC 754000    1007            mov x+1, #0
12EF 754100    1007            mov x+2, #0 
12F2 754200    1007            mov x+3, #0
12F5 1200DC    1007            lcall hex2bcd
12F8 C000      1007            push ar0
12FA A849      1007            mov r0, bcd
12FC 1200C6    1007            lcall ?Display_BCD
12FF D000      1007            pop ar0
1301           1007   ;display the current stage and current temperature
1301           1008     
1301           1009            ;compare the temperature with 235 degree for safety consideration
1301 E55B      1010            mov a, current_temp
1303 C3        1011            clr c
1304 94EB      1012            subb a, #235
1306 4061      1013            jc no_Burn_Warning                                                      ;if current temperature - 235 <= 0 (c=1), no warning
1308 C0E0      1014            push acc
130A 7401      1014            mov a, #1
130C 14        1014            dec a
130D 1200C1    1014            lcall ?Set_Cursor_1 ; Select column and row
1310 D0E0      1014            pop acc
1312 C083      1014            push dph
1314 C082      1014            push dpl
1316 C0E0      1014            push acc
1318 9005F6    1014            mov dptr, #BurnMsg
131B 1200B4    1014            lcall ?Send_Constant_String
131E D0E0      1014            pop acc
1320 D082      1014            pop dpl
1322 D083      1014            pop dph
1324 C0E0      1014            push acc
1326 7401      1014            mov a, #1
1328 14        1014            dec a
1329 1200BF    1014            lcall ?Set_Cursor_2 ; Select column and row
132C D0E0      1014            pop acc
132E C083      1014            push dph
1330 C082      1014            push dpl
1332 C0E0      1014            push acc
1334 900607    1014            mov dptr, #StopMsg
1337 1200B4    1014            lcall ?Send_Constant_String
133A D0E0      1014            pop acc
133C D082      1014            pop dpl
133E D083      1014            pop dph                 ;displaying warning message and ask the user to press STOP button to stop reflow process
1340 D206      1015            setb short_beep_flag
1342 C002      1016            push AR2
1344 7AFA      1016            mov R2, #250
1346 120039    1016            lcall ?Wait_Milli_Seconds
1349 D002      1016            pop AR2
134B C002      1017            push AR2
134D 7AFA      1017            mov R2, #250
134F 120039    1017            lcall ?Wait_Milli_Seconds
1352 D002      1017            pop AR2
1354 C002      1018            push AR2
1356 7AFA      1018            mov R2, #250
1358 120039    1018            lcall ?Wait_Milli_Seconds
135B D002      1018            pop AR2
135D C002      1019            push AR2
135F 7AFA      1019            mov R2, #250
1361 120039    1019            lcall ?Wait_Milli_Seconds
1364 D002      1019            pop AR2
1366 755A11    1020            mov state, #17
1369           1021     
1369           1022   no_Burn_Warning: 
1369 E536      1023            mov a, reflow_seconds
136B C3        1024            clr c
136C 953A      1025            subb a, state_time 
136E 5008      1026            jnc state13Loop ; Compare if time elapsed = reflow time
1370 755A0E    1027            mov state, #14  ; Reflow done, move to cooling
1373 E4        1028            clr a
1374 F53A      1029            mov state_time, a ; Reset state time variable
1376 D207      1030            setb long_beep_flag
1378           1031   state13Loop:
1378 020928    1032            ljmp forever
137B           1033   
137B           1034   ; Cooling stage, power is set to 0, finish and sound multiple beeps when temperature is below 60
137B           1035   state14:
137B           1036                    ; 14 state number    15 next state
137B E55A      1036       mov a, state
137D B40E02    1036       cjne a, #14, skipstate257
1380 8003      1036            sjmp no_skip_state257
1382           1036   skipstate257:
1382 021479    1036       ljmp state15
1385           1036   no_skip_state257:
1385 C2A7      1037            clr BLUE
1387 D2A4      1038            setb GREEN
1389 D2A5      1039            setb YELLOW
138B D2A6      1040            setb RED
138D           1041            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
138D 208020    1041            jb CYCLE_BUTTON, no_button_pressed258
1390 C002      1041            push AR2
1392 7A32      1041            mov R2, #50
1394 120039    1041            lcall ?Wait_Milli_Seconds
1397 D002      1041            pop AR2
1399 208014    1041            jb CYCLE_BUTTON, no_button_pressed258
139C 3080FD    1041            jnb CYCLE_BUTTON, $
139F           1041            
139F 755A11    1041            mov state, #17
13A2 7401      1041            mov a, #0x01
13A4 120083    1041            lcall ?WriteCommand
13A7 C002      1041            push AR2
13A9 7A02      1041            mov R2, #2
13AB 120039    1041            lcall ?Wait_Milli_Seconds
13AE D002      1041            pop AR2
13B0           1041   no_button_pressed258:
13B0           1041   
13B0 C202      1042       clr pwm_on
13B2 C203      1042       clr pwm_high
13B4 C2B7      1042       clr SSR_OUT
13B6           1042   
13B6           1043            ; MAC (Cooling:    Constant string for the first line on LCD           current_temp: Temperature                        run_time_min: Time (minutes)   run_time_sec: Time (seconds) )
13B6 C0E0      1043            push acc
13B8 7401      1043            mov a, #1
13BA 14        1043            dec a
13BB 1200C1    1043            lcall ?Set_Cursor_1 ; Select column and row
13BE D0E0      1043            pop acc
13C0 C083      1043            push dph
13C2 C082      1043            push dpl
13C4 C0E0      1043            push acc
13C6 90057B    1043            mov dptr, #Cooling
13C9 1200B4    1043            lcall ?Send_Constant_String
13CC D0E0      1043            pop acc
13CE D082      1043            pop dpl
13D0 D083      1043            pop dph
13D2           1043     
13D2 C0E0      1043            push acc
13D4 7401      1043            mov a, #1
13D6 14        1043            dec a
13D7 1200BF    1043            lcall ?Set_Cursor_2 ; Select column and row
13DA D0E0      1043            pop acc         ;show temperture
13DC 855B3F    1043            mov x+0, current_temp+0 
13DF 754000    1043            mov x+1, #0
13E2 754100    1043            mov x+2, #0 
13E5 754200    1043            mov x+3, #0
13E8 1200DC    1043            lcall hex2bcd
13EB C000      1043            push ar0
13ED C0E0      1043            push acc
13EF 7420      1043            mov a, #' '
13F1 12007E    1043            lcall ?WriteData
13F4 A84A      1043            mov r0, bcd+1
13F6 E8        1043            mov a, r0
13F7 540F      1043            anl a, #0fh
13F9 4430      1043            orl a, #30h
13FB 12007E    1043            lcall ?WriteData
13FE D0E0      1043            pop acc
1400 D000      1043            pop ar0
1402 C000      1043            push ar0
1404 A849      1043            mov r0, bcd
1406 1200C6    1043            lcall ?Display_BCD
1409 D000      1043            pop ar0
140B           1043   
140B C0E0      1043            push acc
140D 7405      1043            mov a, #5
140F 14        1043            dec a
1410 1200BF    1043            lcall ?Set_Cursor_2 ; Select column and row
1413 D0E0      1043            pop acc
1415 C083      1043            push dph
1417 C082      1043            push dpl
1419 C0E0      1043            push acc
141B 9005EF    1043            mov dptr, #Cels
141E 1200B4    1043            lcall ?Send_Constant_String
1421 D0E0      1043            pop acc
1423 D082      1043            pop dpl
1425 D083      1043            pop dph
1427           1043   
1427 C0E0      1043            push acc
1429 740B      1043            mov a, #11
142B 14        1043            dec a
142C 1200BF    1043            lcall ?Set_Cursor_2 ; Select column and row
142F D0E0      1043            pop acc
1431 85383F    1043            mov x+0, run_time_min+0 
1434 754000    1043            mov x+1, #0
1437 754100    1043            mov x+2, #0 
143A 754200    1043            mov x+3, #0
143D 1200DC    1043            lcall hex2bcd
1440 C000      1043            push ar0
1442 A849      1043            mov r0, bcd
1444 1200C6    1043            lcall ?Display_BCD
1447 D000      1043            pop ar0
1449 C0E0      1043            push acc
144B 743A      1043            mov a, #':'
144D 12007E    1043            lcall ?WriteData
1450 D0E0      1043            pop acc
1452 85393F    1043            mov x+0, run_time_sec+0 
1455 754000    1043            mov x+1, #0
1458 754100    1043            mov x+2, #0 
145B 754200    1043            mov x+3, #0
145E 1200DC    1043            lcall hex2bcd
1461 C000      1043            push ar0
1463 A849      1043            mov r0, bcd
1465 1200C6    1043            lcall ?Display_BCD
1468 D000      1043            pop ar0
146A           1043   
146A E55B      1044            mov a, current_temp
146C C3        1045            clr c
146D 943C      1046            subb a, #60
146F 5005      1047            jnc state14loop ; If more than 60 degrees, not safe to touch yet
1471           1048            
1471 D208      1049            setb six_beep_flag
1473 755A0F    1050            mov state, #15 ; Go to done state
1476           1051   state14loop:
1476 020928    1052            ljmp forever
1479           1053     
1479           1054   ; Cooling completed state, accessed when temperature has cooled down to below 60C
1479           1055   state15:   
1479           1056                    ; 15 state number    16 next state
1479 E55A      1056       mov a, state
147B B40F02    1056       cjne a, #15, skipstate278
147E 8003      1056            sjmp no_skip_state278
1480           1056   skipstate278:
1480 0214E9    1056       ljmp state16
1483           1056   no_skip_state278:
1483 C2A4      1057            clr GREEN
1485 D2A5      1058            setb YELLOW
1487 D2A6      1059            setb RED
1489 D2A7      1060            setb BLUE
148B C0E0      1061            push acc
148D 7401      1061            mov a, #1
148F 14        1061            dec a
1490 1200C1    1061            lcall ?Set_Cursor_1 ; Select column and row
1493 D0E0      1061            pop acc
1495 C083      1061            push dph
1497 C082      1061            push dpl
1499 C0E0      1061            push acc
149B 90058C    1061            mov dptr, #CompleteMsg
149E 1200B4    1061            lcall ?Send_Constant_String
14A1 D0E0      1061            pop acc
14A3 D082      1061            pop dpl
14A5 D083      1061            pop dph
14A7 C0E0      1061            push acc
14A9 7401      1061            mov a, #1
14AB 14        1061            dec a
14AC 1200BF    1061            lcall ?Set_Cursor_2 ; Select column and row
14AF D0E0      1061            pop acc
14B1           1061   
14B1 C083      1061            push dph
14B3 C082      1061            push dpl
14B5 C0E0      1061            push acc
14B7 9005BF    1061            mov dptr, #ConfirmMsg
14BA 1200B4    1061            lcall ?Send_Constant_String
14BD D0E0      1061            pop acc
14BF D082      1061            pop dpl
14C1 D083      1061            pop dph
14C3           1062            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
14C3 208420    1062            jb DEC_BUTTON, no_button_pressed284
14C6 C002      1062            push AR2
14C8 7A32      1062            mov R2, #50
14CA 120039    1062            lcall ?Wait_Milli_Seconds
14CD D002      1062            pop AR2
14CF 208414    1062            jb DEC_BUTTON, no_button_pressed284
14D2 3084FD    1062            jnb DEC_BUTTON, $
14D5           1062            
14D5 755A00    1062            mov state, #0
14D8 7401      1062            mov a, #0x01
14DA 120083    1062            lcall ?WriteCommand
14DD C002      1062            push AR2
14DF 7A02      1062            mov R2, #2
14E1 120039    1062            lcall ?Wait_Milli_Seconds
14E4 D002      1062            pop AR2
14E6           1062   no_button_pressed284:
14E6           1062   
14E6 020928    1063            ljmp forever
14E9           1064     
14E9           1065   state16:                         ;display error message
14E9           1066                    ; 16 state number    17 next state
14E9 E55A      1066       mov a, state
14EB B41002    1066       cjne a, #16, skipstate288
14EE 8003      1066            sjmp no_skip_state288
14F0           1066   skipstate288:
14F0 02155F    1066       ljmp state17
14F3           1066   no_skip_state288:
14F3 C2A6      1067            clr RED
14F5 D2A4      1068            setb GREEN
14F7 D2A5      1069            setb YELLOW
14F9 D2A7      1070            setb BLUE
14FB C202      1071       clr pwm_on
14FD C203      1071       clr pwm_high
14FF C2B7      1071       clr SSR_OUT
1501 C0E0      1072            push acc
1503 7401      1072            mov a, #1
1505 14        1072            dec a
1506 1200C1    1072            lcall ?Set_Cursor_1 ; Select column and row
1509 D0E0      1072            pop acc
150B C083      1072            push dph
150D C082      1072            push dpl
150F C0E0      1072            push acc
1511 90059D    1072            mov dptr, #Lessthan50ErrorMsg
1514 1200B4    1072            lcall ?Send_Constant_String
1517 D0E0      1072            pop acc
1519 D082      1072            pop dpl
151B D083      1072            pop dph
151D C0E0      1072            push acc
151F 7401      1072            mov a, #1
1521 14        1072            dec a
1522 1200BF    1072            lcall ?Set_Cursor_2 ; Select column and row
1525 D0E0      1072            pop acc
1527 C083      1072            push dph
1529 C082      1072            push dpl
152B C0E0      1072            push acc
152D 9005BF    1072            mov dptr, #ConfirmMsg
1530 1200B4    1072            lcall ?Send_Constant_String
1533 D0E0      1072            pop acc
1535 D082      1072            pop dpl
1537 D083      1072            pop dph         
1539           1073            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
1539 208420    1073            jb DEC_BUTTON, no_button_pressed295
153C C002      1073            push AR2
153E 7A32      1073            mov R2, #50
1540 120039    1073            lcall ?Wait_Milli_Seconds
1543 D002      1073            pop AR2
1545 208414    1073            jb DEC_BUTTON, no_button_pressed295
1548 3084FD    1073            jnb DEC_BUTTON, $
154B           1073            
154B 755A00    1073            mov state, #0
154E 7401      1073            mov a, #0x01
1550 120083    1073            lcall ?WriteCommand
1553 C002      1073            push AR2
1555 7A02      1073            mov R2, #2
1557 120039    1073            lcall ?Wait_Milli_Seconds
155A D002      1073            pop AR2
155C           1073   no_button_pressed295:
155C           1073   
155C 020928    1074            ljmp forever
155F           1075     
155F           1076   ; Force Quit state, accessed when STOP button is pressed during any reflow stage
155F           1077   state17:
155F C2A6      1078            clr RED
1561 D2A4      1079            setb GREEN
1563 D2A5      1080            setb YELLOW
1565 D2A7      1081            setb BLUE
1567 C202      1082       clr pwm_on
1569 C203      1082       clr pwm_high
156B C2B7      1082       clr SSR_OUT
156D           1082            
156D C0E0      1083            push acc
156F 7401      1083            mov a, #1
1571 14        1083            dec a
1572 1200C1    1083            lcall ?Set_Cursor_1 ; Select column and row
1575 D0E0      1083            pop acc
1577 C083      1083            push dph
1579 C082      1083            push dpl
157B C0E0      1083            push acc
157D 9005AE    1083            mov dptr, #AbortMsg
1580 1200B4    1083            lcall ?Send_Constant_String
1583 D0E0      1083            pop acc
1585 D082      1083            pop dpl
1587 D083      1083            pop dph
1589 C0E0      1083            push acc
158B 7401      1083            mov a, #1
158D 14        1083            dec a
158E 1200BF    1083            lcall ?Set_Cursor_2 ; Select column and row
1591 D0E0      1083            pop acc
1593 C083      1083            push dph
1595 C082      1083            push dpl
1597 C0E0      1083            push acc
1599 9005BF    1083            mov dptr, #ConfirmMsg
159C 1200B4    1083            lcall ?Send_Constant_String
159F D0E0      1083            pop acc
15A1 D082      1083            pop dpl
15A3 D083      1083            pop dph
15A5           1084            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
15A5 208420    1084            jb DEC_BUTTON, no_button_pressed305
15A8 C002      1084            push AR2
15AA 7A32      1084            mov R2, #50
15AC 120039    1084            lcall ?Wait_Milli_Seconds
15AF D002      1084            pop AR2
15B1 208414    1084            jb DEC_BUTTON, no_button_pressed305
15B4 3084FD    1084            jnb DEC_BUTTON, $
15B7           1084            
15B7 755A00    1084            mov state, #0
15BA 7401      1084            mov a, #0x01
15BC 120083    1084            lcall ?WriteCommand
15BF C002      1084            push AR2
15C1 7A02      1084            mov R2, #2
15C3 120039    1084            lcall ?Wait_Milli_Seconds
15C6 D002      1084            pop AR2
15C8           1084   no_button_pressed305:
15C8           1084   
15C8 020928    1085            ljmp forever
15CB           1086            
15CB           1087   
15CB           1088   
15CB           1089   end
