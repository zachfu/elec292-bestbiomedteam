0000              1   ; Author: Zachary Fu
0000              2   ; Student#: 10869155
0000              3   ;
0000              4   ; Module3 - Zach.asm: Thermometer - Reads data from temperature sensor through ADC,
0000              5   ; displays it on LCD, and sends temperature to connected serial communication program
0000              6   ; Can display temperature in Celsius, Kelvin, and Fahrenheit, and has light and sound
0000              7   ; indicators for different temperature ranges
0000              8   
                 -1   $MODLP52
0000              1   ;  MODLP52: Register definition for Atmel's AT89LP52
0000              2   ;
0000              3   ;   Copyright (C) 2011-2015  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19   ;--------------------------------------------------------
0000             20   ; Special Function Registers
0000             21   ;--------------------------------------------------------
0000             22   P0             DATA 0x80
0000             23   P1             DATA 0x90
0000             24   P2             DATA 0xa0
0000             25   P3             DATA 0xb0
0000             26   P4             DATA 0xc0
0000             27   PMOD           DATA 0xc1
0000             28   PSW            DATA 0xd0
0000             29   ACC            DATA 0xe0
0000             30   B              DATA 0xf0
0000             31   SP             DATA 0x81
0000             32   DPL            DATA 0x82
0000             33   DPH            DATA 0x83
0000             34   DP0L           DATA 0x82
0000             35   DP0H           DATA 0x83
0000             36   DP1L           DATA 0x84
0000             37   DP1H           DATA 0x85
0000             38   AUXR           DATA 0x8e
0000             39   AUXR1          DATA 0xa2
0000             40   DPCF           DATA 0xa2
0000             41   TCON           DATA 0x88
0000             42   TMOD           DATA 0x89
0000             43   T2CON          DATA 0xc8
0000             44   T2MOD          DATA 0xc9
0000             45   TL0            DATA 0x8a
0000             46   TL1            DATA 0x8b
0000             47   TL2            DATA 0xcc
0000             48   TH0            DATA 0x8c
0000             49   TH1            DATA 0x8d
0000             50   TH2            DATA 0xcd
0000             51   TCONB          DATA 0x91
0000             52   RCAP2L         DATA 0xca
0000             53   RCAP2H         DATA 0xcb
0000             54   WDTRST         DATA 0xa6
0000             55   WDTCON         DATA 0xa7
0000             56   SCON           DATA 0x98
0000             57   SBUF           DATA 0x99
0000             58   SADEN          DATA 0xb9
0000             59   SADDR          DATA 0xa9
0000             60   IE             DATA 0xa8
0000             61   IP             DATA 0xb8
0000             62   IPH            DATA 0xb7
0000             63   PCON           DATA 0x87
0000             64   CLKREG         DATA 0x8f
0000             65   MEMCON         DATA 0x96
0000             66   ;--------------------------------------------------------
0000             67   ; special function bits
0000             68   ;--------------------------------------------------------
0000             69   SCK            BIT 0x97
0000             70   MISO           BIT 0x96
0000             71   MOSI           BIT 0x95
0000             72   T2EX           BIT 0x91
0000             73   T2             BIT 0x90
0000             74   RD             BIT 0xb7
0000             75   WR             BIT 0xb6
0000             76   T1             BIT 0xb5
0000             77   T0             BIT 0xb4
0000             78   INT1           BIT 0xb3
0000             79   INT0           BIT 0xb2
0000             80   TXD            BIT 0xb1
0000             81   RXD            BIT 0xb0
0000             82   XTAL2          BIT 0xc7
0000             83   XTAL1          BIT 0xc6
0000             84   PSEN           BIT 0xc5
0000             85   ALE            BIT 0xc4
0000             86   CY             BIT 0xd7
0000             87   AC             BIT 0xd6
0000             88   F0             BIT 0xd5
0000             89   RS1            BIT 0xd4
0000             90   RS0            BIT 0xd3
0000             91   OV             BIT 0xd2
0000             92   UD             BIT 0xd1
0000             93   P              BIT 0xd0
0000             94   TF1            BIT 0x8f
0000             95   TR1            BIT 0x8e
0000             96   TF0            BIT 0x8d
0000             97   TR0            BIT 0x8c
0000             98   IE1            BIT 0x8b
0000             99   IT1            BIT 0x8a
0000            100   IE0            BIT 0x89
0000            101   IT0            BIT 0x88
0000            102   TF2            BIT 0xcf
0000            103   EXF2           BIT 0xce
0000            104   RCLK           BIT 0xcd
0000            105   TCLK           BIT 0xcc
0000            106   EXEN2          BIT 0xcb
0000            107   TR2            BIT 0xca
0000            108   C_T2           BIT 0xc9
0000            109   CP_RL2         BIT 0xc8
0000            110   SM0            BIT 0x9f
0000            111   FE             BIT 0x9f
0000            112   SM1            BIT 0x9e
0000            113   SM2            BIT 0x9d
0000            114   REN            BIT 0x9c
0000            115   TB8            BIT 0x9b
0000            116   RB8            BIT 0x9a
0000            117   TI             BIT 0x99
0000            118   RI             BIT 0x98
0000            119   EA             BIT 0xaf
0000            120   ET2            BIT 0xad
0000            121   ES             BIT 0xac
0000            122   ET1            BIT 0xab
0000            123   EX1            BIT 0xaa
0000            124   ET0            BIT 0xa9
0000            125   EX0            BIT 0xa8
0000            126   PT2            BIT 0xbd
0000            127   PS             BIT 0xbc
0000            128   PT1            BIT 0xbb
0000            129   PX1            BIT 0xba
0000            130   PT0            BIT 0xb9
0000            131   PX0            BIT 0xb8
0000             10   org 0000H
0000 0203CB      11      ljmp Init
0003             12   
0003             13   CLK  EQU 22118400
0003             14   VLED EQU 207
0003             15   BAUD equ 115200
0003             16   T1LOAD equ (0x100-(CLK/(16*BAUD)))
0003             17   TIMER0_RATE        EQU 1000
0003             18   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             19   
0003             20   ; These ’EQU’ must match the wiring between the microcontroller and ADC
0003             21   CE_ADC EQU P2.0
0003             22   MY_MOSI EQU P2.1
0003             23   MY_MISO EQU P2.2
0003             24   MY_SCLK EQU P2.3
0003             25   BOOT_BUTTON EQU P4.5
0003             26   LCD_RS equ P1.2
0003             27   LCD_RW equ P1.3
0003             28   LCD_E  equ P1.4
0003             29   LCD_D4 equ P3.2
0003             30   LCD_D5 equ P3.3
0003             31   LCD_D6 equ P3.4
0003             32   LCD_D7 equ P3.5
0003             33   SOUND_OUT equ P2.7
0003             34   GREEN  equ P2.6
0003             35   YELLOW equ P2.5
0003             36   RED    equ P2.4
0003             37   
000B             38   org 0x0B
000B 02036C      39            ljmp Timer0_ISR
000E             40            
                546   $LIST
                 43   $LIST
032C             45   
032C             46   
032C             47   
0030             48   dseg at 0x30
0030             49   Timer0_Count1ms:          ds 2 ;
0032             50   Vcc:             ds 4
0036             51   Result:          ds 2
0038             52   x:           ds 4
003C             53   y:               ds 4
0040             54   dC:                      ds 4
0044             55   dF:                      ds 4
0048             56   dK:                      ds 4
004C             57   bcd:             ds 5
0051             58   bcdC:            ds 5
0056             59   bcdK:            ds 5
005B             60   spistring:       ds 10
0065             61   
0000             62   BSEG
0000             63   mf: dbit 1
0001             64   CelsiusFlag: dbit 1
0002             65   FahrenFlag: dbit 1
0003             66   KelvinFlag: dbit 1
0004             67   
032C             68   CSEG
032C 20DF4300    69   Cels: db ' ',11011111b, 'C',0
0330 20DF4600    70   Fahr: db ' ',11011111b, 'F',0
0334 20DF4B00    71   Kelv: db ' ',11011111b, 'K',0
0338             72            
                 73   bcd2ascii MAC
                 74   	mov a, bcd+%0
                 75   	mov R1, a
                 76   	anl a, #0x0F
                 77   	add a, #0x30
                 78   	mov spistring+%1, a
                 79   	mov a, R1
                 80   	anl a, #0xF0
                 81   	swap a
                 82   	add a, #0x30
                 83   	mov spistring+%2, a
                 84   ENDMAC
0338             85   
                 86   sendserialstring MAC
                 87   	mov a, spistring+6
                 88   	lcall putchar
                 89   	mov a, spistring+5
                 90   	lcall putchar
                 91   	mov a, spistring+4
                 92   	lcall putchar
                 93   	mov a, spistring+3
                 94   	lcall putchar
                 95   	mov a, spistring+2
                 96   	lcall putchar
                 97   	mov a, spistring+1
                 98   	lcall putchar
                 99   	mov a, spistring+0
                100   	lcall putchar
                101   	mov a, #'\n'
                102   	lcall putchar
                103   ENDMAC
0338            104   
                105   Read_ADC_Channel MAC
                106   	mov b, #%0
                107   	lcall _Read_ADC_Channel
                108   	ENDMAC
0338            109   _Read_ADC_Channel:
0338 C2A0       110            clr CE_ADC
033A 7801       111            mov R0, #00000001B ; Start bit:1
033C 120380     112            lcall DO_SPI_G
033F E5F0       113            mov a, b
0341 C4         114            swap a
0342 54F0       115            anl a, #0F0H
0344 D2E7       116            setb acc.7 ; Single mode (bit 7).
0346 F8         117            mov R0, a
0347 120380     118            lcall DO_SPI_G
034A E9         119            mov a, R1 ; R1 contains bits 8 and 9
034B 5403       120            anl a, #00000011B ; We need only the two least significant bits
034D F537       121            mov result+1, a ; Save result high.
034F 7855       122            mov R0, #55H ; It doesn't matter what we transmit...
0351 120380     123            lcall DO_SPI_G
0354 8936       124            mov result+0, R1 ; R1 contains bits 0 to 7. Save result low.
0356 D2A0       125            setb CE_ADC
0358            126            
0358 22         127            ret
0359            128            
0359            129   Timer0_Init:
0359 E589       130            mov a, TMOD
035B 54F0       131            anl a, #0xf0 ; Clear the bits for timer 0
035D 4401       132            orl a, #0x01 ; Configure timer 0 as 16-timer
035F F589       133            mov TMOD, a
0361 758CA9     134            mov TH0, #high(TIMER0_RELOAD)
0364 758A9A     135            mov TL0, #low(TIMER0_RELOAD)
0367            136            ; Enable the timer and interrupts
0367 D2A9       137       setb ET0  ; Enable timer 0 interrupt
0369 C28C       138       clr TR0  ; Disable timer 0 by default
036B 22         139            ret
036C            140            
036C            141   Timer0_ISR:
036C            142            ; Generates tone when TR0 = 1
036C C28C       143            clr TR0
036E 758CA9     144            mov TH0, #high(TIMER0_RELOAD)
0371 758A9A     145            mov TL0, #low(TIMER0_RELOAD)
0374 D28C       146            setb TR0
0376 B2A7       147            cpl SOUND_OUT 
0378            148   
0378 32         149            reti
0379            150            
0379            151   INIT_SPI:
0379 D2A2       152            setb MY_MISO ; Make MISO an input pin
037B C2A3       153            clr MY_SCLK ; For mode (0,0) SCLK is zero
037D D2A0       154            setb CE_ADC
037F 22         155            ret
0380            156   
0380            157   DO_SPI_G:
0380 C0E0       158            push acc
0382 7900       159            mov R1, #0 ; Received byte stored in R1
0384 7A08       160            mov R2, #8 ; Loop counter (8-bits)
0386            161   DO_SPI_G_LOOP:
0386 E8         162            mov a, R0 ; Byte to write is in R0
0387 33         163            rlc a ; Carry flag has bit to write
0388 F8         164            mov R0, a
0389 92A1       165            mov MY_MOSI, c
038B D2A3       166            setb MY_SCLK ; Transmit
038D A2A2       167            mov c, MY_MISO ; Read received bit
038F E9         168            mov a, R1 ; Save received bit in R1
0390 33         169            rlc a
0391 F9         170            mov R1, a
0392 C2A3       171            clr MY_SCLK
0394 DAF0       172            djnz R2, DO_SPI_G_LOOP
0396 D0E0       173            pop acc
0398 22         174            ret
0399            175    
0399            176   ; Configure the serial port and baud rate using timer 1
0399            177   InitSerialPort:
0399            178       ; Since the reset button bounces, we need to wait a bit before
0399            179       ; sending messages, or risk displaying gibberish!
0399 79DE       180       mov R1, #222
039B 78A6       181       mov R0, #166
039D D8FE       182       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
039F D9FA       183       djnz R1, $-4 ; 22.51519us*222=4.998ms
03A1            184       ; Now we can safely proceed with the configuration
03A1 C28E       185            clr     TR1
03A3 53890F     186            anl     TMOD, #0x0f
03A6 438920     187            orl     TMOD, #0x20
03A9 438780     188            orl     PCON,#0x80
03AC 758DF4     189            mov     TH1,#T1LOAD
03AF 758BF4     190            mov     TL1,#T1LOAD
03B2 D28E       191            setb TR1
03B4 759852     192            mov     SCON,#0x52
03B7 22         193       ret
03B8            194   
03B8            195   ; Send a character using the serial port
03B8            196   putchar:
03B8 3099FD     197       jnb TI, putchar
03BB C299       198       clr TI
03BD F599       199       mov SBUF, a
03BF 22         200       ret
03C0            201   
03C0            202   ; Send a constant-zero-terminated string using the serial port
03C0            203   SendString:
03C0 E4         204       clr A
03C1 93         205       movc A, @A+DPTR
03C2 6006       206       jz SendStringDone
03C4 1203B8     207       lcall putchar
03C7 A3         208       inc DPTR
03C8 80F6       209       sjmp SendString
03CA            210   SendStringDone:
03CA 22         211       ret
03CB            212   
03CB            213   Init:
03CB 75817F     214       mov SP, #7FH
03CE 75C100     215       mov PMOD, #0 
03D1 D2AF       216       setb EA                              ; Enable interrupts
03D3 120359     217       lcall Timer0_Init
03D6 D201       218       setb CelsiusFlag     ; Display in Celsius by default (only one of the three flags here is 1 at a time)
03D8 C202       219       clr FahrenFlag
03DA C203       220       clr KelvinFlag
03DC D2A4       221       setb RED                     ; LEDs operate in negative logic, all off initially, but later only one is 1 at a time
03DE D2A5       222       setb YELLOW
03E0 D2A6       223       setb GREEN
03E2 120379     224            lcall INIT_SPI
03E5 120399     225            lcall InitSerialPort
03E8 120068     226            lcall LCD_4BIT
03EB            227   Main_Loop:
03EB 75F007     228            mov b, #7
03EE 120338     228            lcall _Read_ADC_Channel
03F1 120470     229            lcall Calculate_Vref
03F4            230            
03F4 75F000     231            mov b, #0
03F7 120338     231            lcall _Read_ADC_Channel
03FA            232            
03FA 1204A7     233            lcall Result_SPI_Routine        ; Calls routine that calculates temperatures, displays on LCD, and sends via serial
03FD C002       234            push AR2
03FF 7A64       234            mov R2, #100
0401 120019     234            lcall ?Wait_Milli_Seconds
0404 D002       234            pop AR2         ; 0.1 second delay between samples
0406            235            
0406 E553       236            mov a, bcdC+2                           ; Look at 'tens' and 'ones' place digits of temperature in Celsius
0408 B44000     237            cjne a, #0x40, Compared_40C
040B            238   Compared_40C:
040B            239            ; If temperature less than 40C, turn on green light
040B 4014       240            jc Green_Light
040D B46000     241            cjne a, #0x60, Compared_60C
0410            242   Compared_60C:
0410            243            ; If between 40C and 60C, turn on yellow light
0410 4019       244            jc Yellow_Light
0412 B48000     245            cjne a, #0x80, Compared_80C
0415            246   Compared_80C:
0415            247            ; If between 60C and 80C, turn on yellow light
0415 401E       248            jc Red_Light
0417            249            ; Otherwise, above 80C, flash red light and sound alarm
0417 D2A6       250            setb GREEN
0419 D2A5       251            setb YELLOW
041B B2A4       252            cpl RED
041D B28C       253            cpl TR0                         
041F 801C       254            sjmp Button_Poll
0421            255   Green_Light:
0421 C2A6       256            clr GREEN
0423 D2A5       257            setb YELLOW
0425 D2A4       258            setb RED
0427 C28C       259            clr TR0
0429 8012       260            sjmp Button_Poll
042B            261   Yellow_Light:
042B D2A6       262            setb GREEN
042D C2A5       263            clr YELLOW
042F D2A4       264            setb RED
0431 C28C       265            clr TR0
0433 8008       266            sjmp Button_Poll
0435            267   Red_Light:
0435 D2A6       268            setb GREEN
0437 D2A5       269            setb YELLOW
0439 C2A4       270            clr RED
043B C28C       271            clr TR0
043D            272            
043D            273   Button_Poll:
043D            274            ; Poll button
043D 20C5AB     275            jb BOOT_BUTTON, Main_Loop
0440 C002       276            push AR2
0442 7A32       276            mov R2, #50
0444 120019     276            lcall ?Wait_Milli_Seconds
0447 D002       276            pop AR2
0449 20C59F     277            jb BOOT_BUTTON, Main_Loop
044C C002       278            push AR2
044E 7A32       278            mov R2, #50
0450 120019     278            lcall ?Wait_Milli_Seconds
0453 D002       278            pop AR2
0455            279            ; Cycle between temperature scales: Celsius->Fahrenheit->Kelvin->Celsius
0455 20020A     280            jb FahrenFlag, Kelvin
0458 20010E     281            jb CelsiusFlag, Fahrenheit
045B C203       282            clr KelvinFlag
045D D201       283            setb CelsiusFlag
045F 0203EB     284            ljmp Main_Loop
0462            285   Kelvin:
0462 C202       286            clr FahrenFlag
0464 D203       287            setb KelvinFlag
0466 0203EB     288            ljmp Main_Loop
0469            289   Fahrenheit:
0469 C201       290            clr CelsiusFlag
046B D202       291            setb FahrenFlag
046D 0203EB     292            ljmp Main_Loop
0470            293   
0470            294   Calculate_Vref:
0470 753F00     295            mov y+3, #0
0473 753E00     296            mov y+2, #0
0476 85373D     297            mov y+1, result+1
0479 85363C     298            mov y+0, result+0
047C 753831     299            mov x+0, #low (VLED*1023 % 0x10000) 
047F 75393B     299            mov x+1, #high(VLED*1023 % 0x10000) 
0482 753A03     299            mov x+2, #low (VLED*1023 / 0x10000) 
0485 753B00     299            mov x+3, #high(VLED*1023 / 0x10000) 
0488 1202C3     300            lcall div32
048B 753C10     301            mov y+0, #low (10000 % 0x10000) 
048E 753D27     301            mov y+1, #high(10000 % 0x10000) 
0491 753E00     301            mov y+2, #low (10000 / 0x10000) 
0494 753F00     301            mov y+3, #high(10000 / 0x10000) 
0497 120236     302            lcall mul32
049A 853B35     303            mov Vcc+3, x+3
049D 853A34     304            mov Vcc+2, x+2
04A0 853933     305            mov Vcc+1, x+1
04A3 853832     306            mov Vcc+0, x+0
04A6            307            
04A6 22         308            ret
04A7            309   
04A7            310   Result_SPI_Routine:
04A7            311            ; Load 10-bit result into 32-bit x variable
04A7 753B00     312            mov x+3, #0
04AA 753A00     313            mov x+2, #0
04AD 853739     314            mov x+1, result+1
04B0 853638     315            mov x+0, result+0
04B3            316            ; Calculate temperature in Kelvin in binary with 4 digits of precision
04B3            317            ;mov y+3, Vcc+3
04B3            318            ;mov y+2, Vcc+2
04B3            319            ;mov y+1, Vcc+1
04B3            320            ;mov y+0, Vcc+0
04B3 753C40     321            mov y+0, #low (5000000 % 0x10000) 
04B6 753D4B     321            mov y+1, #high(5000000 % 0x10000) 
04B9 753E4C     321            mov y+2, #low (5000000 / 0x10000) 
04BC 753F00     321            mov y+3, #high(5000000 / 0x10000) 
04BF 120236     322            lcall mul32
04C2 753CFF     323            mov y+0, #low (1023 % 0x10000) 
04C5 753D03     323            mov y+1, #high(1023 % 0x10000) 
04C8 753E00     323            mov y+2, #low (1023 / 0x10000) 
04CB 753F00     323            mov y+3, #high(1023 / 0x10000) 
04CE 1202C3     324            lcall div32
04D1            325            ; Convert binary Kelvin to BCD, and store in variable
04D1 1200BC     326            lcall hex2bcd
04D4 854F59     327            mov bcdK+3, bcd+3
04D7 854E58     328            mov bcdK+2, bcd+2
04DA 854D57     329            mov bcdK+1, bcd+1
04DD 854C56     330            mov bcdK+0, bcd+0
04E0            331            ; Calculate temperature in Celsius
04E0 753C10     332            mov y+0, #low (2730000 % 0x10000) 
04E3 753DA8     332            mov y+1, #high(2730000 % 0x10000) 
04E6 753E29     332            mov y+2, #low (2730000 / 0x10000) 
04E9 753F00     332            mov y+3, #high(2730000 / 0x10000) 
04EC 1201A2     333            lcall sub32
04EF            334            ; Convert binary Celsius to BCD, and store in variable
04EF 1200BC     335            lcall hex2bcd
04F2 854F54     336            mov bcdC+3, bcd+3
04F5 854E53     337            mov bcdC+2, bcd+2
04F8 854D52     338            mov bcdC+1, bcd+1
04FB 854C51     339            mov bcdC+0, bcd+0       
04FE            340            ; Convert BCD Celsius to ASCII, and send using serial
04FE E54C       341            mov a, bcd+0
0500 F9         341            mov R1, a
0501 540F       341            anl a, #0x0F
0503 2430       341            add a, #0x30
0505 F55B       341            mov spistring+0, a
0507 E9         341            mov a, R1
0508 54F0       341            anl a, #0xF0
050A C4         341            swap a
050B 2430       341            add a, #0x30
050D F55C       341            mov spistring+1, a
050F E54D       342            mov a, bcd+1
0511 F9         342            mov R1, a
0512 540F       342            anl a, #0x0F
0514 2430       342            add a, #0x30
0516 F55D       342            mov spistring+2, a
0518 E9         342            mov a, R1
0519 54F0       342            anl a, #0xF0
051B C4         342            swap a
051C 2430       342            add a, #0x30
051E F55E       342            mov spistring+3, a
0520 E54E       343            mov a, bcd+2
0522 F9         343            mov R1, a
0523 540F       343            anl a, #0x0F
0525 2430       343            add a, #0x30
0527 F55F       343            mov spistring+4, a
0529 E9         343            mov a, R1
052A 54F0       343            anl a, #0xF0
052C C4         343            swap a
052D 2430       343            add a, #0x30
052F F560       343            mov spistring+5, a
0531 E54F       344            mov a, bcd+3
0533 F9         344            mov R1, a
0534 540F       344            anl a, #0x0F
0536 2430       344            add a, #0x30
0538 F561       344            mov spistring+6, a
053A E9         344            mov a, R1
053B 54F0       344            anl a, #0xF0
053D C4         344            swap a
053E 2430       344            add a, #0x30
0540 F562       344            mov spistring+7, a
0542 E550       345            mov a, bcd+4
0544 F9         345            mov R1, a
0545 540F       345            anl a, #0x0F
0547 2430       345            add a, #0x30
0549 F563       345            mov spistring+8, a
054B E9         345            mov a, R1
054C 54F0       345            anl a, #0xF0
054E C4         345            swap a
054F 2430       345            add a, #0x30
0551 F564       345            mov spistring+9, a      
0553            346            ; Calls macro to send spistring via serial
0553 E561       347            mov a, spistring+6
0555 1203B8     347            lcall putchar
0558 E560       347            mov a, spistring+5
055A 1203B8     347            lcall putchar
055D E55F       347            mov a, spistring+4
055F 1203B8     347            lcall putchar
0562 E55E       347            mov a, spistring+3
0564 1203B8     347            lcall putchar
0567 E55D       347            mov a, spistring+2
0569 1203B8     347            lcall putchar
056C E55C       347            mov a, spistring+1
056E 1203B8     347            lcall putchar
0571 E55B       347            mov a, spistring+0
0573 1203B8     347            lcall putchar
0576 740A       347            mov a, #'\n'
0578 1203B8     347            lcall putchar
057B            348            ; Calculate temperature in Fahrenheit
057B 753C09     349            mov y+0, #low (9 % 0x10000) 
057E 753D00     349            mov y+1, #high(9 % 0x10000) 
0581 753E00     349            mov y+2, #low (9 / 0x10000) 
0584 753F00     349            mov y+3, #high(9 / 0x10000) 
0587 120236     350            lcall mul32
058A 753C05     351            mov y+0, #low (5 % 0x10000) 
058D 753D00     351            mov y+1, #high(5 % 0x10000) 
0590 753E00     351            mov y+2, #low (5 / 0x10000) 
0593 753F00     351            mov y+3, #high(5 / 0x10000) 
0596 1202C3     352            lcall div32
0599 753C00     353            mov y+0, #low (320000 % 0x10000) 
059C 753DE2     353            mov y+1, #high(320000 % 0x10000) 
059F 753E04     353            mov y+2, #low (320000 / 0x10000) 
05A2 753F00     353            mov y+3, #high(320000 / 0x10000) 
05A5 120181     354            lcall add32
05A8            355            ; Convert binary Fahrenheit to BCD
05A8 1200BC     356            lcall hex2bcd
05AB C0E0       357            push acc
05AD 740A       357            mov a, #10
05AF 14         357            dec a
05B0 1200A1     357            lcall ?Set_Cursor_1 ; Select column and row
05B3 D0E0       357            pop acc
05B5            358            ; Display in the selected temperature scale
05B5 200223     359            jb FahrenFlag, Display_F
05B8 200134     360            jb CelsiusFlag, Display_C
05BB 85594F     361            mov bcd+3, bcdK+3
05BE 85584E     362            mov bcd+2, bcdK+2
05C1 85574D     363            mov bcd+1, bcdK+1
05C4 85564C     364            mov bcd+0, bcdK+0
05C7 C083       365            push dph
05C9 C082       365            push dpl
05CB C0E0       365            push acc
05CD 900334     365            mov dptr, #Kelv
05D0 120094     365            lcall ?Send_Constant_String
05D3 D0E0       365            pop acc
05D5 D082       365            pop dpl
05D7 D083       365            pop dph
05D9 8032       366            sjmp Display_Temp_LCD
05DB            367   Display_F:
05DB C083       368            push dph
05DD C082       368            push dpl
05DF C0E0       368            push acc
05E1 900330     368            mov dptr, #Fahr
05E4 120094     368            lcall ?Send_Constant_String
05E7 D0E0       368            pop acc
05E9 D082       368            pop dpl
05EB D083       368            pop dph
05ED 801E       369            sjmp Display_Temp_LCD
05EF            370   Display_C:
05EF 85544F     371            mov bcd+3, bcdC+3
05F2 85534E     372            mov bcd+2, bcdC+2
05F5 85524D     373            mov bcd+1, bcdC+1
05F8 85514C     374            mov bcd+0, bcdC+0
05FB C083       375            push dph
05FD C082       375            push dpl
05FF C0E0       375            push acc
0601 90032C     375            mov dptr, #Cels
0604 120094     375            lcall ?Send_Constant_String
0607 D0E0       375            pop acc
0609 D082       375            pop dpl
060B D083       375            pop dph
060D            376   
060D            377   Display_Temp_LCD:        
060D E54F       378            mov a, bcd+3
060F B40002     379            cjne a, #0, Display_Hundreds    ; If temperature is not in the hundreds, don't display hundreds digit (don't show the 0)
0612 8028       380            sjmp Display_Clear_Hundreds
0614            381   Display_Hundreds:
0614 C0E0       382            push acc
0616 7401       382            mov a, #1
0618 14         382            dec a
0619 1200A1     382            lcall ?Set_Cursor_1 ; Select column and row
061C D0E0       382            pop acc
061E C000       383            push ar0
0620 A84F       383            mov r0, bcd+3
0622 1200A6     383            lcall ?Display_BCD
0625 D000       383            pop ar0
0627 C0E0       384            push acc
0629 7401       384            mov a, #1
062B 14         384            dec a
062C 1200A1     384            lcall ?Set_Cursor_1 ; Select column and row
062F D0E0       384            pop acc
0631 C0E0       385            push acc
0633 7420       385            mov a, #' '
0635 12005E     385            lcall ?WriteData
0638 D0E0       385            pop acc
063A 801C       386            sjmp Display_Tens
063C            387   Display_Clear_Hundreds:
063C C0E0       388            push acc
063E 7401       388            mov a, #1
0640 14         388            dec a
0641 1200A1     388            lcall ?Set_Cursor_1 ; Select column and row
0644 D0E0       388            pop acc
0646 C0E0       389            push acc
0648 7420       389            mov a, #' '
064A 12005E     389            lcall ?WriteData
064D D0E0       389            pop acc
064F C0E0       390            push acc
0651 7420       390            mov a, #' '
0653 12005E     390            lcall ?WriteData
0656 D0E0       390            pop acc
0658            391   Display_Tens:
0658 C0E0       392            push acc
065A 7403       392            mov a, #3
065C 14         392            dec a
065D 1200A1     392            lcall ?Set_Cursor_1 ; Select column and row
0660 D0E0       392            pop acc
0662 C000       393            push ar0
0664 A84E       393            mov r0, bcd+2
0666 1200A6     393            lcall ?Display_BCD
0669 D000       393            pop ar0
066B C0E0       394            push acc
066D 742E       394            mov a, #'.'
066F 12005E     394            lcall ?WriteData
0672 D0E0       394            pop acc
0674 C000       395            push ar0
0676 A84D       395            mov r0, bcd+1
0678 1200A6     395            lcall ?Display_BCD
067B D000       395            pop ar0
067D C000       396            push ar0
067F A84C       396            mov r0, bcd+0
0681 1200A6     396            lcall ?Display_BCD
0684 D000       396            pop ar0
0686            397            
0686 22         398            ret
0687            399   
0687            400   
0687            401   en
