                  2   $LIST
0000              4   
0000              5   VLED                     EQU 207
0000              6   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000              7   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000              8   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000              9   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             10   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             11   PWM_PERCENT EQU 25
0000             12   PWM_RELOAD_HIGH EQU 255*PWM_PERCENT/100
0000             13   PWM_RELOAD_LOW EQU       (255 - PWM_RELOAD_HIGH)
0000             14   BAUD               equ 115200
0000             15   T1LOAD             equ (0x100-(CLK/(16*BAUD)))
0000             16   
0000             17   SAMPLE_INTERVAL EQU 250
0000             18   
0000             19   CE_ADC EQU P2.0
0000             20   MY_MOSI EQU P2.1
0000             21   MY_MISO EQU P2.2
0000             22   MY_SCLK EQU P2.3
0000             23   LCD_RS equ P1.2
0000             24   LCD_RW equ P1.3
0000             25   LCD_E  equ P1.4
0000             26   LCD_D4 equ P3.2
0000             27   LCD_D5 equ P3.3
0000             28   LCD_D6 equ P3.4
0000             29   LCD_D7 equ P3.5
0000             30   
0000             31   SSR_OUT              equ P3.7    ; Pin connected to SSR
0000             32   BOOT_BUTTON     equ P4.5
0000             33   PWM_BUTTON      equ P0.3
0000             34   
0000             35   
0000             36   ; Reset vector
0000             37   org 0x0000
0000 0204B8      38       ljmp init
0003             39   
0003             40   ; Timer/Counter 2 overflow interrupt vector
002B             41   org 0x002B
002B 020463      42            ljmp Timer2_ISR
002E             43            
002E             44            
002E             45   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             46   dseg at 0x30
0030             47   Count1ms:         ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032             48   Count_Sample:    ds 1
0033             49   Count_PWM:               ds 1
0034             50   Vcc:                             ds 4
0038             51   Result:          ds 2
003A             52   x:           ds 4
003E             53   y:               ds 4
0042             54   bcd:             ds 5
0047             55   x_lm335:         ds 4
004B             56   
004B             57   
0000             58   BSEG
0000             59   mf:      dbit 1
0001             60   pwm_on: dbit 1
0002             61   pwm_high: dbit 1
0003             62   sample_flag: dbit 1
0004             63   
002E             64   CSEG
002E             65                                    ;   123456789ABCDEF
002E 50574D20    66   PWM_ON_MESSAGE: db 'PWM IS ON      ', 0
     4953204F
     4E202020
     20202000
003E 50574D20    67   PWM_OFF_MESSAGE:db 'PWM IS OFF     ', 0
     4953204F
     46462020
     20202000
004E 0A          68   NEWLINE: db '\n'
004F             69   
004F             70            
                204   $LIST
                586   $LIST
                 96   $LIST
0439            111   $LIST
                 46   $LIST
                 76   $LIST
0463             78   
0463             79   
0463             80   
0463             81   
0463             82   ;---------------------------------;
0463             83   ; ISR for timer 2                 ;
0463             84   ;---------------------------------;
0463             85   Timer2_ISR:
0463 C2CF        86            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0465             87            ; The two registers used in the ISR must be saved in the stack
0465 C0E0        88            push acc
0467 C0D0        89            push psw
0469             90            
0469 0532        91            inc Count_Sample
046B             92            ; Increment the 16-bit one milli second counter
046B 0530        93            inc Count1ms+0    ; Increment the low 8-bits first
046D E530        94            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
046F 7002        95            jnz Inc_Done_1sec
0471 0531        96            inc Count1ms+1
0473             97            
0473             98   Inc_Done_1sec:
0473             99   
0473 E530       100            mov a, Count1ms+0
0475 B4E80B     101            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
0478 E531       102            mov a, Count1ms+1
047A B40306     103            cjne a, #high(1000), Inc_Done_Sample
047D            104            
047D            105            ; 1 second has passed ;
047D            106   
047D 753000     107            mov Count1ms+0, #0
0480 753100     107            mov Count1ms+1, #0
0483            108   
0483            109   Inc_Done_Sample:
0483            110            
0483 E532       111            mov a, Count_Sample
0485 B4FA05     112            cjne a, #SAMPLE_INTERVAL, Inc_PWM
0488            113            
0488 D203       114            setb sample_flag
048A            115            
048A E4         116            clr a
048B F532       117            mov Count_Sample, a
048D            118   
048D            119   Inc_PWM:
048D            120            
048D 300123     121            jnb pwm_on, Timer2_ISR_done
0490 0533       122            inc Count_PWM
0492 300210     123            jnb pwm_high, Inc_Done_PWM_Low
0495            124   
0495 E533       125            mov a, Count_PWM
0497 B43F19     126            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
049A            127            
049A C202       128            clr pwm_high
049C C2B7       129            clr SSR_OUT
049E D2B6       130            setb P3.6
04A0            131            
04A0 E4         132            clr a
04A1 F533       133            mov Count_PWM, a
04A3            134            
04A3 800E       135            sjmp Timer2_ISR_done
04A5            136   
04A5            137   Inc_Done_PWM_Low:
04A5            138   
04A5 E533       139            mov a, Count_PWM
04A7 B4C009     140            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
04AA            141            
04AA D202       142            setb pwm_high
04AC D2B7       143            setb SSR_OUT
04AE C2B6       144            clr P3.6
04B0            145            
04B0 E4         146            clr a
04B1 F533       147            mov Count_PWM, a
04B3            148   
04B3            149            
04B3            150   Timer2_ISR_done:
04B3 D0D0       151            pop psw
04B5 D0E0       152            pop acc
04B7 32         153            reti
04B8            154   
04B8            155   
04B8            156   init:
04B8            157            ; Initialization
04B8 75817F     158       mov SP, #0x7F
04BB 75C100     159       mov PMOD, #0 ; Configure all ports in bidirectional mode
04BE 120439     160       lcall Timer0_Init
04C1 12044C     161       lcall Timer2_Init
04C4 D2AF       162       setb EA   ; Enable Global interrupts
04C6 12036D     163            lcall INIT_SPI
04C9 1203DE     164            lcall InitSerialPort
04CC 1200A9     165       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
04CF C201       166       clr pwm_on
04D1 C202       167       clr pwm_high
04D3 C2B7       168       clr SSR_OUT
04D5            169       
04D5            170   Main_Loop:
04D5 1204E3     171            lcall Check_SSR_Toggle
04D8 12051C     172            lcall Check_PWM_Toggle
04DB 3003F7     173            jnb sample_flag, Main_Loop
04DE 120584     174            lcall Take_Sample
04E1 80F2       175            sjmp Main_Loop  
04E3            176   
04E3            177   Check_SSR_Toggle:
04E3 20C535     178            jb BOOT_BUTTON, SSR_Toggle_Return
04E6 C002       179            push AR2
04E8 7A32       179            mov R2, #50
04EA 12005A     179            lcall ?Wait_Milli_Seconds
04ED D002       179            pop AR2
04EF 20C529     180            jb BOOT_BUTTON, SSR_Toggle_Return
04F2 C201       181            clr pwm_on
04F4 B2B7       182            cpl SSR_OUT
04F6 C0E0       183            push acc
04F8 7401       183            mov a, #1
04FA 14         183            dec a
04FB 1200E0     183            lcall ?Set_Cursor_2 ; Select column and row
04FE D0E0       183            pop acc
0500 C083       184            push dph
0502 C082       184            push dpl
0504 C0E0       184            push acc
0506 90003E     184            mov dptr, #PWM_OFF_MESSAGE
0509 1200D5     184            lcall ?Send_Constant_String
050C D0E0       184            pop acc
050E D082       184            pop dpl
0510 D083       184            pop dph
0512 C002       185            push AR2
0514 7AC8       185            mov R2, #200
0516 12005A     185            lcall ?Wait_Milli_Seconds
0519 D002       185            pop AR2
051B            186   SSR_Toggle_Return:
051B 22         187            ret
051C            188            
051C            189   Check_PWM_Toggle:
051C 208364     190            jb PWM_BUTTON, PWM_Toggle_Return
051F C002       191            push AR2
0521 7A32       191            mov R2, #50
0523 12005A     191            lcall ?Wait_Milli_Seconds
0526 D002       191            pop AR2
0528 208358     192            jb PWM_BUTTON, PWM_Toggle_Return
052B 3083FD     193            jnb PWM_BUTTON, $
052E 200129     194            jb pwm_on, PWM_Off
0531            195            ; Otherwise, turn PWM on ;
0531 D201       196            setb pwm_on
0533 C0E0       197            push acc
0535 7401       197            mov a, #1
0537 14         197            dec a
0538 1200E0     197            lcall ?Set_Cursor_2 ; Select column and row
053B D0E0       197            pop acc
053D C083       198            push dph
053F C082       198            push dpl
0541 C0E0       198            push acc
0543 90002E     198            mov dptr, #PWM_ON_MESSAGE
0546 1200D5     198            lcall ?Send_Constant_String
0549 D0E0       198            pop acc
054B D082       198            pop dpl
054D D083       198            pop dph
054F C002       199            push AR2
0551 7AC8       199            mov R2, #200
0553 12005A     199            lcall ?Wait_Milli_Seconds
0556 D002       199            pop AR2
0558 8029       200            sjmp PWM_Toggle_Return
055A            201   PWM_Off:
055A C201       202            clr pwm_on
055C C2B7       203            clr SSR_OUT
055E C0E0       204            push acc
0560 7401       204            mov a, #1
0562 14         204            dec a
0563 1200E0     204            lcall ?Set_Cursor_2 ; Select column and row
0566 D0E0       204            pop acc
0568 C083       205            push dph
056A C082       205            push dpl
056C C0E0       205            push acc
056E 90003E     205            mov dptr, #PWM_OFF_MESSAGE
0571 1200D5     205            lcall ?Send_Constant_String
0574 D0E0       205            pop acc
0576 D082       205            pop dpl
0578 D083       205            pop dph
057A C002       206            push AR2
057C 7AC8       206            mov R2, #200
057E 12005A     206            lcall ?Wait_Milli_Seconds
0581 D002       206            pop AR2
0583            207   PWM_Toggle_Return:
0583 22         208            ret
0584            209            
0584            210   Take_Sample:
0584 C203       211            clr sample_flag
0586 75F007     212            mov b, #7
0589 1203AC     212            lcall ?Average_ADC_Channel
058C 1205A2     213            lcall Calculate_Vref
058F            214            ;fetch result from channel 0 as room temperature
058F 75F000     215            mov b, #0
0592 1203AC     215            lcall ?Average_ADC_Channel
0595 1205D9     216            lcall LM335_Result_SPI_Routine
0598            217            ;fetch result from channel 1
0598 75F001     218            mov b, #1
059B 1203AC     218            lcall ?Average_ADC_Channel
059E 120622     219       lcall Result_SPI_Routine     ; 0.5 second delay between samples
05A1 22         220            ret
05A2            221   Calculate_Vref:
05A2 85383E     222            mov y+0, result+0 
05A5 85393F     222            mov y+1, result+1
05A8 754000     222            mov y+2, #0 
05AB 754100     222            mov y+3, #0
05AE 753A31     223            mov x+0, #low (VLED*1023 % 0x10000) 
05B1 753B3B     223            mov x+1, #high(VLED*1023 % 0x10000) 
05B4 753C03     223            mov x+2, #low (VLED*1023 / 0x10000) 
05B7 753D00     223            mov x+3, #high(VLED*1023 / 0x10000) 
05BA 120304     224            lcall div32
05BD 753E10     225            mov y+0, #low (10000 % 0x10000) 
05C0 753F27     225            mov y+1, #high(10000 % 0x10000) 
05C3 754000     225            mov y+2, #low (10000 / 0x10000) 
05C6 754100     225            mov y+3, #high(10000 / 0x10000) 
05C9 120277     226            lcall mul32                     ; Gets Vcc*10^6
05CC            227   
05CC 853A34     228            mov Vcc+0, x+0 
05CF 853B35     228            mov Vcc+1, x+1
05D2 853C36     228            mov Vcc+2, x+2 
05D5 853D37     228            mov Vcc+3, x+3
05D8            229            
05D8 22         230            ret
05D9            231            
05D9            232   LM335_Result_SPI_Routine:
05D9 85343E     233            mov y+0, Vcc+0 
05DC 85353F     233            mov y+1, Vcc+1
05DF 853640     233            mov y+2, Vcc+2 
05E2 853741     233            mov y+3, Vcc+3
05E5            234   
05E5 120277     235       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
05E8 753EFF     236            mov y+0, #low (1023 % 0x10000) 
05EB 753F03     236            mov y+1, #high(1023 % 0x10000) 
05EE 754000     236            mov y+2, #low (1023 / 0x10000) 
05F1 754100     236            mov y+3, #high(1023 / 0x10000)          
05F4 120304     237       lcall div32
05F7 753E10     238            mov y+0, #low (2730000 % 0x10000) 
05FA 753FA8     238            mov y+1, #high(2730000 % 0x10000) 
05FD 754029     238            mov y+2, #low (2730000 / 0x10000) 
0600 754100     238            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
0603 1201E3     239       lcall sub32
0606 753E64     240            mov y+0, #low (100 % 0x10000) 
0609 753F00     240            mov y+1, #high(100 % 0x10000) 
060C 754000     240            mov y+2, #low (100 / 0x10000) 
060F 754100     240            mov y+3, #high(100 / 0x10000)           
0612 120304     241       lcall div32
0615            242   
0615 853A47     243            mov x_lm335+0, x+0 
0618 853B48     243            mov x_lm335+1, x+1
061B 853C49     243            mov x_lm335+2, x+2 
061E 853D4A     243            mov x_lm335+3, x+3
0621            244            
0621 22         245            ret
0622            246   
0622            247   Result_SPI_Routine:
0622 85343E     248            mov y+0, Vcc+0 
0625 85353F     248            mov y+1, Vcc+1
0628 853640     248            mov y+2, Vcc+2 
062B 853741     248            mov y+3, Vcc+3
062E            249            
062E 120277     250            lcall mul32
0631 753EFF     251            mov y+0, #low (1023 % 0x10000) 
0634 753F03     251            mov y+1, #high(1023 % 0x10000) 
0637 754000     251            mov y+2, #low (1023 / 0x10000) 
063A 754100     251            mov y+3, #high(1023 / 0x10000) 
063D 120304     252            lcall div32
0640 753E64     253            mov y+0, #low (100 % 0x10000) 
0643 753F00     253            mov y+1, #high(100 % 0x10000) 
0646 754000     253            mov y+2, #low (100 / 0x10000) 
0649 754100     253            mov y+3, #high(100 / 0x10000) 
064C 120277     254            lcall mul32     
064F 753EC6     255            mov y+0, #low (454 % 0x10000) 
0652 753F01     255            mov y+1, #high(454 % 0x10000) 
0655 754000     255            mov y+2, #low (454 / 0x10000) 
0658 754100     255            mov y+3, #high(454 / 0x10000)   ;Gain 
065B 120304     256            lcall div32
065E 753E29     257            mov y+0, #low (41 % 0x10000) 
0661 753F00     257            mov y+1, #high(41 % 0x10000) 
0664 754000     257            mov y+2, #low (41 / 0x10000) 
0667 754100     257            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
066A 120304     258            lcall div32
066D            259   
066D 85473E     260            mov y+0, x_lm335+0 
0670 85483F     260            mov y+1, x_lm335+1
0673 854940     260            mov y+2, x_lm335+2 
0676 854A41     260            mov y+3, x_lm335+3
0679 1201C2     261            lcall add32
067C            262            
067C 753E64     263            mov y+0, #low (100 % 0x10000) 
067F 753F00     263            mov y+1, #high(100 % 0x10000) 
0682 754000     263            mov y+2, #low (100 / 0x10000) 
0685 754100     263            mov y+3, #high(100 / 0x10000) 
0688 120304     264            lcall div32
068B            265   
068B 1200FD     266            lcall hex2bcd
068E            267   
068E            268   Send_Serial:
068E            269            
068E C000       270       push ar0
0690 A844       270       mov r0, bcd+2
0692 120410     270       lcall ?Send_BCD
0695 D000       270       pop ar0
0697 C000       271       push ar0
0699 A843       271       mov r0, bcd+1
069B 120410     271       lcall ?Send_BCD
069E D000       271       pop ar0
06A0 740A       272            mov a, #'\n'
06A2 1203FD     273            lcall putchar
06A5            274   
06A5            275   Display_Temp_LCD:
06A5 C0E0       276            push acc
06A7 7401       276            mov a, #1
06A9 14         276            dec a
06AA 1200E2     276            lcall ?Set_Cursor_1 ; Select column and row
06AD D0E0       276            pop acc
06AF C000       277            push ar0
06B1 A846       277            mov r0, bcd+4
06B3 1200E7     277            lcall ?Display_BCD
06B6 D000       277            pop ar0
06B8 C000       278            push ar0
06BA A845       278            mov r0, bcd+3
06BC 1200E7     278            lcall ?Display_BCD
06BF D000       278            pop ar0
06C1 C000       279            push ar0
06C3 A844       279            mov r0, bcd+2
06C5 1200E7     279            lcall ?Display_BCD
06C8 D000       279            pop ar0
06CA C000       280            push ar0
06CC A843       280            mov r0, bcd+1
06CE 1200E7     280            lcall ?Display_BCD
06D1 D000       280            pop ar0
06D3 C000       281            push ar0
06D5 A842       281            mov r0, bcd
06D7 1200E7     281            lcall ?Display_BCD
06DA D000       281            pop ar0
06DC 22         282       ret
06DD            283   en
