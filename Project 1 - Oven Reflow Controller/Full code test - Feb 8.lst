                  2   $LIST
0000              4   ; Reset vector
0000              5   org 0000H
0000 020827       6      ljmp MainProgram
0003              7   
0003              8   ; External interrupt 0 vector (not used in this code)
0003              9   org 0x0003
0003 32          10            reti
0004             11   
0004             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 32          14            reti
000C             15   ;        ljmp Timer0_ISR
000C             16            
000C             17   ; External interrupt 1 vector (not used in this code)
0013             18   org 0x0013
0013 32          19            reti
0014             20   
0014             21   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             22   org 0x001B
001B 32          23            reti
001C             24   
001C             25   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             26   org 0x0023 
0023 32          27            reti
0024             28            
0024             29   ; Timer/Counter 2 overflow interrupt vector
002B             30   org 0x002B
002B 0205FE      31            ljmp Timer2_ISR
002E             32            
002E             33   ;++++++++++++++++++ CONSTANTS ++++++++++++++++++++
002E             34   VLED     EQU 207
002E             35   ;++++++++++++++++++ TIMER & BAUDRATE  ++++++++++++
002E             36   CLK              EQU 22118400                                                     ; Microcontroller system crystal frequency in Hz
002E             37   TIMER0_RATE        EQU 4096                                                               ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38   TIMER0_RELOAD      EQU ((65536-(CLK/TIMER0_RATE)))
002E             39   TIMER2_RATE        EQU 1000                                                               ; 1000Hz, for a timer tick of 1ms
002E             40   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   BAUD                                     EQU 115200
002E             42   T1LOAD                                   EQU (0x100-(CLK/(16*BAUD)))
002E             43   
002E             44   SAMPLE_INTERVAL EQU 250                                                                  ; Millisecond Interval when sampling (KEEP LESS THAN 256)
002E             45   
002E             46   PWM_PERCENT                      EQU 25
002E             47   PWM_RELOAD_HIGH EQU (255*PWM_PERCENT/100)
002E             48   PWM_RELOAD_LOW   EQU     (255 - PWM_RELOAD_HIGH)
002E             49   ;------------------------------------------------
002E             50   
002E             51   ;++++++++++++++++++ SPI PINS ++++++++++++++++
002E             52   CE_ADC  EQU P2.0
002E             53   MY_MOSI EQU P2.1
002E             54   MY_MISO EQU P2.2
002E             55   MY_SCLK EQU P2.3
002E             56   ;--------------------------------------------
002E             57   
002E             58   ;++++++++++++++++++ LCD PINS ++++++++++++++++
002E             59   LCD_RS equ P1.2
002E             60   LCD_RW equ P1.3
002E             61   LCD_E  equ P1.4
002E             62   LCD_D4 equ P3.2
002E             63   LCD_D5 equ P3.3
002E             64   LCD_D6 equ P3.4
002E             65   LCD_D7 equ P3.5
002E             66   ;--------------------------------------------
002E             67   
002E             68   
002E             69   SSR_OUT              equ P3.7    ; Pin connected to SSR
002E             70   BOOT_BUTTON     equ P4.5
002E             71   PWM_BUTTON      equ P0.3
002E             72   SOUND_OUT       equ P3.6         ; Pin connected to speaker
002E             73   
002E             74   ;++++++++++++++++++ CONTROL BUTTONS++++++++++
002E             75   CYCLE_BUTTON        equ P0.0     ; Button to change cycles
002E             76   INC_BUTTON                                       equ P0.2
002E             77   DEC_BUTTON          equ P0.4
002E             78   ;--------------------------------------------
002E             79   
                218   $LIST
                586   $LIST
                 96   $LIST
0418            111   $LIST
                 46   $LIST
                 85   $LIST
0442             87   
0442             88            
0442             89   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             90   DSEG at 0x30
0030             91   
0030             92            Count1ms:                                       ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032             93            Count_Sample:                   ds 1 ; Sample is taken every 250ms
0033             94            Count_PWM:                              ds 1 ; PWM cycle runs every 255ms
0034             95            soak_seconds:                   ds 1
0035             96            soak_temp:                              ds 1
0036             97            reflow_seconds:                 ds 1
0037             98            reflow_temp:                    ds 1
0038             99            run_time_sec:                   ds 1
0039            100            state_time:                             ds 1
003A            101            
003A            102   ;+++++++++ 32 bit Calculation variables +++++++++++      
003A            103            x:                                      ds 4
003E            104            y:                                                      ds 4
0042            105            Result:                                         ds 2
0044            106            bcd:                                                    ds 5
0049            107            x_lm335:                                        ds 4
004D            108            Vcc:                                                    ds 4
0051            109            samplesum:                              ds 4
0055            110   ;--------------------------------------------
0055            111            state:                                          ds 1
0056            112            current_temp:                   ds 4
005A            113   
005A            114            
005A            115   
0000            116   BSEG
0000            117            mf:                                                     dbit 1
0001            118            one_min_flag:           dbit 1  ; Set to 1 after first 60 seconds of reflow cycle
0002            119            pwm_on:                                         dbit 1  ; Set to 1 to turn PWM on
0003            120            pwm_high:                               dbit 1  ; Flag for when PWM output is currently high
0004            121     settings_modified_flag:                dbit 1  ; Flag for when parameters have been changed
0005            122            sample_flag:                    dbit 1  ; Flag turned on every SAMPLE_INTERVAL to take a reading
0006            123   
0442            124   CSEG
0442            125   ;                                                                        1234567890123456    <- This helps determine the location of the Strings
0442 20526566   126     StartMessage:                                  db ' Reflow Control ', 0
     6C6F7720
     436F6E74
     726F6C20
     00
0453 53746172   127     StartMessage2:                         db 'Start / Settings', 0
     74202F20
     53657474
     696E6773
     00
0464 536F616B   128            SoakTime_Message:               db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
0475 536F616B   129            SoakTemp_Message:               db 'Soak Temperature', 0
     2054656D
     70657261
     74757265
     00
0486 5265666C   130            ReflowTime_Message:     db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
0497 5265666C   131            ReflowTemp_Message:     db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
04A8 53746172   132            Start_Message:                          db 'Start Process?  ', 0
     74205072
     6F636573
     733F2020
     00
04B9 20202D20   133     Y_N_Message:                                   db '  - No | + Yes  ', 0
     4E6F207C
     202B2059
     65732020
     00
04CA 50574D20   134            PWM_ON_MESSAGE:                 db 'PWM IS ON       ', 0
     4953204F
     4E202020
     20202020
     00
04DB 50574D20   135            PWM_OFF_MESSAGE:                db 'PWM IS OFF      ', 0
     4953204F
     46462020
     20202020
     00
04EC 20202044   136     SaveToFlash_Msg:               db '   Data Saved   ', 0
     61746120
     53617665
     64202020
     00
04FD 50726F63   137            Stopped:                                db 'Process Stopped ', 0
     65737320
     53746F70
     70656420
     00
050E 20202020   138            BlankMsg:                               db '                ', 0
     20202020
     20202020
     20202020
     00
051F 2D205265   139            ChooseChangeValueMsg:   db '- Reselect Vals     ', 0
     73656C65
     63742056
     616C7309
     00
0530 2B095374   140            ChooseStartMsg:                         db '+   Start Reflow', 0
     61727420
     5265666C
     6F7700
053F 52616D70   141            Ramp2Reflow:                    db 'Ramp to Reflow  ', 0
     20746F20
     5265666C
     6F772020
     00
0550 52616D70   142            Ramp2Soak:                              db 'Ramp to Soak    ', 0
     20746F20
     536F616B
     20202020
     00
0561 50726568   143            Soak:                                   db 'Preheat / Soak  ', 0
     65617420
     2F20536F
     616B2020
     00
0572 5265666C   144            Reflow:                                         db 'Reflow          ', 0
     6F772020
     20202020
     20202020
     00
0583 436F6F6C   145            Cooling:                                db 'Cooling         ', 0
     696E6720
     20202020
     20202020
     00
0594 5265666C   146            CompleteMsg:                    db 'Reflow Complete!', 0
     6F772043
     6F6D706C
     65746521
     00
05A5 43686563   147            Lessthan50ErrorMsg:     db 'Check T-Couple! ', 0
     6B20542D
     436F7570
     6C652120
     00
05B6 50726F63   148            AbortMsg:                               db 'Process Aborted!', 0
     65737320
     41626F72
     74656421
     00
05C7 2D20436F   149            ConfirmMsg:                     db '- Continue?     ', 0
     6E74696E
     75653F20
     20202020
     00
05D8 54656D70   150            Temp:                                   db 'Temp:', 0           
     3A00
05DE 54696D65   151            Time:                                   db 'Time:', 0
     3A00
05E4 0A00       152            NEWLINE:                                db '\n', 0  
05E6 20DF4300   153     Cels: db ' ',11011111b, 'C',0
05EA 207300     154     Secs:                  db ' s',0
05ED 20495453   155            TestMessage:                    db ' ITS WORKING!?  ', 0
     20574F52
     4B494E47
     213F2020
     00
05FE            156   ;---------------------------------;
05FE            157   ; ISR for timer 2                 ;
05FE            158   ;---------------------------------;
05FE            159   Timer2_ISR:
05FE C2CF       160            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0600            161            
0600            162            ; The two registers used in the ISR must be saved in the stack
0600 C0E0       163            push acc
0602 C0D0       164            push psw
0604            165            
0604            166       
0604 0532       167     inc Count_Sample
0606            168            ; Increment the 16-bit one mili second counter
0606 0530       169            inc Count1ms+0    ; Increment the low 8-bits first
0608 E530       170            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
060A 7002       171            jnz Inc_Done_1sec
060C 0531       172            inc Count1ms+1
060E            173   
060E            174            
060E            175   Inc_Done_1sec:
060E            176            ; Check if one second has passed
060E E530       177            mov a, Count1ms+0
0610 B4E816     178            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
0613 E531       179            mov a, Count1ms+1
0615 B40311     180            cjne a, #high(1000), Inc_Done_Sample
0618            181            
0618            182            ; 1 second has passed.  Set a flag so the main program knows
0618            183            
0618 753000     184            mov Count1ms+0, #0
061B 753100     184            mov Count1ms+1, #0
061E            185     
061E            186            ; total time passed for each stage (it will be set to 0 when the stage starts)
061E 0538       187            inc run_time_sec
0620            188     ; time for state, will reset after every state
0620 0539       189     inc state_time
0622            190     
0622 E539       191     mov a, state_time
0624 B43C02     192     cjne a,#60, Inc_Done_Sample
0627 D201       193            setb one_min_flag
0629            194   
0629            195   Inc_Done_Sample:
0629            196            
0629 E532       197     mov a, Count_Sample
062B B4FA05     198     cjne a, #SAMPLE_INTERVAL, Inc_Done_PWM
062E            199     
062E D205       200     setb sample_flag
0630            201     
0630 E4         202     clr a
0631 F532       203     mov Count_Sample, a
0633            204   
0633            205   Inc_Done_PWM:
0633            206            
0633 30021F     207            jnb pwm_on, Timer2_ISR_done
0636 0533       208            inc Count_PWM
0638 30030E     209            jnb pwm_high, Inc_Done_PWM_Low
063B            210   
063B E533       211            mov a, Count_PWM
063D B43F15     212            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
0640            213            
0640 C203       214            clr pwm_high
0642 C2B7       215            clr SSR_OUT
0644            216            
0644 E4         217            clr a
0645 F533       218            mov Count_PWM, a
0647            219            
0647 800C       220            sjmp Timer2_ISR_done
0649            221            
0649            222   Inc_Done_PWM_Low:
0649            223   
0649 E533       224            mov a, Count_PWM
064B B4C007     225            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
064E            226            
064E D203       227            setb pwm_high
0650 D2B7       228            setb SSR_OUT
0652            229            
0652 E4         230            clr a
0653 F533       231            mov Count_PWM, a
0655            232            
0655            233   Timer2_ISR_done:
0655 D0D0       234            pop psw
0657 D0E0       235            pop acc
0659 32         236   reti
065A            237   
065A            238   ;------------------------------------------------------------------;
065A            239   ; Subroutine to take sample from Thermocouple, LM335, and LED for Vref
065A            240   ;------------------------------------------------------------------;
065A            241   Take_Sample:
065A C205       242            clr sample_flag
065C            243            ;reading the LED voltage for Vref
065C 75F007     244            mov b, #7
065F 12038B     244            lcall ?Average_ADC_Channel      
0662 120678     245            lcall Calculate_Vref
0665            246            ;fetch result from channel 0 as room temperature
0665 75F000     247            mov b, #0
0668 12038B     247            lcall ?Average_ADC_Channel
066B 1206AF     248            lcall LM335_Result_SPI_Routine
066E            249            ;fetch result from channel 1
066E 75F001     250            mov b, #1
0671 12038B     250            lcall ?Average_ADC_Channel
0674 1206F8     251     lcall Result_SPI_Routine       ; 0.5 second delay between samples
0677 22         252            ret
0678            253   
0678            254   ;calculating Vref from Vled      
0678            255   Calculate_Vref:
0678 85423E     256            mov y+0, result+0 
067B 85433F     256            mov y+1, result+1
067E 754000     256            mov y+2, #0 
0681 754100     256            mov y+3, #0
0684 753A31     257            mov x+0, #low (VLED*1023 % 0x10000) 
0687 753B3B     257            mov x+1, #high(VLED*1023 % 0x10000) 
068A 753C03     257            mov x+2, #low (VLED*1023 / 0x10000) 
068D 753D00     257            mov x+3, #high(VLED*1023 / 0x10000) 
0690 1202E3     258            lcall div32
0693 753E10     259            mov y+0, #low (10000 % 0x10000) 
0696 753F27     259            mov y+1, #high(10000 % 0x10000) 
0699 754000     259            mov y+2, #low (10000 / 0x10000) 
069C 754100     259            mov y+3, #high(10000 / 0x10000) 
069F 120256     260            lcall mul32                     ; Gets Vcc*10^6
06A2            261   
06A2 853A4D     262            mov Vcc+0, x+0 
06A5 853B4E     262            mov Vcc+1, x+1
06A8 853C4F     262            mov Vcc+2, x+2 
06AB 853D50     262            mov Vcc+3, x+3
06AE            263            
06AE 22         264            ret
06AF            265            
06AF            266   ;calculating cold junction temperature
06AF            267   LM335_Result_SPI_Routine:
06AF 854D3E     268            mov y+0, Vcc+0 
06B2 854E3F     268            mov y+1, Vcc+1
06B5 854F40     268            mov y+2, Vcc+2 
06B8 855041     268            mov y+3, Vcc+3
06BB            269   
06BB 120256     270       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
06BE 753EFF     271            mov y+0, #low (1023 % 0x10000) 
06C1 753F03     271            mov y+1, #high(1023 % 0x10000) 
06C4 754000     271            mov y+2, #low (1023 / 0x10000) 
06C7 754100     271            mov y+3, #high(1023 / 0x10000)          
06CA 1202E3     272       lcall div32
06CD 753E10     273            mov y+0, #low (2730000 % 0x10000) 
06D0 753FA8     273            mov y+1, #high(2730000 % 0x10000) 
06D3 754029     273            mov y+2, #low (2730000 / 0x10000) 
06D6 754100     273            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
06D9 1201C2     274       lcall sub32
06DC 753E64     275            mov y+0, #low (100 % 0x10000) 
06DF 753F00     275            mov y+1, #high(100 % 0x10000) 
06E2 754000     275            mov y+2, #low (100 / 0x10000) 
06E5 754100     275            mov y+3, #high(100 / 0x10000)           
06E8 1202E3     276       lcall div32
06EB            277   
06EB 853A49     278            mov x_lm335+0, x+0 
06EE 853B4A     278            mov x_lm335+1, x+1
06F1 853C4B     278            mov x_lm335+2, x+2 
06F4 853D4C     278            mov x_lm335+3, x+3
06F7            279            
06F7 22         280            ret
06F8            281   
06F8            282   ;calculating the oven temperature and sending it to computer and LCD
06F8            283   Result_SPI_Routine:
06F8 854D3E     284            mov y+0, Vcc+0 
06FB 854E3F     284            mov y+1, Vcc+1
06FE 854F40     284            mov y+2, Vcc+2 
0701 855041     284            mov y+3, Vcc+3
0704            285            
0704 120256     286            lcall mul32
0707 753EFF     287            mov y+0, #low (1023 % 0x10000) 
070A 753F03     287            mov y+1, #high(1023 % 0x10000) 
070D 754000     287            mov y+2, #low (1023 / 0x10000) 
0710 754100     287            mov y+3, #high(1023 / 0x10000) 
0713 1202E3     288            lcall div32
0716 753E64     289            mov y+0, #low (100 % 0x10000) 
0719 753F00     289            mov y+1, #high(100 % 0x10000) 
071C 754000     289            mov y+2, #low (100 / 0x10000) 
071F 754100     289            mov y+3, #high(100 / 0x10000) 
0722 120256     290            lcall mul32     
0725 753EC6     291            mov y+0, #low (454 % 0x10000) 
0728 753F01     291            mov y+1, #high(454 % 0x10000) 
072B 754000     291            mov y+2, #low (454 / 0x10000) 
072E 754100     291            mov y+3, #high(454 / 0x10000)   ;Gain 
0731 1202E3     292            lcall div32
0734 753E29     293            mov y+0, #low (41 % 0x10000) 
0737 753F00     293            mov y+1, #high(41 % 0x10000) 
073A 754000     293            mov y+2, #low (41 / 0x10000) 
073D 754100     293            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
0740 1202E3     294            lcall div32
0743            295            
0743 85493E     296            mov y+0, x_lm335+0 
0746 854A3F     296            mov y+1, x_lm335+1
0749 854B40     296            mov y+2, x_lm335+2 
074C 854C41     296            mov y+3, x_lm335+3
074F 1201A1     297            lcall add32
0752            298     
0752 753E64     299            mov y+0, #low (100 % 0x10000) 
0755 753F00     299            mov y+1, #high(100 % 0x10000) 
0758 754000     299            mov y+2, #low (100 / 0x10000) 
075B 754100     299            mov y+3, #high(100 / 0x10000) 
075E 1202E3     300     lcall div32
0761            301   
0761            302            ;updating the temperature of OVEN variable
0761 853A56     303            mov current_temp+0, x+0 
0764 853B57     303            mov current_temp+1, x+1
0767 853C58     303            mov current_temp+2, x+2 
076A 853D59     303            mov current_temp+3, x+3
076D            304            
076D 1200DC     305            lcall hex2bcd
0770            306   
0770            307   ;sending Oven temperature to Computer
0770            308   Send_Serial:
0770            309            
0770 C000       310       push ar0
0772 A845       310       mov r0, bcd+1
0774 1203EF     310       lcall ?Send_BCD
0777 D000       310       pop ar0
0779 C000       311       push ar0
077B A844       311       mov r0, bcd+0
077D 1203EF     311       lcall ?Send_BCD
0780 D000       311       pop ar0
0782 740A       312            mov a, #'\n'
0784 1203DC     313            lcall putchar
0787            314            
0787 C0E0       315            push acc
0789 7401       315            mov a, #1
078B 14         315            dec a
078C 1200C1     315            lcall ?Set_Cursor_1 ; Select column and row
078F D0E0       315            pop acc
0791            316            
0791            317   Display_Temp_LCD:                        ;TODOOO                 to be changed according to need
0791 C000       318            push ar0
0793 A848       318            mov r0, bcd+4
0795 1200C6     318            lcall ?Display_BCD
0798 D000       318            pop ar0
079A C000       319            push ar0
079C A847       319            mov r0, bcd+3
079E 1200C6     319            lcall ?Display_BCD
07A1 D000       319            pop ar0
07A3 C000       320            push ar0
07A5 A846       320            mov r0, bcd+2
07A7 1200C6     320            lcall ?Display_BCD
07AA D000       320            pop ar0
07AC C000       321            push ar0
07AE A845       321            mov r0, bcd+1
07B0 1200C6     321            lcall ?Display_BCD
07B3 D000       321            pop ar0
07B5 C000       322            push ar0
07B7 A844       322            mov r0, bcd
07B9 1200C6     322            lcall ?Display_BCD
07BC D000       322            pop ar0
07BE            323            
07BE 22         324   ret
07BF            325   
07BF            326   ;Saving variables to Flash Memory
07BF            327   Save_Configuration:
07BF            328            ; Erase FDATA page 1
07BF C2AF       329            clr EA ; Disables interrupts to allow access to flash memory
07C1 759658     330            mov MEMCON, #01011000B ; AERS=1, MWEN=1, DMEN=1, 
07C4            331     ; ^ Erases page in flash memory, enables programming to nonvolatie mem location
07C4            332     ; Enables nonvolatile data memory and maps it into FDATA space
07C4 900000     333            mov DPTR, #0x0000 ; Set data pointer to start of flash memory
07C7 74FF       334            mov a, #0xff                    ; Write 1111 1111 to flash mem
07C9 F0         335            movx @DPTR, A
07CA            336            ; Load page
07CA 759638     337     mov MEMCON, #00111000B ; LDPG=1, MWEN=1, DMEN=1
07CD            338     ; Enables loading of multiple bytes to temporary page buffer
07CD            339     ; Enables programming of nonvolatile memory location
07CD            340     ; Enables nonvolatile data memory and map it into FDATA space
07CD            341     ; Save variables
07CD E535       342     mov a, soak_temp       ; Move soak temperature to accumulator
07CF F0         343     movx @DPTR, A                  ; Save data in buffer
07D0 A3         344     inc DPTR                                       ; Increment data pointer
07D1 E534       345     mov a, soak_seconds ; Repeat for remaining variables
07D3 F0         346     movx @DPTR, A
07D4 A3         347     inc DPTR
07D5 E537       348     mov a, reflow_temp
07D7 F0         349     movx @DPTR,A
07D8 A3         350     inc DPTR
07D9 E536       351     mov a, reflow_seconds
07DB F0         352     movx @DPTR, A
07DC            353     ; Write Validation Keys to flash memory (Check upon write)
07DC A3         354     inc DPTR
07DD 7455       355     mov a, #0x55 ; First key value (0101 0101)
07DF F0         356     movx @DPTR, A
07E0 A3         357     inc DPTR
07E1 74AA       358     mov a, #0xAA ; Second key value (1010 1010)
07E3 F0         359     movx @DPTR, A
07E4            360     ; Copy Buffer to Flash
07E4 759618     361     mov MEMCON, #00011000B ; Copy page to flash
07E7 74FF       362     mov a, #0xff
07E9 F0         363     movx @DPTR, A
07EA 759600     364     mov MEMCON, #00000000B ; Disable access to data flash
07ED D2AF       365     setb EA ; Re-enable interrupts
07EF 22         366     ret
07F0            367   
07F0            368   ; Reading variables from flash memory
07F0            369   Load_Configuration:
07F0 759608     370            mov MEMCON, #00001000B ; Enable read access to data flash
07F3            371     
07F3 900004     372     mov dptr, #0x0004 ; Move dptr to first key value location
07F6 E0         373     movx a, @dptr
07F7 B4551B     374     cjne a, #0x55, Load_Defaults ; If keys do not match, write to flash failed, load default values
07FA A3         375     inc dptr ; Second key value location
07FB E0         376     movx a, @dptr
07FC B4AA16     377     cjne a, #0xAA, Load_Defaults ; Check if second keys match or not, if not then load defaults
07FF            378     ; Keys match. Now load saved values from flash
07FF 900000     379     mov dptr, #0x0000
0802 E0         380     movx a, @dptr
0803 F535       381     mov soak_temp, a       ; Load soak temperature
0805 A3         382     inc dptr
0806 E0         383     movx a, @dptr
0807 F534       384     mov soak_seconds, a ; Load soak time
0809 A3         385     inc dptr
080A E0         386            movx a, @dptr
080B F537       387     mov reflow_temp, a ; Load reflow temperature
080D A3         388     inc dptr
080E E0         389     movx a, @dptr
080F F536       390     mov reflow_seconds, a ; Load reflow time
0811 759600     391     mov MEMCON, #00000000B ; Disables access to data flashx
0814 22         392     ret
0815            393     
0815            394   ; Default (optimal) values for soldering profile
0815            395   Load_Defaults: ; Load defaults if keys are incorrect
0815 753596     396            mov soak_temp, #150
0818 75342D     397     mov soak_seconds, #45
081B 7537E1     398     mov reflow_temp, #225
081E 75361E     399     mov reflow_seconds, #30
0821 759600     400     mov MEMCON, #00000000B ; Disables access to data flash
0824 02085C     401     ljmp forever 
0827            402    
0827            403   ;------------------------------------------------------------------;
0827            404   ; ********************MACRO LIST***********************************;
0827            405   ;------------------------------------------------------------------;
0827            406   
0827            407   ;------------------------------------------------------------------;
0827            408   ; MACRO for incrementing a variable
0827            409   ;------------------------------------------------------------------;
                410   Inc_variable MAC
                411   	;Mac (%0 : inc/dec button    %1 : variable ) 
                412   	jb %0, no_inc_dec_var%M
                413   	Wait_Milli_Seconds(#50)
                414   	jb %0, no_inc_dec_var%M
                415     Wait_Milli_Seconds(#200)
                416   
                417   	inc %1
                418   	
                419   no_inc_dec_var%M:
                420   
                421   ENDMAC
0827            422   
0827            423   ;------------------------------------------------------------------;
0827            424   ; MACRO for decrementing a variable
0827            425   ;------------------------------------------------------------------;
                426   Dec_variable MAC
                427   	;Mac (%0 : inc/dec button    %1 : variable ) 
                428   	jb %0, no_inc_dec_var%M
                429   	Wait_Milli_Seconds(#50)
                430   	jb %0, no_inc_dec_var%M
                431   	Wait_Milli_Seconds(#200)
                432   
                433   	dec %1
                434   	
                435   no_inc_dec_var%M:
                436   
                437   ENDMAC
0827            438   
0827            439   ;------------------------------------------------------------------;
0827            440   ; MACRO for Showing values with header on LCD
0827            441   ;------------------------------------------------------------------;
                442   Show_Header_and_Value Mac
                443   	; MAC (%0:    Constant string for the first line on LCD       %1: value to be shown on second line				%2: unit )
                444   	Set_Cursor(1,1)
                445   	Send_Constant_String(#%0)
                446   	Set_Cursor(2,1)
                447   	Move_1B_to_4B ( x, %1)
                448   	lcall hex2bcd
                449     Display_BCD_1_digit(bcd+1)
                450   	Display_BCD(bcd)
                451     Set_Cursor(2,5)
                452     Send_Constant_String(#%2)
                453   ENDMAC
0827            454   
0827            455   
0827            456   ;------------------------------------------------------------------;
0827            457   ; MACRO for Showing messages with header on LCD
0827            458   ;------------------------------------------------------------------;
                459   Show_Header Mac
                460   	Set_Cursor(1,1)
                461     Send_Constant_String(#%0)
                462     Set_Cursor(2,1)
                463     Send_Constant_String(#%1)
                464   ENDMAC
0827            465   
0827            466   ;------------------------------------------------------------------;
0827            467   ; MACRO for Showing 2 values with header on LCD
0827            468   ;------------------------------------------------------------------;
                469   Show_Stage_Temp_Time Mac
                470   	; MAC (%0:    Constant string for the first line on LCD           %1: Temperature			%2: Time )
                471   	Set_Cursor(1,1)
                472   	Send_Constant_String(#%0)
                473     
                474     Set_Cursor(2,1)	;show temperture
                475   	Move_1B_to_4B ( x, %1)
                476   	lcall hex2bcd
                477     Display_BCD_1_digit(bcd+1)
                478   	Display_BCD(bcd)
                479   
                480     Set_Cursor(2,12)	;display time in seconds TODO: put it in minute and seconds
                481   	Move_1B_to_4B ( x, %2)
                482   	lcall hex2bcd
                483     Display_BCD(bcd+1)
                484   	Display_BCD(bcd)
                485     Set_Cursor(2,16)
                486     Display_char(#'s')
                487     
                488   	Set_Cursor(2,5)
                489   	Send_Constant_String(#Cels)
                490     
                491    
                492   ENDMAC
0827            493   
0827            494   ;------------------------------------------------------------------;
0827            495   ; MACRO for checking a button and changing state
0827            496   ;------------------------------------------------------------------;
                497   Check_button_for_State_change Mac
                498   	; MAC (%0:    Constant string for the button name           %1: state to jump to if the button is pressed )
                499   	jb %0, no_button_pressed%M
                500   	Wait_Milli_Seconds(#50)
                501   	jb %0, no_button_pressed%M
                502   	jnb %0, $
                503   	
                504   	mov state, #%1
                505     WriteCommand(#0x01)
                506     Wait_Milli_Seconds(#2)
                507   no_button_pressed%M:
                508   
                509   ENDMAC
0827            510   
0827            511   ;------------------------------------------------------------------;
0827            512   ; MACRO for comparing 2 values and changing state
0827            513   ;------------------------------------------------------------------;
                514   Compare_Values_for_State_Change MAC
                515   	;	%0: variable to check
                516   	;	%1: value set at using the buttons
                517   	;	%2: next state
                518   	mov a, %0
                519     clr c
                520     subb a, %1
                521     jnc values_not_equal%M
                522   	mov state, #%2
                523   	 WriteCommand(#0x01)
                524     Wait_Milli_Seconds(#2)
                525   values_not_equal%M:
                526   
                527   ENDMAC
0827            528   ;------------------------------------------------------------------;
0827            529   ; MACRO for turning the SSR off
0827            530   ;------------------------------------------------------------------;
                531   SSR_OFF MAC
                532       clr pwm_on
                533       clr pwm_high
                534       clr SSR_OUT
                535   ENDMAC
0827            536   
0827            537   ;------------------------------------------------------------------;
0827            538   ; MACRO for going to next state
0827            539   ;------------------------------------------------------------------;
                540   check_state MAC
                541   		; %0 state number    %1 next state
                542       mov a, state
                543       cjne a, #%0, skipstate%M
                544     	sjmp no_skip_state%M
                545   skipstate%M:
                546       ljmp state%1
                547   no_skip_state%M:
                548   ENDMAC
0827            549   ;------------------------------------------------------------------;
0827            550   ; Main program   (FSM)
0827            551   ;        -state 0:  Start Screen
0827            552   ;        -state 1:  initialization       Soak Time  
0827            553   ;        -state 2:  initialization               Soak Temperature
0827            554   ;        -state 3:  initialization               Reflow Time
0827            555   ;        -state 4:  initialization               Reflow Temp
0827            556   ;
0827            557   ;        -state 5:  Storing the variables in flash memory, and asking for user confirmation to begin process                             
0827            558   ; -state 6:  initialising Timer and resetting Global Timer
0827            559   ;        -state 10: Ramp to Soak
0827            560   ;        -state 11: Soak
0827            561   ;        -state 12: Ramp to reflow
0827            562   ;        -state 13: Reflow (Done for now, possible additions check if temperature goes too high, if so then begin cooling immediately etc.)
0827            563   ;        -state 14: Cooling
0827            564   ;        -state 15: Finished successfully
0827            565   ;        -state 16: ERROR State
0827            566   ; -state 17: Force Quit State
0827            567   ;------------------------------------------------------------------;
0827            568   MainProgram:
0827            569   
0827            570            ; Initialization
0827 75817F     571       mov SP, #0x7F
082A 75C100     572       mov PMOD, #0 ; Configure all ports in bidirectional mode
082D 120418     573       lcall Timer0_Init
0830 12042B     574       lcall Timer2_Init
0833 C2CA       575       clr TR2
0835 D2AF       576       setb EA   ; Enable Global interrupts
0837 12034C     577       lcall INIT_SPI
083A 1203BD     578            lcall InitSerialPort
083D 120088     579       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0840            580       
0840 C202       581       clr pwm_on
0842 C203       581       clr pwm_high
0844 C2B7       581       clr SSR_OUT  ; clears  pwm_on ------- pwm_high ------- SSR_OUT ------- in_process                            
0846            582   
0846 C204       583                    clr settings_modified_flag
0848 C201       584       clr one_min_flag
084A C205       585       clr sample_flag
084C            586       
084C E4         587                    clr a
084D F534       588       mov soak_seconds, a
084F F535       589       mov soak_temp, a
0851 F536       590       mov reflow_seconds, a
0853 F537       591       mov reflow_temp, a
0855 F555       592       mov state, a
0857 F539       593       mov state_time, a
0859            594            
0859 1207F0     595            lcall Load_Configuration ; Read values from data flash
085C            596            
085C            597   forever:         
085C 300503     598     jnb sample_flag, state0
085F 12065A     599     lcall Take_Sample
0862            600   
0862            601   ; Main start screen appears on boot and 
0862            602   state0:
0862            603                    ; 0 state number    1 next state
0862 E555       603       mov a, state
0864 B40002     603       cjne a, #0, skipstate43
0867 8003       603            sjmp no_skip_state43
0869            603   skipstate43:
0869 0208ED     603       ljmp state1
086C            603   no_skip_state43:
086C            604     
086C C0E0       605            push acc
086E 7401       605            mov a, #1
0870 14         605            dec a
0871 1200C1     605            lcall ?Set_Cursor_1 ; Select column and row
0874 D0E0       605            pop acc
0876 C083       605            push dph
0878 C082       605            push dpl
087A C0E0       605            push acc
087C 900442     605            mov dptr, #StartMessage
087F 1200B4     605            lcall ?Send_Constant_String
0882 D0E0       605            pop acc
0884 D082       605            pop dpl
0886 D083       605            pop dph
0888 C0E0       605            push acc
088A 7401       605            mov a, #1
088C 14         605            dec a
088D 1200BF     605            lcall ?Set_Cursor_2 ; Select column and row
0890 D0E0       605            pop acc
0892 C083       605            push dph
0894 C082       605            push dpl
0896 C0E0       605            push acc
0898 900453     605            mov dptr, #StartMessage2
089B 1200B4     605            lcall ?Send_Constant_String
089E D0E0       605            pop acc
08A0 D082       605            pop dpl
08A2 D083       605            pop dph
08A4            606     
08A4            607            ; MAC (CYCLE_BUTTON:    Constant string for the button name           1: state to jump to if the button is pressed )
08A4 208020     607            jb CYCLE_BUTTON, no_button_pressed49
08A7 C002       607            push AR2
08A9 7A32       607            mov R2, #50
08AB 120039     607            lcall ?Wait_Milli_Seconds
08AE D002       607            pop AR2
08B0 208014     607            jb CYCLE_BUTTON, no_button_pressed49
08B3 3080FD     607            jnb CYCLE_BUTTON, $
08B6            607            
08B6 755501     607            mov state, #1
08B9 7401       607            mov a, #0x01
08BB 120083     607            lcall ?WriteCommand
08BE C002       607            push AR2
08C0 7A02       607            mov R2, #2
08C2 120039     607            lcall ?Wait_Milli_Seconds
08C5 D002       607            pop AR2
08C7            607   no_button_pressed49:
08C7            607                    ; Transition to parameter select states
08C7            608            ; MAC (INC_BUTTON:    Constant string for the button name           5: state to jump to if the button is pressed )
08C7 208220     608            jb INC_BUTTON, no_button_pressed53
08CA C002       608            push AR2
08CC 7A32       608            mov R2, #50
08CE 120039     608            lcall ?Wait_Milli_Seconds
08D1 D002       608            pop AR2
08D3 208214     608            jb INC_BUTTON, no_button_pressed53
08D6 3082FD     608            jnb INC_BUTTON, $
08D9            608            
08D9 755505     608            mov state, #5
08DC 7401       608            mov a, #0x01
08DE 120083     608            lcall ?WriteCommand
08E1 C002       608            push AR2
08E3 7A02       608            mov R2, #2
08E5 120039     608            lcall ?Wait_Milli_Seconds
08E8 D002       608            pop AR2
08EA            608   no_button_pressed53:
08EA            608                            ; Transition to save/start confirm state
08EA 02085C     609     ljmp forever
08ED            610   ; initializing the Soak Time 
08ED            611   state1:
08ED            612                    ; 1 state number    2 next state
08ED E555       612       mov a, state
08EF B40102     612       cjne a, #1, skipstate57
08F2 8003       612            sjmp no_skip_state57
08F4            612   skipstate57:
08F4 0209C4     612       ljmp state2
08F7            612   no_skip_state57:
08F7 D204       613            setb settings_modified_flag
08F9            614     
08F9            615            ; MAC (SoakTime_Message:    Constant string for the first line on LCD       soak_seconds: value to be shown on second line                              Secs: unit )
08F9 C0E0       615            push acc
08FB 7401       615            mov a, #1
08FD 14         615            dec a
08FE 1200C1     615            lcall ?Set_Cursor_1 ; Select column and row
0901 D0E0       615            pop acc
0903 C083       615            push dph
0905 C082       615            push dpl
0907 C0E0       615            push acc
0909 900464     615            mov dptr, #SoakTime_Message
090C 1200B4     615            lcall ?Send_Constant_String
090F D0E0       615            pop acc
0911 D082       615            pop dpl
0913 D083       615            pop dph
0915 C0E0       615            push acc
0917 7401       615            mov a, #1
0919 14         615            dec a
091A 1200BF     615            lcall ?Set_Cursor_2 ; Select column and row
091D D0E0       615            pop acc
091F 85343A     615            mov x+0, soak_seconds+0 
0922 753B00     615            mov x+1, #0
0925 753C00     615            mov x+2, #0 
0928 753D00     615            mov x+3, #0
092B 1200DC     615            lcall hex2bcd
092E C000       615            push ar0
0930 C0E0       615            push acc
0932 7420       615            mov a, #' '
0934 12007E     615            lcall ?WriteData
0937 A845       615            mov r0, bcd+1
0939 E8         615            mov a, r0
093A 540F       615            anl a, #0fh
093C 4430       615            orl a, #30h
093E 12007E     615            lcall ?WriteData
0941 D0E0       615            pop acc
0943 D000       615            pop ar0
0945 C000       615            push ar0
0947 A844       615            mov r0, bcd
0949 1200C6     615            lcall ?Display_BCD
094C D000       615            pop ar0
094E C0E0       615            push acc
0950 7405       615            mov a, #5
0952 14         615            dec a
0953 1200BF     615            lcall ?Set_Cursor_2 ; Select column and row
0956 D0E0       615            pop acc
0958 C083       615            push dph
095A C082       615            push dpl
095C C0E0       615            push acc
095E 9005EA     615            mov dptr, #Secs
0961 1200B4     615            lcall ?Send_Constant_String
0964 D0E0       615            pop acc
0966 D082       615            pop dpl
0968 D083       615            pop dph
096A            616            ;Mac (INC_BUTTON : inc/dec button    soak_seconds : variable ) 
096A 208217     616            jb INC_BUTTON, no_inc_dec_var67
096D C002       616            push AR2
096F 7A32       616            mov R2, #50
0971 120039     616            lcall ?Wait_Milli_Seconds
0974 D002       616            pop AR2
0976 20820B     616            jb INC_BUTTON, no_inc_dec_var67
0979 C002       616            push AR2
097B 7AC8       616            mov R2, #200
097D 120039     616            lcall ?Wait_Milli_Seconds
0980 D002       616            pop AR2
0982            616   
0982 0534       616            inc soak_seconds
0984            616            
0984            616   no_inc_dec_var67:
0984            616   
0984            617            ;Mac (DEC_BUTTON : inc/dec button    soak_seconds : variable ) 
0984 208417     617            jb DEC_BUTTON, no_inc_dec_var70
0987 C002       617            push AR2
0989 7A32       617            mov R2, #50
098B 120039     617            lcall ?Wait_Milli_Seconds
098E D002       617            pop AR2
0990 20840B     617            jb DEC_BUTTON, no_inc_dec_var70
0993 C002       617            push AR2
0995 7AC8       617            mov R2, #200
0997 120039     617            lcall ?Wait_Milli_Seconds
099A D002       617            pop AR2
099C            617   
099C 1534       617            dec soak_seconds
099E            617            
099E            617   no_inc_dec_var70:
099E            617   
099E            618            
099E            619            ; MAC (CYCLE_BUTTON:    Constant string for the button name           2: state to jump to if the button is pressed )
099E 208020     619            jb CYCLE_BUTTON, no_button_pressed73
09A1 C002       619            push AR2
09A3 7A32       619            mov R2, #50
09A5 120039     619            lcall ?Wait_Milli_Seconds
09A8 D002       619            pop AR2
09AA 208014     619            jb CYCLE_BUTTON, no_button_pressed73
09AD 3080FD     619            jnb CYCLE_BUTTON, $
09B0            619            
09B0 755502     619            mov state, #2
09B3 7401       619            mov a, #0x01
09B5 120083     619            lcall ?WriteCommand
09B8 C002       619            push AR2
09BA 7A02       619            mov R2, #2
09BC 120039     619            lcall ?Wait_Milli_Seconds
09BF D002       619            pop AR2
09C1            619   no_button_pressed73:
09C1            619   
09C1            619   
09C1 02085C     620            ljmp forever                                                                    
09C4            621            
09C4            622   ; initializing the Soak Temperature 
09C4            623   state2:
09C4            624                    ; 2 state number    3 next state
09C4 E555       624       mov a, state
09C6 B40202     624       cjne a, #2, skipstate77
09C9 8003       624            sjmp no_skip_state77
09CB            624   skipstate77:
09CB 020A99     624       ljmp state3
09CE            624   no_skip_state77:
09CE            624   
09CE            625            ; MAC (SoakTemp_Message:    Constant string for the first line on LCD       soak_temp: value to be shown on second line                                 Cels: unit )
09CE C0E0       625            push acc
09D0 7401       625            mov a, #1
09D2 14         625            dec a
09D3 1200C1     625            lcall ?Set_Cursor_1 ; Select column and row
09D6 D0E0       625            pop acc
09D8 C083       625            push dph
09DA C082       625            push dpl
09DC C0E0       625            push acc
09DE 900475     625            mov dptr, #SoakTemp_Message
09E1 1200B4     625            lcall ?Send_Constant_String
09E4 D0E0       625            pop acc
09E6 D082       625            pop dpl
09E8 D083       625            pop dph
09EA C0E0       625            push acc
09EC 7401       625            mov a, #1
09EE 14         625            dec a
09EF 1200BF     625            lcall ?Set_Cursor_2 ; Select column and row
09F2 D0E0       625            pop acc
09F4 85353A     625            mov x+0, soak_temp+0 
09F7 753B00     625            mov x+1, #0
09FA 753C00     625            mov x+2, #0 
09FD 753D00     625            mov x+3, #0
0A00 1200DC     625            lcall hex2bcd
0A03 C000       625            push ar0
0A05 C0E0       625            push acc
0A07 7420       625            mov a, #' '
0A09 12007E     625            lcall ?WriteData
0A0C A845       625            mov r0, bcd+1
0A0E E8         625            mov a, r0
0A0F 540F       625            anl a, #0fh
0A11 4430       625            orl a, #30h
0A13 12007E     625            lcall ?WriteData
0A16 D0E0       625            pop acc
0A18 D000       625            pop ar0
0A1A C000       625            push ar0
0A1C A844       625            mov r0, bcd
0A1E 1200C6     625            lcall ?Display_BCD
0A21 D000       625            pop ar0
0A23 C0E0       625            push acc
0A25 7405       625            mov a, #5
0A27 14         625            dec a
0A28 1200BF     625            lcall ?Set_Cursor_2 ; Select column and row
0A2B D0E0       625            pop acc
0A2D C083       625            push dph
0A2F C082       625            push dpl
0A31 C0E0       625            push acc
0A33 9005E6     625            mov dptr, #Cels
0A36 1200B4     625            lcall ?Send_Constant_String
0A39 D0E0       625            pop acc
0A3B D082       625            pop dpl
0A3D D083       625            pop dph
0A3F            626            ;Mac (INC_BUTTON : inc/dec button    soak_temp : variable ) 
0A3F 208217     626            jb INC_BUTTON, no_inc_dec_var87
0A42 C002       626            push AR2
0A44 7A32       626            mov R2, #50
0A46 120039     626            lcall ?Wait_Milli_Seconds
0A49 D002       626            pop AR2
0A4B 20820B     626            jb INC_BUTTON, no_inc_dec_var87
0A4E C002       626            push AR2
0A50 7AC8       626            mov R2, #200
0A52 120039     626            lcall ?Wait_Milli_Seconds
0A55 D002       626            pop AR2
0A57            626   
0A57 0535       626            inc soak_temp
0A59            626            
0A59            626   no_inc_dec_var87:
0A59            626   
0A59            627            ;Mac (DEC_BUTTON : inc/dec button    soak_temp : variable ) 
0A59 208417     627            jb DEC_BUTTON, no_inc_dec_var90
0A5C C002       627            push AR2
0A5E 7A32       627            mov R2, #50
0A60 120039     627            lcall ?Wait_Milli_Seconds
0A63 D002       627            pop AR2
0A65 20840B     627            jb DEC_BUTTON, no_inc_dec_var90
0A68 C002       627            push AR2
0A6A 7AC8       627            mov R2, #200
0A6C 120039     627            lcall ?Wait_Milli_Seconds
0A6F D002       627            pop AR2
0A71            627   
0A71 1535       627            dec soak_temp
0A73            627            
0A73            627   no_inc_dec_var90:
0A73            627   
0A73            628            
0A73            629            ; MAC (CYCLE_BUTTON:    Constant string for the button name           3: state to jump to if the button is pressed )
0A73 208020     629            jb CYCLE_BUTTON, no_button_pressed93
0A76 C002       629            push AR2
0A78 7A32       629            mov R2, #50
0A7A 120039     629            lcall ?Wait_Milli_Seconds
0A7D D002       629            pop AR2
0A7F 208014     629            jb CYCLE_BUTTON, no_button_pressed93
0A82 3080FD     629            jnb CYCLE_BUTTON, $
0A85            629            
0A85 755503     629            mov state, #3
0A88 7401       629            mov a, #0x01
0A8A 120083     629            lcall ?WriteCommand
0A8D C002       629            push AR2
0A8F 7A02       629            mov R2, #2
0A91 120039     629            lcall ?Wait_Milli_Seconds
0A94 D002       629            pop AR2
0A96            629   no_button_pressed93:
0A96            629   
0A96 02085C     630            ljmp forever                                                                    
0A99            631   
0A99            632   ; initializing the Reflow Time 
0A99            633   state3:
0A99            634                    ; 3 state number    4 next state
0A99 E555       634       mov a, state
0A9B B40302     634       cjne a, #3, skipstate97
0A9E 8003       634            sjmp no_skip_state97
0AA0            634   skipstate97:
0AA0 020B6E     634       ljmp state4
0AA3            634   no_skip_state97:
0AA3            634   
0AA3            635            
0AA3            636            ; MAC (ReflowTime_Message:    Constant string for the first line on LCD       reflow_seconds: value to be shown on second line                          Secs: unit )
0AA3 C0E0       636            push acc
0AA5 7401       636            mov a, #1
0AA7 14         636            dec a
0AA8 1200C1     636            lcall ?Set_Cursor_1 ; Select column and row
0AAB D0E0       636            pop acc
0AAD C083       636            push dph
0AAF C082       636            push dpl
0AB1 C0E0       636            push acc
0AB3 900486     636            mov dptr, #ReflowTime_Message
0AB6 1200B4     636            lcall ?Send_Constant_String
0AB9 D0E0       636            pop acc
0ABB D082       636            pop dpl
0ABD D083       636            pop dph
0ABF C0E0       636            push acc
0AC1 7401       636            mov a, #1
0AC3 14         636            dec a
0AC4 1200BF     636            lcall ?Set_Cursor_2 ; Select column and row
0AC7 D0E0       636            pop acc
0AC9 85363A     636            mov x+0, reflow_seconds+0 
0ACC 753B00     636            mov x+1, #0
0ACF 753C00     636            mov x+2, #0 
0AD2 753D00     636            mov x+3, #0
0AD5 1200DC     636            lcall hex2bcd
0AD8 C000       636            push ar0
0ADA C0E0       636            push acc
0ADC 7420       636            mov a, #' '
0ADE 12007E     636            lcall ?WriteData
0AE1 A845       636            mov r0, bcd+1
0AE3 E8         636            mov a, r0
0AE4 540F       636            anl a, #0fh
0AE6 4430       636            orl a, #30h
0AE8 12007E     636            lcall ?WriteData
0AEB D0E0       636            pop acc
0AED D000       636            pop ar0
0AEF C000       636            push ar0
0AF1 A844       636            mov r0, bcd
0AF3 1200C6     636            lcall ?Display_BCD
0AF6 D000       636            pop ar0
0AF8 C0E0       636            push acc
0AFA 7405       636            mov a, #5
0AFC 14         636            dec a
0AFD 1200BF     636            lcall ?Set_Cursor_2 ; Select column and row
0B00 D0E0       636            pop acc
0B02 C083       636            push dph
0B04 C082       636            push dpl
0B06 C0E0       636            push acc
0B08 9005EA     636            mov dptr, #Secs
0B0B 1200B4     636            lcall ?Send_Constant_String
0B0E D0E0       636            pop acc
0B10 D082       636            pop dpl
0B12 D083       636            pop dph         
0B14            637            ;Mac (INC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0B14 208217     637            jb INC_BUTTON, no_inc_dec_var107
0B17 C002       637            push AR2
0B19 7A32       637            mov R2, #50
0B1B 120039     637            lcall ?Wait_Milli_Seconds
0B1E D002       637            pop AR2
0B20 20820B     637            jb INC_BUTTON, no_inc_dec_var107
0B23 C002       637            push AR2
0B25 7AC8       637            mov R2, #200
0B27 120039     637            lcall ?Wait_Milli_Seconds
0B2A D002       637            pop AR2
0B2C            637   
0B2C 0536       637            inc reflow_seconds
0B2E            637            
0B2E            637   no_inc_dec_var107:
0B2E            637   
0B2E            638            ;Mac (DEC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0B2E 208417     638            jb DEC_BUTTON, no_inc_dec_var110
0B31 C002       638            push AR2
0B33 7A32       638            mov R2, #50
0B35 120039     638            lcall ?Wait_Milli_Seconds
0B38 D002       638            pop AR2
0B3A 20840B     638            jb DEC_BUTTON, no_inc_dec_var110
0B3D C002       638            push AR2
0B3F 7AC8       638            mov R2, #200
0B41 120039     638            lcall ?Wait_Milli_Seconds
0B44 D002       638            pop AR2
0B46            638   
0B46 1536       638            dec reflow_seconds
0B48            638            
0B48            638   no_inc_dec_var110:
0B48            638   
0B48            639            
0B48            640            ; MAC (CYCLE_BUTTON:    Constant string for the button name           4: state to jump to if the button is pressed )
0B48 208020     640            jb CYCLE_BUTTON, no_button_pressed113
0B4B C002       640            push AR2
0B4D 7A32       640            mov R2, #50
0B4F 120039     640            lcall ?Wait_Milli_Seconds
0B52 D002       640            pop AR2
0B54 208014     640            jb CYCLE_BUTTON, no_button_pressed113
0B57 3080FD     640            jnb CYCLE_BUTTON, $
0B5A            640            
0B5A 755504     640            mov state, #4
0B5D 7401       640            mov a, #0x01
0B5F 120083     640            lcall ?WriteCommand
0B62 C002       640            push AR2
0B64 7A02       640            mov R2, #2
0B66 120039     640            lcall ?Wait_Milli_Seconds
0B69 D002       640            pop AR2
0B6B            640   no_button_pressed113:
0B6B            640   
0B6B 02085C     641            ljmp forever                                                                    
0B6E            642   
0B6E            643   ; initializing the Reflow Temperature 
0B6E            644   state4:
0B6E            645                    ; 4 state number    5 next state
0B6E E555       645       mov a, state
0B70 B40402     645       cjne a, #4, skipstate117
0B73 8003       645            sjmp no_skip_state117
0B75            645   skipstate117:
0B75 020C43     645       ljmp state5
0B78            645   no_skip_state117:
0B78            646            
0B78            647            ; MAC (ReflowTemp_Message:    Constant string for the first line on LCD       reflow_temp: value to be shown on second line                             Cels: unit )
0B78 C0E0       647            push acc
0B7A 7401       647            mov a, #1
0B7C 14         647            dec a
0B7D 1200C1     647            lcall ?Set_Cursor_1 ; Select column and row
0B80 D0E0       647            pop acc
0B82 C083       647            push dph
0B84 C082       647            push dpl
0B86 C0E0       647            push acc
0B88 900497     647            mov dptr, #ReflowTemp_Message
0B8B 1200B4     647            lcall ?Send_Constant_String
0B8E D0E0       647            pop acc
0B90 D082       647            pop dpl
0B92 D083       647            pop dph
0B94 C0E0       647            push acc
0B96 7401       647            mov a, #1
0B98 14         647            dec a
0B99 1200BF     647            lcall ?Set_Cursor_2 ; Select column and row
0B9C D0E0       647            pop acc
0B9E 85373A     647            mov x+0, reflow_temp+0 
0BA1 753B00     647            mov x+1, #0
0BA4 753C00     647            mov x+2, #0 
0BA7 753D00     647            mov x+3, #0
0BAA 1200DC     647            lcall hex2bcd
0BAD C000       647            push ar0
0BAF C0E0       647            push acc
0BB1 7420       647            mov a, #' '
0BB3 12007E     647            lcall ?WriteData
0BB6 A845       647            mov r0, bcd+1
0BB8 E8         647            mov a, r0
0BB9 540F       647            anl a, #0fh
0BBB 4430       647            orl a, #30h
0BBD 12007E     647            lcall ?WriteData
0BC0 D0E0       647            pop acc
0BC2 D000       647            pop ar0
0BC4 C000       647            push ar0
0BC6 A844       647            mov r0, bcd
0BC8 1200C6     647            lcall ?Display_BCD
0BCB D000       647            pop ar0
0BCD C0E0       647            push acc
0BCF 7405       647            mov a, #5
0BD1 14         647            dec a
0BD2 1200BF     647            lcall ?Set_Cursor_2 ; Select column and row
0BD5 D0E0       647            pop acc
0BD7 C083       647            push dph
0BD9 C082       647            push dpl
0BDB C0E0       647            push acc
0BDD 9005E6     647            mov dptr, #Cels
0BE0 1200B4     647            lcall ?Send_Constant_String
0BE3 D0E0       647            pop acc
0BE5 D082       647            pop dpl
0BE7 D083       647            pop dph                 
0BE9            648            ;Mac (INC_BUTTON : inc/dec button    reflow_temp : variable ) 
0BE9 208217     648            jb INC_BUTTON, no_inc_dec_var127
0BEC C002       648            push AR2
0BEE 7A32       648            mov R2, #50
0BF0 120039     648            lcall ?Wait_Milli_Seconds
0BF3 D002       648            pop AR2
0BF5 20820B     648            jb INC_BUTTON, no_inc_dec_var127
0BF8 C002       648            push AR2
0BFA 7AC8       648            mov R2, #200
0BFC 120039     648            lcall ?Wait_Milli_Seconds
0BFF D002       648            pop AR2
0C01            648   
0C01            648   
0C01 0537       648            inc reflow_temp
0C03            648            
0C03            648   no_inc_dec_var127:
0C03            648   
0C03            649            ;Mac (DEC_BUTTON : inc/dec button    reflow_temp : variable ) 
0C03 208417     649            jb DEC_BUTTON, no_inc_dec_var130
0C06 C002       649            push AR2
0C08 7A32       649            mov R2, #50
0C0A 120039     649            lcall ?Wait_Milli_Seconds
0C0D D002       649            pop AR2
0C0F 20840B     649            jb DEC_BUTTON, no_inc_dec_var130
0C12 C002       649            push AR2
0C14 7AC8       649            mov R2, #200
0C16 120039     649            lcall ?Wait_Milli_Seconds
0C19 D002       649            pop AR2
0C1B            649   
0C1B            649   
0C1B 1537       649            dec reflow_temp
0C1D            649            
0C1D            649   no_inc_dec_var130:
0C1D            649   
0C1D            650            
0C1D            651            ; MAC (CYCLE_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0C1D 208020     651            jb CYCLE_BUTTON, no_button_pressed133
0C20 C002       651            push AR2
0C22 7A32       651            mov R2, #50
0C24 120039     651            lcall ?Wait_Milli_Seconds
0C27 D002       651            pop AR2
0C29 208014     651            jb CYCLE_BUTTON, no_button_pressed133
0C2C 3080FD     651            jnb CYCLE_BUTTON, $
0C2F            651            
0C2F 755500     651            mov state, #0
0C32 7401       651            mov a, #0x01
0C34 120083     651            lcall ?WriteCommand
0C37 C002       651            push AR2
0C39 7A02       651            mov R2, #2
0C3B 120039     651            lcall ?Wait_Milli_Seconds
0C3E D002       651            pop AR2
0C40            651   no_button_pressed133:
0C40            651   
0C40 02085C     652            ljmp forever                                                                    
0C43            653            
0C43            654   ; Saves value in Flash Memory and Presents Confirmation Screen to Start Process
0C43            655   state5:
0C43            656                    ; 5 state number    6 next state
0C43 E555       656       mov a, state
0C45 B40502     656       cjne a, #5, skipstate137
0C48 8003       656            sjmp no_skip_state137
0C4A            656   skipstate137:
0C4A 020D32     656       ljmp state6
0C4D            656   no_skip_state137:
0C4D            657            
0C4D 300461     658     jnb settings_modified_flag, state5AndAHalf ; Save values once, once saved skip this
0C50            659     
0C50 1207BF     660            lcall Save_Configuration ; Call to save data to flash memory
0C53 C204       661            clr settings_modified_flag
0C55 C0E0       662            push acc
0C57 7401       662            mov a, #1
0C59 14         662            dec a
0C5A 1200C1     662            lcall ?Set_Cursor_1 ; Select column and row
0C5D D0E0       662            pop acc
0C5F C083       662            push dph
0C61 C082       662            push dpl
0C63 C0E0       662            push acc
0C65 9004EC     662            mov dptr, #SaveToFlash_Msg
0C68 1200B4     662            lcall ?Send_Constant_String
0C6B D0E0       662            pop acc
0C6D D082       662            pop dpl
0C6F D083       662            pop dph
0C71 C0E0       662            push acc
0C73 7401       662            mov a, #1
0C75 14         662            dec a
0C76 1200BF     662            lcall ?Set_Cursor_2 ; Select column and row
0C79 D0E0       662            pop acc
0C7B C083       662            push dph
0C7D C082       662            push dpl
0C7F C0E0       662            push acc
0C81 90050E     662            mov dptr, #BlankMsg
0C84 1200B4     662            lcall ?Send_Constant_String
0C87 D0E0       662            pop acc
0C89 D082       662            pop dpl
0C8B D083       662            pop dph
0C8D C002       663            push AR2
0C8F 7AFA       663            mov R2, #250
0C91 120039     663            lcall ?Wait_Milli_Seconds
0C94 D002       663            pop AR2
0C96 C002       664            push AR2
0C98 7AFA       664            mov R2, #250
0C9A 120039     664            lcall ?Wait_Milli_Seconds
0C9D D002       664            pop AR2
0C9F C002       665            push AR2
0CA1 7AFA       665            mov R2, #250
0CA3 120039     665            lcall ?Wait_Milli_Seconds
0CA6 D002       665            pop AR2
0CA8 C002       666            push AR2
0CAA 7AFA       666            mov R2, #250
0CAC 120039     666            lcall ?Wait_Milli_Seconds
0CAF D002       666            pop AR2
0CB1            667     
0CB1            668   state5AndAHalf:  
0CB1            669   
0CB1 C0E0       670            push acc
0CB3 7401       670            mov a, #1
0CB5 14         670            dec a
0CB6 1200C1     670            lcall ?Set_Cursor_1 ; Select column and row
0CB9 D0E0       670            pop acc
0CBB C083       670            push dph
0CBD C082       670            push dpl
0CBF C0E0       670            push acc
0CC1 9004A8     670            mov dptr, #Start_Message
0CC4 1200B4     670            lcall ?Send_Constant_String
0CC7 D0E0       670            pop acc
0CC9 D082       670            pop dpl
0CCB D083       670            pop dph
0CCD C0E0       670            push acc
0CCF 7401       670            mov a, #1
0CD1 14         670            dec a
0CD2 1200BF     670            lcall ?Set_Cursor_2 ; Select column and row
0CD5 D0E0       670            pop acc
0CD7 C083       670            push dph
0CD9 C082       670            push dpl
0CDB C0E0       670            push acc
0CDD 9004B9     670            mov dptr, #Y_N_Message
0CE0 1200B4     670            lcall ?Send_Constant_String
0CE3 D0E0       670            pop acc
0CE5 D082       670            pop dpl
0CE7 D083       670            pop dph
0CE9            671            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0CE9 208420     671            jb DEC_BUTTON, no_button_pressed152
0CEC C002       671            push AR2
0CEE 7A32       671            mov R2, #50
0CF0 120039     671            lcall ?Wait_Milli_Seconds
0CF3 D002       671            pop AR2
0CF5 208414     671            jb DEC_BUTTON, no_button_pressed152
0CF8 3084FD     671            jnb DEC_BUTTON, $
0CFB            671            
0CFB 755500     671            mov state, #0
0CFE 7401       671            mov a, #0x01
0D00 120083     671            lcall ?WriteCommand
0D03 C002       671            push AR2
0D05 7A02       671            mov R2, #2
0D07 120039     671            lcall ?Wait_Milli_Seconds
0D0A D002       671            pop AR2
0D0C            671   no_button_pressed152:
0D0C            671            ; Move to state 0 to reselect values
0D0C            672            ; MAC (INC_BUTTON:    Constant string for the button name           6: state to jump to if the button is pressed )
0D0C 208220     672            jb INC_BUTTON, no_button_pressed156
0D0F C002       672            push AR2
0D11 7A32       672            mov R2, #50
0D13 120039     672            lcall ?Wait_Milli_Seconds
0D16 D002       672            pop AR2
0D18 208214     672            jb INC_BUTTON, no_button_pressed156
0D1B 3082FD     672            jnb INC_BUTTON, $
0D1E            672            
0D1E 755506     672            mov state, #6
0D21 7401       672            mov a, #0x01
0D23 120083     672            lcall ?WriteCommand
0D26 C002       672            push AR2
0D28 7A02       672            mov R2, #2
0D2A 120039     672            lcall ?Wait_Milli_Seconds
0D2D D002       672            pop AR2
0D2F            672   no_button_pressed156:
0D2F            672            ; Start Process
0D2F            673            ; Need beep here;
0D2F 02085C     674     ljmp forever   
0D32            675   
0D32            676   state6:
0D32            677                    ; 6 state number    10 next state
0D32 E555       677       mov a, state
0D34 B40602     677       cjne a, #6, skipstate160
0D37 8003       677            sjmp no_skip_state160
0D39            677   skipstate160:
0D39 020D4B     677       ljmp state10
0D3C            677   no_skip_state160:
0D3C E4         678     clr a
0D3D F538       679     mov run_time_sec, a
0D3F F539       680     mov state_time, a
0D41 D205       681     setb sample_flag
0D43 D2CA       682     setb TR2
0D45 75550A     683     mov state, #10
0D48 02085C     684     ljmp forever
0D4B            685     
0D4B            686   state10:
0D4B            687   
0D4B            688                    ; 10 state number    11 next state
0D4B E555       688       mov a, state
0D4D B40A02     688       cjne a, #10, skipstate161
0D50 8003       688            sjmp no_skip_state161
0D52            688   skipstate161:
0D52 020E4D     688       ljmp state11
0D55            688   no_skip_state161:
0D55            689            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0D55 208020     689            jb CYCLE_BUTTON, no_button_pressed162
0D58 C002       689            push AR2
0D5A 7A32       689            mov R2, #50
0D5C 120039     689            lcall ?Wait_Milli_Seconds
0D5F D002       689            pop AR2
0D61 208014     689            jb CYCLE_BUTTON, no_button_pressed162
0D64 3080FD     689            jnb CYCLE_BUTTON, $
0D67            689            
0D67 755511     689            mov state, #17
0D6A 7401       689            mov a, #0x01
0D6C 120083     689            lcall ?WriteCommand
0D6F C002       689            push AR2
0D71 7A02       689            mov R2, #2
0D73 120039     689            lcall ?Wait_Milli_Seconds
0D76 D002       689            pop AR2
0D78            689   no_button_pressed162:
0D78            689   
0D78 C202       690            clr pwm_on                      ;100% pwm
0D7A D2B7       691            setb SSR_OUT            ; for 100% power
0D7C            692            ; MAC (Ramp2Soak:    Constant string for the first line on LCD           current_temp: Temperature                      state_time: Time )
0D7C C0E0       692            push acc
0D7E 7401       692            mov a, #1
0D80 14         692            dec a
0D81 1200C1     692            lcall ?Set_Cursor_1 ; Select column and row
0D84 D0E0       692            pop acc
0D86 C083       692            push dph
0D88 C082       692            push dpl
0D8A C0E0       692            push acc
0D8C 900550     692            mov dptr, #Ramp2Soak
0D8F 1200B4     692            lcall ?Send_Constant_String
0D92 D0E0       692            pop acc
0D94 D082       692            pop dpl
0D96 D083       692            pop dph
0D98            692     
0D98 C0E0       692            push acc
0D9A 7401       692            mov a, #1
0D9C 14         692            dec a
0D9D 1200BF     692            lcall ?Set_Cursor_2 ; Select column and row
0DA0 D0E0       692            pop acc         ;show temperture
0DA2 85563A     692            mov x+0, current_temp+0 
0DA5 753B00     692            mov x+1, #0
0DA8 753C00     692            mov x+2, #0 
0DAB 753D00     692            mov x+3, #0
0DAE 1200DC     692            lcall hex2bcd
0DB1 C000       692            push ar0
0DB3 C0E0       692            push acc
0DB5 7420       692            mov a, #' '
0DB7 12007E     692            lcall ?WriteData
0DBA A845       692            mov r0, bcd+1
0DBC E8         692            mov a, r0
0DBD 540F       692            anl a, #0fh
0DBF 4430       692            orl a, #30h
0DC1 12007E     692            lcall ?WriteData
0DC4 D0E0       692            pop acc
0DC6 D000       692            pop ar0
0DC8 C000       692            push ar0
0DCA A844       692            mov r0, bcd
0DCC 1200C6     692            lcall ?Display_BCD
0DCF D000       692            pop ar0
0DD1            692   
0DD1 C0E0       692            push acc
0DD3 740C       692            mov a, #12
0DD5 14         692            dec a
0DD6 1200BF     692            lcall ?Set_Cursor_2 ; Select column and row
0DD9 D0E0       692            pop acc         ;display time in seconds TODO: put it in minute and seconds
0DDB 85393A     692            mov x+0, state_time+0 
0DDE 753B00     692            mov x+1, #0
0DE1 753C00     692            mov x+2, #0 
0DE4 753D00     692            mov x+3, #0
0DE7 1200DC     692            lcall hex2bcd
0DEA C000       692            push ar0
0DEC A845       692            mov r0, bcd+1
0DEE 1200C6     692            lcall ?Display_BCD
0DF1 D000       692            pop ar0
0DF3 C000       692            push ar0
0DF5 A844       692            mov r0, bcd
0DF7 1200C6     692            lcall ?Display_BCD
0DFA D000       692            pop ar0
0DFC C0E0       692            push acc
0DFE 7410       692            mov a, #16
0E00 14         692            dec a
0E01 1200BF     692            lcall ?Set_Cursor_2 ; Select column and row
0E04 D0E0       692            pop acc
0E06 C0E0       692            push acc
0E08 7473       692            mov a, #'s'
0E0A 12007E     692            lcall ?WriteData
0E0D D0E0       692            pop acc
0E0F            692     
0E0F C0E0       692            push acc
0E11 7405       692            mov a, #5
0E13 14         692            dec a
0E14 1200BF     692            lcall ?Set_Cursor_2 ; Select column and row
0E17 D0E0       692            pop acc
0E19 C083       692            push dph
0E1B C082       692            push dpl
0E1D C0E0       692            push acc
0E1F 9005E6     692            mov dptr, #Cels
0E22 1200B4     692            lcall ?Send_Constant_String
0E25 D0E0       692            pop acc
0E27 D082       692            pop dpl
0E29 D083       692            pop dph
0E2B            692     
0E2B            692    
0E2B            692            ;display the current stage and current temperature
0E2B 30010F     693     jnb one_min_flag, not_one_min      ;check if 60 seconds has passed
0E2E C201       694     clr one_min_flag
0E30 E556       695     mov a, current_temp
0E32 C3         696     clr c
0E33 B43200     697     cjne a, #50, check_thermocouple  ;check if thermocouple degree is bigger than 50
0E36            698   check_thermocouple:
0E36 5005       699     jnc not_one_min   ;if not bigger than 50, c=1, jump to display error
0E38 755510     700     mov state, #16
0E3B 800D       701     sjmp state10_Loop
0E3D            702     
0E3D            703   not_one_min:
0E3D E535       704            mov a, soak_temp 
0E3F C3         705     clr c 
0E40 9556       706     subb a, current_temp   ;compare current_temp and soak_temp
0E42 5006       707     jnc state10_Loop
0E44            708     
0E44 75550B     709     mov state, #11
0E47 E4         710     clr a
0E48 F539       711            mov state_time, a       ; reset state time to 0 for next state 
0E4A            712     ;--------------------------------------------------------------------;
0E4A            713     ; A short beep
0E4A            714     ;--------------------------------------------------------------------;
0E4A            715   
0E4A            716     ;TODOOOOO     Need to show the values with labels and stuff. Take sample subroutine only prints the number
0E4A            717            
0E4A            718   
0E4A            719   state10_Loop:
0E4A 02085C     720            ljmp forever
0E4D            721                    
0E4D            722   ; Soak Stage             
0E4D            723   state11:
0E4D            724                    ; 11 state number    12 next state
0E4D E555       724       mov a, state
0E4F B40B02     724       cjne a, #11, skipstate181
0E52 8003       724            sjmp no_skip_state181
0E54            724   skipstate181:
0E54 020F39     724       ljmp state12
0E57            724   no_skip_state181:
0E57            725            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0E57 208020     725            jb CYCLE_BUTTON, no_button_pressed182
0E5A C002       725            push AR2
0E5C 7A32       725            mov R2, #50
0E5E 120039     725            lcall ?Wait_Milli_Seconds
0E61 D002       725            pop AR2
0E63 208014     725            jb CYCLE_BUTTON, no_button_pressed182
0E66 3080FD     725            jnb CYCLE_BUTTON, $
0E69            725            
0E69 755511     725            mov state, #17
0E6C 7401       725            mov a, #0x01
0E6E 120083     725            lcall ?WriteCommand
0E71 C002       725            push AR2
0E73 7A02       725            mov R2, #2
0E75 120039     725            lcall ?Wait_Milli_Seconds
0E78 D002       725            pop AR2
0E7A            725   no_button_pressed182:
0E7A            725   
0E7A D202       726            setb pwm_on                     ;25% pwm
0E7C            727            ; MAC (Soak:    Constant string for the first line on LCD           current_temp: Temperature                   state_time: Time )
0E7C C0E0       727            push acc
0E7E 7401       727            mov a, #1
0E80 14         727            dec a
0E81 1200C1     727            lcall ?Set_Cursor_1 ; Select column and row
0E84 D0E0       727            pop acc
0E86 C083       727            push dph
0E88 C082       727            push dpl
0E8A C0E0       727            push acc
0E8C 900561     727            mov dptr, #Soak
0E8F 1200B4     727            lcall ?Send_Constant_String
0E92 D0E0       727            pop acc
0E94 D082       727            pop dpl
0E96 D083       727            pop dph
0E98            727     
0E98 C0E0       727            push acc
0E9A 7401       727            mov a, #1
0E9C 14         727            dec a
0E9D 1200BF     727            lcall ?Set_Cursor_2 ; Select column and row
0EA0 D0E0       727            pop acc         ;show temperture
0EA2 85563A     727            mov x+0, current_temp+0 
0EA5 753B00     727            mov x+1, #0
0EA8 753C00     727            mov x+2, #0 
0EAB 753D00     727            mov x+3, #0
0EAE 1200DC     727            lcall hex2bcd
0EB1 C000       727            push ar0
0EB3 C0E0       727            push acc
0EB5 7420       727            mov a, #' '
0EB7 12007E     727            lcall ?WriteData
0EBA A845       727            mov r0, bcd+1
0EBC E8         727            mov a, r0
0EBD 540F       727            anl a, #0fh
0EBF 4430       727            orl a, #30h
0EC1 12007E     727            lcall ?WriteData
0EC4 D0E0       727            pop acc
0EC6 D000       727            pop ar0
0EC8 C000       727            push ar0
0ECA A844       727            mov r0, bcd
0ECC 1200C6     727            lcall ?Display_BCD
0ECF D000       727            pop ar0
0ED1            727   
0ED1 C0E0       727            push acc
0ED3 740C       727            mov a, #12
0ED5 14         727            dec a
0ED6 1200BF     727            lcall ?Set_Cursor_2 ; Select column and row
0ED9 D0E0       727            pop acc         ;display time in seconds TODO: put it in minute and seconds
0EDB 85393A     727            mov x+0, state_time+0 
0EDE 753B00     727            mov x+1, #0
0EE1 753C00     727            mov x+2, #0 
0EE4 753D00     727            mov x+3, #0
0EE7 1200DC     727            lcall hex2bcd
0EEA C000       727            push ar0
0EEC A845       727            mov r0, bcd+1
0EEE 1200C6     727            lcall ?Display_BCD
0EF1 D000       727            pop ar0
0EF3 C000       727            push ar0
0EF5 A844       727            mov r0, bcd
0EF7 1200C6     727            lcall ?Display_BCD
0EFA D000       727            pop ar0
0EFC C0E0       727            push acc
0EFE 7410       727            mov a, #16
0F00 14         727            dec a
0F01 1200BF     727            lcall ?Set_Cursor_2 ; Select column and row
0F04 D0E0       727            pop acc
0F06 C0E0       727            push acc
0F08 7473       727            mov a, #'s'
0F0A 12007E     727            lcall ?WriteData
0F0D D0E0       727            pop acc
0F0F            727     
0F0F C0E0       727            push acc
0F11 7405       727            mov a, #5
0F13 14         727            dec a
0F14 1200BF     727            lcall ?Set_Cursor_2 ; Select column and row
0F17 D0E0       727            pop acc
0F19 C083       727            push dph
0F1B C082       727            push dpl
0F1D C0E0       727            push acc
0F1F 9005E6     727            mov dptr, #Cels
0F22 1200B4     727            lcall ?Send_Constant_String
0F25 D0E0       727            pop acc
0F27 D082       727            pop dpl
0F29 D083       727            pop dph
0F2B            727     
0F2B            727            ;display the current stage and current temperature
0F2B E539       728            mov a, state_time
0F2D B53406     729            cjne a, soak_seconds, State11_Loop
0F30            730     
0F30 75550C     731     mov state, #12 ;if time is equal set state to 12
0F33 E4         732     clr a
0F34 F539       733            mov state_time, a       ; reset state time to 0 for next state 
0F36            734     ;--------------------------------------------------------------------;
0F36            735     ; A short beep
0F36            736     ;--------------------------------------------------------------------;
0F36            737   ;time_not_equal:
0F36            738     ;compare temp                                                                                                  pattern to check temp:                                                                 ____     
0F36            739   ;  mov a, current_temp ;                                                                                                                                                                                         ____      /    \____/
0F36            740   ;        clr c                                                           ;                                                                                                                                                                                                /    \____/     
0F36            741   ;        subb a, soak_temp       ;                                                                                                               ____/
0F36            742   ;        jnc temp_too_low                
0F36            743   ;        sjmp State11_done:      ;                                                                       checks every temperature twice for the right one
0F36            744                                                                                                                                                            
0F36            745   ;temp_not_low:           
0F36            746   ;        inc current_temp
0F36            747   ;  inc current temp
0F36            748   ;        mov a, current_temp 
0F36            749   ;        clr c
0F36            750   ;        subb a, soak_temp 
0F36            751   ;        jnc temp_too_high
0F36            752   ;  sjmp State11_done:
0F36            753   
0F36            754   ;temp_too_high:  
0F36            755   ;  dec current_temp
0F36            756   
0F36            757   State11_Loop:
0F36 02085C     758     ljmp forever
0F39            759     
0F39            760                    
0F39            761   ; Ramp to Reflow Stage, compare current_temp with reflow_temp            
0F39            762   state12:
0F39            763                    ; 12 state number    13 next state
0F39 E555       763       mov a, state
0F3B B40C02     763       cjne a, #12, skipstate201
0F3E 8003       763            sjmp no_skip_state201
0F40            763   skipstate201:
0F40 021029     763       ljmp state13
0F43            763   no_skip_state201:
0F43            764            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0F43 208020     764            jb CYCLE_BUTTON, no_button_pressed202
0F46 C002       764            push AR2
0F48 7A32       764            mov R2, #50
0F4A 120039     764            lcall ?Wait_Milli_Seconds
0F4D D002       764            pop AR2
0F4F 208014     764            jb CYCLE_BUTTON, no_button_pressed202
0F52 3080FD     764            jnb CYCLE_BUTTON, $
0F55            764            
0F55 755511     764            mov state, #17
0F58 7401       764            mov a, #0x01
0F5A 120083     764            lcall ?WriteCommand
0F5D C002       764            push AR2
0F5F 7A02       764            mov R2, #2
0F61 120039     764            lcall ?Wait_Milli_Seconds
0F64 D002       764            pop AR2
0F66            764   no_button_pressed202:
0F66            764   
0F66 C202       765     clr pwm_on
0F68 D2B7       766     setb SSR_OUT   ;100% power on
0F6A            767            ; MAC (Ramp2Reflow:    Constant string for the first line on LCD           current_temp: Temperature                    state_time: Time )
0F6A C0E0       767            push acc
0F6C 7401       767            mov a, #1
0F6E 14         767            dec a
0F6F 1200C1     767            lcall ?Set_Cursor_1 ; Select column and row
0F72 D0E0       767            pop acc
0F74 C083       767            push dph
0F76 C082       767            push dpl
0F78 C0E0       767            push acc
0F7A 90053F     767            mov dptr, #Ramp2Reflow
0F7D 1200B4     767            lcall ?Send_Constant_String
0F80 D0E0       767            pop acc
0F82 D082       767            pop dpl
0F84 D083       767            pop dph
0F86            767     
0F86 C0E0       767            push acc
0F88 7401       767            mov a, #1
0F8A 14         767            dec a
0F8B 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
0F8E D0E0       767            pop acc
0F90            767            ;show temperture
0F90 85563A     767            mov x+0, current_temp+0 
0F93 753B00     767            mov x+1, #0
0F96 753C00     767            mov x+2, #0 
0F99 753D00     767            mov x+3, #0
0F9C 1200DC     767            lcall hex2bcd
0F9F C000       767            push ar0
0FA1 C0E0       767            push acc
0FA3 7420       767            mov a, #' '
0FA5 12007E     767            lcall ?WriteData
0FA8 A845       767            mov r0, bcd+1
0FAA E8         767            mov a, r0
0FAB 540F       767            anl a, #0fh
0FAD 4430       767            orl a, #30h
0FAF 12007E     767            lcall ?WriteData
0FB2 D0E0       767            pop acc
0FB4 D000       767            pop ar0
0FB6 C000       767            push ar0
0FB8 A844       767            mov r0, bcd
0FBA 1200C6     767            lcall ?Display_BCD
0FBD D000       767            pop ar0
0FBF            767   
0FBF C0E0       767            push acc
0FC1 740C       767            mov a, #12
0FC3 14         767            dec a
0FC4 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
0FC7 D0E0       767            pop acc         ;display time in seconds TODO: put it in minute and seconds
0FC9 85393A     767            mov x+0, state_time+0 
0FCC 753B00     767            mov x+1, #0
0FCF 753C00     767            mov x+2, #0 
0FD2 753D00     767            mov x+3, #0
0FD5 1200DC     767            lcall hex2bcd
0FD8 C000       767            push ar0
0FDA A845       767            mov r0, bcd+1
0FDC 1200C6     767            lcall ?Display_BCD
0FDF D000       767            pop ar0
0FE1 C000       767            push ar0
0FE3 A844       767            mov r0, bcd
0FE5 1200C6     767            lcall ?Display_BCD
0FE8 D000       767            pop ar0
0FEA C0E0       767            push acc
0FEC 7410       767            mov a, #16
0FEE 14         767            dec a
0FEF 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
0FF2 D0E0       767            pop acc
0FF4 C0E0       767            push acc
0FF6 7473       767            mov a, #'s'
0FF8 12007E     767            lcall ?WriteData
0FFB D0E0       767            pop acc
0FFD            767     
0FFD C0E0       767            push acc
0FFF 7405       767            mov a, #5
1001 14         767            dec a
1002 1200BF     767            lcall ?Set_Cursor_2 ; Select column and row
1005 D0E0       767            pop acc
1007 C083       767            push dph
1009 C082       767            push dpl
100B C0E0       767            push acc
100D 9005E6     767            mov dptr, #Cels
1010 1200B4     767            lcall ?Send_Constant_String
1013 D0E0       767            pop acc
1015 D082       767            pop dpl
1017 D083       767            pop dph
1019            767     
1019            767            ;display the current, temperature and running time
1019 E537       768     mov a, reflow_temp
101B C3         769     clr c
101C 9556       770     subb a, current_temp
101E 5006       771     jnc State12Loop
1020            772     
1020 75550D     773            mov state, #13
1023 E4         774     clr a
1024 F539       775            mov state_time, a       ; reset state time to 0 for next state 
1026            776     ;--------------------------------------------------------------------;
1026            777     ; A short beep
1026            778     ;--------------------------------------------------------------------;
1026            779   State12Loop:
1026 02085C     780     ljmp forever
1029            781   
1029            782   ; Reflow stage, compare reflow_seconds to current time, move to cooling stage when complete (Still need beep code)
1029            783   state13:
1029            784                    ; 13 state number    14 next state
1029 E555       784       mov a, state
102B B40D02     784       cjne a, #13, skipstate221
102E 8003       784            sjmp no_skip_state221
1030            784   skipstate221:
1030 021115     784       ljmp state14
1033            784   no_skip_state221:
1033            785            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
1033 208020     785            jb CYCLE_BUTTON, no_button_pressed222
1036 C002       785            push AR2
1038 7A32       785            mov R2, #50
103A 120039     785            lcall ?Wait_Milli_Seconds
103D D002       785            pop AR2
103F 208014     785            jb CYCLE_BUTTON, no_button_pressed222
1042 3080FD     785            jnb CYCLE_BUTTON, $
1045            785            
1045 755511     785            mov state, #17
1048 7401       785            mov a, #0x01
104A 120083     785            lcall ?WriteCommand
104D C002       785            push AR2
104F 7A02       785            mov R2, #2
1051 120039     785            lcall ?Wait_Milli_Seconds
1054 D002       785            pop AR2
1056            785   no_button_pressed222:
1056            785   
1056 D202       786     setb pwm_on ; Set PWM to 25% power
1058            787            ; MAC (Reflow:    Constant string for the first line on LCD           current_temp: Temperature                         state_time: Time )
1058 C0E0       787            push acc
105A 7401       787            mov a, #1
105C 14         787            dec a
105D 1200C1     787            lcall ?Set_Cursor_1 ; Select column and row
1060 D0E0       787            pop acc
1062 C083       787            push dph
1064 C082       787            push dpl
1066 C0E0       787            push acc
1068 900572     787            mov dptr, #Reflow
106B 1200B4     787            lcall ?Send_Constant_String
106E D0E0       787            pop acc
1070 D082       787            pop dpl
1072 D083       787            pop dph
1074            787     
1074 C0E0       787            push acc
1076 7401       787            mov a, #1
1078 14         787            dec a
1079 1200BF     787            lcall ?Set_Cursor_2 ; Select column and row
107C D0E0       787            pop acc         ;show temperture
107E 85563A     787            mov x+0, current_temp+0 
1081 753B00     787            mov x+1, #0
1084 753C00     787            mov x+2, #0 
1087 753D00     787            mov x+3, #0
108A 1200DC     787            lcall hex2bcd
108D C000       787            push ar0
108F C0E0       787            push acc
1091 7420       787            mov a, #' '
1093 12007E     787            lcall ?WriteData
1096 A845       787            mov r0, bcd+1
1098 E8         787            mov a, r0
1099 540F       787            anl a, #0fh
109B 4430       787            orl a, #30h
109D 12007E     787            lcall ?WriteData
10A0 D0E0       787            pop acc
10A2 D000       787            pop ar0
10A4 C000       787            push ar0
10A6 A844       787            mov r0, bcd
10A8 1200C6     787            lcall ?Display_BCD
10AB D000       787            pop ar0
10AD            787   
10AD C0E0       787            push acc
10AF 740C       787            mov a, #12
10B1 14         787            dec a
10B2 1200BF     787            lcall ?Set_Cursor_2 ; Select column and row
10B5 D0E0       787            pop acc         ;display time in seconds TODO: put it in minute and seconds
10B7 85393A     787            mov x+0, state_time+0 
10BA 753B00     787            mov x+1, #0
10BD 753C00     787            mov x+2, #0 
10C0 753D00     787            mov x+3, #0
10C3 1200DC     787            lcall hex2bcd
10C6 C000       787            push ar0
10C8 A845       787            mov r0, bcd+1
10CA 1200C6     787            lcall ?Display_BCD
10CD D000       787            pop ar0
10CF C000       787            push ar0
10D1 A844       787            mov r0, bcd
10D3 1200C6     787            lcall ?Display_BCD
10D6 D000       787            pop ar0
10D8 C0E0       787            push acc
10DA 7410       787            mov a, #16
10DC 14         787            dec a
10DD 1200BF     787            lcall ?Set_Cursor_2 ; Select column and row
10E0 D0E0       787            pop acc
10E2 C0E0       787            push acc
10E4 7473       787            mov a, #'s'
10E6 12007E     787            lcall ?WriteData
10E9 D0E0       787            pop acc
10EB            787     
10EB C0E0       787            push acc
10ED 7405       787            mov a, #5
10EF 14         787            dec a
10F0 1200BF     787            lcall ?Set_Cursor_2 ; Select column and row
10F3 D0E0       787            pop acc
10F5 C083       787            push dph
10F7 C082       787            push dpl
10F9 C0E0       787            push acc
10FB 9005E6     787            mov dptr, #Cels
10FE 1200B4     787            lcall ?Send_Constant_String
1101 D0E0       787            pop acc
1103 D082       787            pop dpl
1105 D083       787            pop dph
1107            787     
1107            787            ;display the current stage and current temperature
1107 E536       788     mov a, reflow_seconds
1109 B53906     789     cjne a, state_time, state13Loop
110C 75550E     790     mov state, #14         ; Reflow done, move to cooling
110F E4         791     clr a
1110 F539       792     mov state_time, a ; Reset state time variable
1112            793   state13Loop:
1112 02085C     794            ljmp forever
1115            795   
1115            796   ; Cooling stage, power is set to 0, finish and sound multiple beeps when temperature is below 60
1115            797   state14:
1115            798                    ; 14 state number    15 next state
1115 E555       798       mov a, state
1117 B40E02     798       cjne a, #14, skipstate241
111A 8003       798            sjmp no_skip_state241
111C            798   skipstate241:
111C 021204     798       ljmp state15
111F            798   no_skip_state241:
111F            799            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
111F 208020     799            jb CYCLE_BUTTON, no_button_pressed242
1122 C002       799            push AR2
1124 7A32       799            mov R2, #50
1126 120039     799            lcall ?Wait_Milli_Seconds
1129 D002       799            pop AR2
112B 208014     799            jb CYCLE_BUTTON, no_button_pressed242
112E 3080FD     799            jnb CYCLE_BUTTON, $
1131            799            
1131 755511     799            mov state, #17
1134 7401       799            mov a, #0x01
1136 120083     799            lcall ?WriteCommand
1139 C002       799            push AR2
113B 7A02       799            mov R2, #2
113D 120039     799            lcall ?Wait_Milli_Seconds
1140 D002       799            pop AR2
1142            799   no_button_pressed242:
1142            799   
1142 C202       800       clr pwm_on
1144 C203       800       clr pwm_high
1146 C2B7       800       clr SSR_OUT
1148            800   
1148            801            ; MAC (Cooling:    Constant string for the first line on LCD           current_temp: Temperature                        state_time: Time )
1148 C0E0       801            push acc
114A 7401       801            mov a, #1
114C 14         801            dec a
114D 1200C1     801            lcall ?Set_Cursor_1 ; Select column and row
1150 D0E0       801            pop acc
1152 C083       801            push dph
1154 C082       801            push dpl
1156 C0E0       801            push acc
1158 900583     801            mov dptr, #Cooling
115B 1200B4     801            lcall ?Send_Constant_String
115E D0E0       801            pop acc
1160 D082       801            pop dpl
1162 D083       801            pop dph
1164            801     
1164 C0E0       801            push acc
1166 7401       801            mov a, #1
1168 14         801            dec a
1169 1200BF     801            lcall ?Set_Cursor_2 ; Select column and row
116C D0E0       801            pop acc         ;show temperture
116E 85563A     801            mov x+0, current_temp+0 
1171 753B00     801            mov x+1, #0
1174 753C00     801            mov x+2, #0 
1177 753D00     801            mov x+3, #0
117A 1200DC     801            lcall hex2bcd
117D C000       801            push ar0
117F C0E0       801            push acc
1181 7420       801            mov a, #' '
1183 12007E     801            lcall ?WriteData
1186 A845       801            mov r0, bcd+1
1188 E8         801            mov a, r0
1189 540F       801            anl a, #0fh
118B 4430       801            orl a, #30h
118D 12007E     801            lcall ?WriteData
1190 D0E0       801            pop acc
1192 D000       801            pop ar0
1194 C000       801            push ar0
1196 A844       801            mov r0, bcd
1198 1200C6     801            lcall ?Display_BCD
119B D000       801            pop ar0
119D            801   
119D C0E0       801            push acc
119F 740C       801            mov a, #12
11A1 14         801            dec a
11A2 1200BF     801            lcall ?Set_Cursor_2 ; Select column and row
11A5 D0E0       801            pop acc         ;display time in seconds TODO: put it in minute and seconds
11A7 85393A     801            mov x+0, state_time+0 
11AA 753B00     801            mov x+1, #0
11AD 753C00     801            mov x+2, #0 
11B0 753D00     801            mov x+3, #0
11B3 1200DC     801            lcall hex2bcd
11B6 C000       801            push ar0
11B8 A845       801            mov r0, bcd+1
11BA 1200C6     801            lcall ?Display_BCD
11BD D000       801            pop ar0
11BF C000       801            push ar0
11C1 A844       801            mov r0, bcd
11C3 1200C6     801            lcall ?Display_BCD
11C6 D000       801            pop ar0
11C8 C0E0       801            push acc
11CA 7410       801            mov a, #16
11CC 14         801            dec a
11CD 1200BF     801            lcall ?Set_Cursor_2 ; Select column and row
11D0 D0E0       801            pop acc
11D2 C0E0       801            push acc
11D4 7473       801            mov a, #'s'
11D6 12007E     801            lcall ?WriteData
11D9 D0E0       801            pop acc
11DB            801     
11DB C0E0       801            push acc
11DD 7405       801            mov a, #5
11DF 14         801            dec a
11E0 1200BF     801            lcall ?Set_Cursor_2 ; Select column and row
11E3 D0E0       801            pop acc
11E5 C083       801            push dph
11E7 C082       801            push dpl
11E9 C0E0       801            push acc
11EB 9005E6     801            mov dptr, #Cels
11EE 1200B4     801            lcall ?Send_Constant_String
11F1 D0E0       801            pop acc
11F3 D082       801            pop dpl
11F5 D083       801            pop dph
11F7            801     
11F7            801    
11F7            801   
11F7 E556       802     mov a, current_temp
11F9 C3         803     clr c
11FA 943C       804     subb a, #60
11FC 5003       805     jnc state14loop ; If more than 60 degrees, not safe to touch yet
11FE            806     
11FE            807   SafeBeep: ;If temp is safe then beeeeepppppppppppp
11FE            808     ;--------------------------------------------------------------------;
11FE            809     ; BEEEEEEEEEEEEEEEEEEEEEEPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
11FE            810     ;--------------------------------------------------------------------;
11FE 75550F     811     mov state, #15 ; Go to done state
1201            812   state14loop:
1201 02085C     813            ljmp forever
1204            814     
1204            815   ; Cooling completed state, accessed when temperature has cooled down to below 60C
1204            816   state15:   
1204            817                    ; 15 state number    16 next state
1204 E555       817       mov a, state
1206 B40F02     817       cjne a, #15, skipstate262
1209 8003       817            sjmp no_skip_state262
120B            817   skipstate262:
120B 02126E     817       ljmp state16
120E            817   no_skip_state262:
120E C2CA       818     clr TR2
1210 C0E0       819            push acc
1212 7401       819            mov a, #1
1214 14         819            dec a
1215 1200C1     819            lcall ?Set_Cursor_1 ; Select column and row
1218 D0E0       819            pop acc
121A C083       819            push dph
121C C082       819            push dpl
121E C0E0       819            push acc
1220 900594     819            mov dptr, #CompleteMsg
1223 1200B4     819            lcall ?Send_Constant_String
1226 D0E0       819            pop acc
1228 D082       819            pop dpl
122A D083       819            pop dph
122C C0E0       819            push acc
122E 7401       819            mov a, #1
1230 14         819            dec a
1231 1200BF     819            lcall ?Set_Cursor_2 ; Select column and row
1234 D0E0       819            pop acc
1236            819   
1236 C083       819            push dph
1238 C082       819            push dpl
123A C0E0       819            push acc
123C 9005C7     819            mov dptr, #ConfirmMsg
123F 1200B4     819            lcall ?Send_Constant_String
1242 D0E0       819            pop acc
1244 D082       819            pop dpl
1246 D083       819            pop dph
1248            819   
1248            820            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
1248 208420     820            jb DEC_BUTTON, no_button_pressed268
124B C002       820            push AR2
124D 7A32       820            mov R2, #50
124F 120039     820            lcall ?Wait_Milli_Seconds
1252 D002       820            pop AR2
1254 208414     820            jb DEC_BUTTON, no_button_pressed268
1257 3084FD     820            jnb DEC_BUTTON, $
125A            820            
125A 755500     820            mov state, #0
125D 7401       820            mov a, #0x01
125F 120083     820            lcall ?WriteCommand
1262 C002       820            push AR2
1264 7A02       820            mov R2, #2
1266 120039     820            lcall ?Wait_Milli_Seconds
1269 D002       820            pop AR2
126B            820   no_button_pressed268:
126B            820   
126B 02085C     821     ljmp forever
126E            822     
126E            823   state16:                         ;display error message
126E            824                    ; 16 state number    17 next state
126E E555       824       mov a, state
1270 B41002     824       cjne a, #16, skipstate272
1273 8003       824            sjmp no_skip_state272
1275            824   skipstate272:
1275 0212DE     824       ljmp state17
1278            824   no_skip_state272:
1278 C2CA       825     clr TR2
127A C202       826       clr pwm_on
127C C203       826       clr pwm_high
127E C2B7       826       clr SSR_OUT
1280 C0E0       827            push acc
1282 7401       827            mov a, #1
1284 14         827            dec a
1285 1200C1     827            lcall ?Set_Cursor_1 ; Select column and row
1288 D0E0       827            pop acc
128A C083       827            push dph
128C C082       827            push dpl
128E C0E0       827            push acc
1290 9005A5     827            mov dptr, #Lessthan50ErrorMsg
1293 1200B4     827            lcall ?Send_Constant_String
1296 D0E0       827            pop acc
1298 D082       827            pop dpl
129A D083       827            pop dph
129C C0E0       827            push acc
129E 7401       827            mov a, #1
12A0 14         827            dec a
12A1 1200BF     827            lcall ?Set_Cursor_2 ; Select column and row
12A4 D0E0       827            pop acc
12A6 C083       827            push dph
12A8 C082       827            push dpl
12AA C0E0       827            push acc
12AC 9005C7     827            mov dptr, #ConfirmMsg
12AF 1200B4     827            lcall ?Send_Constant_String
12B2 D0E0       827            pop acc
12B4 D082       827            pop dpl
12B6 D083       827            pop dph         
12B8            828            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
12B8 208420     828            jb DEC_BUTTON, no_button_pressed279
12BB C002       828            push AR2
12BD 7A32       828            mov R2, #50
12BF 120039     828            lcall ?Wait_Milli_Seconds
12C2 D002       828            pop AR2
12C4 208414     828            jb DEC_BUTTON, no_button_pressed279
12C7 3084FD     828            jnb DEC_BUTTON, $
12CA            828            
12CA 755500     828            mov state, #0
12CD 7401       828            mov a, #0x01
12CF 120083     828            lcall ?WriteCommand
12D2 C002       828            push AR2
12D4 7A02       828            mov R2, #2
12D6 120039     828            lcall ?Wait_Milli_Seconds
12D9 D002       828            pop AR2
12DB            828   no_button_pressed279:
12DB            828   
12DB 02085C     829     ljmp forever
12DE            830     
12DE            831   ; Force Quit state, accessed when STOP button is pressed during any reflow stage
12DE            832   state17:
12DE C2CA       833            clr TR2
12E0 C202       834       clr pwm_on
12E2 C203       834       clr pwm_high
12E4 C2B7       834       clr SSR_OUT
12E6            834   
12E6 C0E0       835            push acc
12E8 7401       835            mov a, #1
12EA 14         835            dec a
12EB 1200C1     835            lcall ?Set_Cursor_1 ; Select column and row
12EE D0E0       835            pop acc
12F0 C083       835            push dph
12F2 C082       835            push dpl
12F4 C0E0       835            push acc
12F6 9005B6     835            mov dptr, #AbortMsg
12F9 1200B4     835            lcall ?Send_Constant_String
12FC D0E0       835            pop acc
12FE D082       835            pop dpl
1300 D083       835            pop dph
1302 C0E0       835            push acc
1304 7401       835            mov a, #1
1306 14         835            dec a
1307 1200BF     835            lcall ?Set_Cursor_2 ; Select column and row
130A D0E0       835            pop acc
130C C083       835            push dph
130E C082       835            push dpl
1310 C0E0       835            push acc
1312 9005C7     835            mov dptr, #ConfirmMsg
1315 1200B4     835            lcall ?Send_Constant_String
1318 D0E0       835            pop acc
131A D082       835            pop dpl
131C D083       835            pop dph
131E            836            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
131E 208420     836            jb DEC_BUTTON, no_button_pressed289
1321 C002       836            push AR2
1323 7A32       836            mov R2, #50
1325 120039     836            lcall ?Wait_Milli_Seconds
1328 D002       836            pop AR2
132A 208414     836            jb DEC_BUTTON, no_button_pressed289
132D 3084FD     836            jnb DEC_BUTTON, $
1330            836            
1330 755500     836            mov state, #0
1333 7401       836            mov a, #0x01
1335 120083     836            lcall ?WriteCommand
1338 C002       836            push AR2
133A 7A02       836            mov R2, #2
133C 120039     836            lcall ?Wait_Milli_Seconds
133F D002       836            pop AR2
1341            836   no_button_pressed289:
1341            836   
1341 02085C     837     ljmp forever
1344            838            
1344            839   
1344            840   
1344            841   end ;-;
