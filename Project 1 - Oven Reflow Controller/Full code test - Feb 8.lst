                  2   $LIST
0000              4   ; Reset vector
0000              5   org 0000H
0000 020827       6      ljmp MainProgram
0003              7   
0003              8   ; External interrupt 0 vector (not used in this code)
0003              9   org 0x0003
0003 32          10            reti
0004             11   
0004             12   ; Timer/Counter 0 overflow interrupt vector
000B             13   org 0x000B
000B 32          14            reti
000C             15   ;        ljmp Timer0_ISR
000C             16            
000C             17   ; External interrupt 1 vector (not used in this code)
0013             18   org 0x0013
0013 32          19            reti
0014             20   
0014             21   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             22   org 0x001B
001B 32          23            reti
001C             24   
001C             25   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             26   org 0x0023 
0023 32          27            reti
0024             28            
0024             29   ; Timer/Counter 2 overflow interrupt vector
002B             30   org 0x002B
002B 0205FE      31            ljmp Timer2_ISR
002E             32            
002E             33   ;++++++++++++++++++ CONSTANTS ++++++++++++++++++++
002E             34   VLED     EQU 207
002E             35   ;++++++++++++++++++ TIMER & BAUDRATE  ++++++++++++
002E             36   CLK              EQU 22118400                                                     ; Microcontroller system crystal frequency in Hz
002E             37   TIMER0_RATE        EQU 4096                                                               ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
002E             38   TIMER0_RELOAD      EQU ((65536-(CLK/TIMER0_RATE)))
002E             39   TIMER2_RATE        EQU 1000                                                               ; 1000Hz, for a timer tick of 1ms
002E             40   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
002E             41   BAUD                                     EQU 115200
002E             42   T1LOAD                                   EQU (0x100-(CLK/(16*BAUD)))
002E             43   
002E             44   SAMPLE_INTERVAL EQU 250                                                                  ; Millisecond Interval when sampling (KEEP LESS THAN 256)
002E             45   
002E             46   PWM_PERCENT                      EQU 25
002E             47   PWM_RELOAD_HIGH EQU (255*PWM_PERCENT/100)
002E             48   PWM_RELOAD_LOW   EQU     (255 - PWM_RELOAD_HIGH)
002E             49   ;------------------------------------------------
002E             50   
002E             51   ;++++++++++++++++++ SPI PINS ++++++++++++++++
002E             52   CE_ADC  EQU P2.0
002E             53   MY_MOSI EQU P2.1
002E             54   MY_MISO EQU P2.2
002E             55   MY_SCLK EQU P2.3
002E             56   ;--------------------------------------------
002E             57   
002E             58   ;++++++++++++++++++ LCD PINS ++++++++++++++++
002E             59   LCD_RS equ P1.2
002E             60   LCD_RW equ P1.3
002E             61   LCD_E  equ P1.4
002E             62   LCD_D4 equ P3.2
002E             63   LCD_D5 equ P3.3
002E             64   LCD_D6 equ P3.4
002E             65   LCD_D7 equ P3.5
002E             66   ;--------------------------------------------
002E             67   
002E             68   
002E             69   SSR_OUT              equ P3.7    ; Pin connected to SSR
002E             70   BOOT_BUTTON     equ P4.5
002E             71   PWM_BUTTON      equ P0.3
002E             72   SOUND_OUT       equ P3.6         ; Pin connected to speaker
002E             73   
002E             74   ;++++++++++++++++++ CONTROL BUTTONS++++++++++
002E             75   CYCLE_BUTTON        equ P0.0     ; Button to change cycles
002E             76   INC_BUTTON                                       equ P0.2
002E             77   DEC_BUTTON          equ P0.4
002E             78   ;--------------------------------------------
002E             79   
                218   $LIST
                586   $LIST
                 96   $LIST
0418            111   $LIST
                 46   $LIST
                 85   $LIST
0442             87   
0442             88            
0442             89   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             90   DSEG at 0x30
0030             91   
0030             92            Count1ms:                                       ds 2 ; Incremented every 1ms when Timer 2 ISR is triggered
0032             93            Count_Sample:                   ds 1 ; Sample is taken every 250ms
0033             94            Count_PWM:                              ds 1 ; PWM cycle runs every 255ms
0034             95            soak_seconds:                   ds 1
0035             96            soak_temp:                              ds 1
0036             97            reflow_seconds:                 ds 1
0037             98            reflow_temp:                    ds 1
0038             99            run_time_sec:                   ds 1
0039            100            state_time:                             ds 1
003A            101            
003A            102   ;+++++++++ 32 bit Calculation variables +++++++++++      
003A            103            x:                                      ds 4
003E            104            y:                                                      ds 4
0042            105            Result:                                         ds 2
0044            106            bcd:                                                    ds 5
0049            107            x_lm335:                                        ds 4
004D            108            Vcc:                                                    ds 4
0051            109            samplesum:                              ds 4
0055            110   ;--------------------------------------------
0055            111            state:                                          ds 1
0056            112            current_temp:                   ds 4
005A            113   
005A            114            
005A            115   
0000            116   BSEG
0000            117            mf:                                                     dbit 1
0001            118            one_min_flag:           dbit 1  ; Set to 1 after first 60 seconds of reflow cycle
0002            119            pwm_on:                                         dbit 1  ; Set to 1 to turn PWM on
0003            120            pwm_high:                               dbit 1  ; Flag for when PWM output is currently high
0004            121     settings_modified_flag:                dbit 1  ; Flag for when parameters have been changed
0005            122            sample_flag:                    dbit 1  ; Flag turned on every SAMPLE_INTERVAL to take a reading
0006            123   
0442            124   CSEG
0442            125   ;                                                                        1234567890123456    <- This helps determine the location of the Strings
0442 20526566   126     StartMessage:                                  db ' Reflow Control ', 0
     6C6F7720
     436F6E74
     726F6C20
     00
0453 53746172   127     StartMessage2:                         db 'Start / Settings', 0
     74202F20
     53657474
     696E6773
     00
0464 536F616B   128            SoakTime_Message:               db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
0475 536F616B   129            SoakTemp_Message:               db 'Soak Temperature', 0
     2054656D
     70657261
     74757265
     00
0486 5265666C   130            ReflowTime_Message:     db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
0497 5265666C   131            ReflowTemp_Message:     db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
04A8 53746172   132            Start_Message:                          db 'Start Process?  ', 0
     74205072
     6F636573
     733F2020
     00
04B9 20202B20   133     Y_N_Message:                   db '  + Yes | - No  ', 0
     59657320
     7C202D20
     4E6F2020
     00
04CA 50574D20   134            PWM_ON_MESSAGE:                 db 'PWM IS ON       ', 0
     4953204F
     4E202020
     20202020
     00
04DB 50574D20   135            PWM_OFF_MESSAGE:                db 'PWM IS OFF      ', 0
     4953204F
     46462020
     20202020
     00
04EC 20202044   136     SaveToFlash_Msg:               db '   Data Saved   ', 0
     61746120
     53617665
     64202020
     00
04FD 50726F63   137            Stopped:                                db 'Process Stopped ', 0
     65737320
     53746F70
     70656420
     00
050E 20202020   138            BlankMsg:                               db '                ', 0
     20202020
     20202020
     20202020
     00
051F 2D205265   139            ChooseChangeValueMsg:   db '- Reselect Vals     ', 0
     73656C65
     63742056
     616C7309
     00
0530 2B095374   140            ChooseStartMsg:                         db '+   Start Reflow', 0
     61727420
     5265666C
     6F7700
053F 52616D70   141            Ramp2Reflow:                    db 'Ramp to Reflow  ', 0
     20746F20
     5265666C
     6F772020
     00
0550 52616D70   142            Ramp2Soak:                              db 'Ramp to Soak    ', 0
     20746F20
     536F616B
     20202020
     00
0561 50726568   143            Soak:                                   db 'Preheat / Soak  ', 0
     65617420
     2F20536F
     616B2020
     00
0572 5265666C   144            Reflow:                                         db 'Reflow          ', 0
     6F772020
     20202020
     20202020
     00
0583 436F6F6C   145            Cooling:                                db 'Cooling         ', 0
     696E6720
     20202020
     20202020
     00
0594 5265666C   146            CompleteMsg:                    db 'Reflow Complete!', 0
     6F772043
     6F6D706C
     65746521
     00
05A5 43686563   147            Lessthan50ErrorMsg:     db 'Check T-Couple! ', 0
     6B20542D
     436F7570
     6C652120
     00
05B6 50726F63   148            AbortMsg:                               db 'Process Aborted!', 0
     65737320
     41626F72
     74656421
     00
05C7 2D20436F   149            ConfirmMsg:                     db '- Continue?     ', 0
     6E74696E
     75653F20
     20202020
     00
05D8 54656D70   150            Temp:                                   db 'Temp:', 0           
     3A00
05DE 54696D65   151            Time:                                   db 'Time:', 0
     3A00
05E4 0A00       152            NEWLINE:                                db '\n', 0  
05E6 20DF4300   153     Cels: db ' ',11011111b, 'C',0
05EA 207300     154     Secs:                  db ' s',0
05ED 20495453   155            TestMessage:                    db ' ITS WORKING!?  ', 0
     20574F52
     4B494E47
     213F2020
     00
05FE            156   ;---------------------------------;
05FE            157   ; ISR for timer 2                 ;
05FE            158   ;---------------------------------;
05FE            159   Timer2_ISR:
05FE C2CF       160            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0600            161            
0600            162            ; The two registers used in the ISR must be saved in the stack
0600 C0E0       163            push acc
0602 C0D0       164            push psw
0604            165            
0604            166       
0604 0532       167     inc Count_Sample
0606            168            ; Increment the 16-bit one mili second counter
0606 0530       169            inc Count1ms+0    ; Increment the low 8-bits first
0608 E530       170            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
060A 7002       171            jnz Inc_Done_1sec
060C 0531       172            inc Count1ms+1
060E            173   
060E            174            
060E            175   Inc_Done_1sec:
060E            176            ; Check if one second has passed
060E E530       177            mov a, Count1ms+0
0610 B4E816     178            cjne a, #low(1000), Inc_Done_Sample ; Warning: this instruction changes the carry flag!
0613 E531       179            mov a, Count1ms+1
0615 B40311     180            cjne a, #high(1000), Inc_Done_Sample
0618            181            
0618            182            ; 1 second has passed.  Set a flag so the main program knows
0618            183            
0618 753000     184            mov Count1ms+0, #0
061B 753100     184            mov Count1ms+1, #0
061E            185     
061E            186            ; total time passed for each stage (it will be set to 0 when the stage starts)
061E 0538       187            inc run_time_sec
0620            188     ; time for state, will reset after every state
0620 0539       189     inc state_time
0622            190     
0622 E539       191     mov a, state_time
0624 B43C02     192     cjne a,#60, Inc_Done_Sample
0627 D201       193            setb one_min_flag
0629            194   
0629            195   Inc_Done_Sample:
0629            196            
0629 E532       197     mov a, Count_Sample
062B B4FA05     198     cjne a, #SAMPLE_INTERVAL, Inc_Done_PWM
062E            199     
062E D205       200     setb sample_flag
0630            201     
0630 E4         202     clr a
0631 F532       203     mov Count_Sample, a
0633            204   
0633            205   Inc_Done_PWM:
0633            206            
0633 30021F     207            jnb pwm_on, Timer2_ISR_done
0636 0533       208            inc Count_PWM
0638 30030E     209            jnb pwm_high, Inc_Done_PWM_Low
063B            210   
063B E533       211            mov a, Count_PWM
063D B43F15     212            cjne a, #PWM_RELOAD_HIGH, Timer2_ISR_done
0640            213            
0640 C203       214            clr pwm_high
0642 C2B7       215            clr SSR_OUT
0644            216            
0644 E4         217            clr a
0645 F533       218            mov Count_PWM, a
0647            219            
0647 800C       220            sjmp Timer2_ISR_done
0649            221            
0649            222   Inc_Done_PWM_Low:
0649            223   
0649 E533       224            mov a, Count_PWM
064B B4C007     225            cjne a, #PWM_RELOAD_LOW, Timer2_ISR_done
064E            226            
064E D203       227            setb pwm_high
0650 D2B7       228            setb SSR_OUT
0652            229            
0652 E4         230            clr a
0653 F533       231            mov Count_PWM, a
0655            232            
0655            233   Timer2_ISR_done:
0655 D0D0       234            pop psw
0657 D0E0       235            pop acc
0659 32         236   reti
065A            237   
065A            238   ;------------------------------------------------------------------;
065A            239   ; Subroutine to take sample from Thermocouple, LM335, and LED for Vref
065A            240   ;------------------------------------------------------------------;
065A            241   Take_Sample:
065A C205       242            clr sample_flag
065C            243            ;reading the LED voltage for Vref
065C 75F007     244            mov b, #7
065F 12038B     244            lcall ?Average_ADC_Channel      
0662 120678     245            lcall Calculate_Vref
0665            246            ;fetch result from channel 0 as room temperature
0665 75F000     247            mov b, #0
0668 12038B     247            lcall ?Average_ADC_Channel
066B 1206AF     248            lcall LM335_Result_SPI_Routine
066E            249            ;fetch result from channel 1
066E 75F001     250            mov b, #1
0671 12038B     250            lcall ?Average_ADC_Channel
0674 1206F8     251     lcall Result_SPI_Routine       ; 0.5 second delay between samples
0677 22         252            ret
0678            253   
0678            254   ;calculating Vref from Vled      
0678            255   Calculate_Vref:
0678 85423E     256            mov y+0, result+0 
067B 85433F     256            mov y+1, result+1
067E 754000     256            mov y+2, #0 
0681 754100     256            mov y+3, #0
0684 753A31     257            mov x+0, #low (VLED*1023 % 0x10000) 
0687 753B3B     257            mov x+1, #high(VLED*1023 % 0x10000) 
068A 753C03     257            mov x+2, #low (VLED*1023 / 0x10000) 
068D 753D00     257            mov x+3, #high(VLED*1023 / 0x10000) 
0690 1202E3     258            lcall div32
0693 753E10     259            mov y+0, #low (10000 % 0x10000) 
0696 753F27     259            mov y+1, #high(10000 % 0x10000) 
0699 754000     259            mov y+2, #low (10000 / 0x10000) 
069C 754100     259            mov y+3, #high(10000 / 0x10000) 
069F 120256     260            lcall mul32                     ; Gets Vcc*10^6
06A2            261   
06A2 853A4D     262            mov Vcc+0, x+0 
06A5 853B4E     262            mov Vcc+1, x+1
06A8 853C4F     262            mov Vcc+2, x+2 
06AB 853D50     262            mov Vcc+3, x+3
06AE            263            
06AE 22         264            ret
06AF            265            
06AF            266   ;calculating cold junction temperature
06AF            267   LM335_Result_SPI_Routine:
06AF 854D3E     268            mov y+0, Vcc+0 
06B2 854E3F     268            mov y+1, Vcc+1
06B5 854F40     268            mov y+2, Vcc+2 
06B8 855041     268            mov y+3, Vcc+3
06BB            269   
06BB 120256     270       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
06BE 753EFF     271            mov y+0, #low (1023 % 0x10000) 
06C1 753F03     271            mov y+1, #high(1023 % 0x10000) 
06C4 754000     271            mov y+2, #low (1023 / 0x10000) 
06C7 754100     271            mov y+3, #high(1023 / 0x10000)          
06CA 1202E3     272       lcall div32
06CD 753E10     273            mov y+0, #low (2730000 % 0x10000) 
06D0 753FA8     273            mov y+1, #high(2730000 % 0x10000) 
06D3 754029     273            mov y+2, #low (2730000 / 0x10000) 
06D6 754100     273            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
06D9 1201C2     274       lcall sub32
06DC 753E64     275            mov y+0, #low (100 % 0x10000) 
06DF 753F00     275            mov y+1, #high(100 % 0x10000) 
06E2 754000     275            mov y+2, #low (100 / 0x10000) 
06E5 754100     275            mov y+3, #high(100 / 0x10000)           
06E8 1202E3     276       lcall div32
06EB            277   
06EB 853A49     278            mov x_lm335+0, x+0 
06EE 853B4A     278            mov x_lm335+1, x+1
06F1 853C4B     278            mov x_lm335+2, x+2 
06F4 853D4C     278            mov x_lm335+3, x+3
06F7            279            
06F7 22         280            ret
06F8            281   
06F8            282   ;calculating the oven temperature and sending it to computer and LCD
06F8            283   Result_SPI_Routine:
06F8 854D3E     284            mov y+0, Vcc+0 
06FB 854E3F     284            mov y+1, Vcc+1
06FE 854F40     284            mov y+2, Vcc+2 
0701 855041     284            mov y+3, Vcc+3
0704            285            
0704 120256     286            lcall mul32
0707 753EFF     287            mov y+0, #low (1023 % 0x10000) 
070A 753F03     287            mov y+1, #high(1023 % 0x10000) 
070D 754000     287            mov y+2, #low (1023 / 0x10000) 
0710 754100     287            mov y+3, #high(1023 / 0x10000) 
0713 1202E3     288            lcall div32
0716 753E64     289            mov y+0, #low (100 % 0x10000) 
0719 753F00     289            mov y+1, #high(100 % 0x10000) 
071C 754000     289            mov y+2, #low (100 / 0x10000) 
071F 754100     289            mov y+3, #high(100 / 0x10000) 
0722 120256     290            lcall mul32     
0725 753EC6     291            mov y+0, #low (454 % 0x10000) 
0728 753F01     291            mov y+1, #high(454 % 0x10000) 
072B 754000     291            mov y+2, #low (454 / 0x10000) 
072E 754100     291            mov y+3, #high(454 / 0x10000)   ;Gain 
0731 1202E3     292            lcall div32
0734 753E29     293            mov y+0, #low (41 % 0x10000) 
0737 753F00     293            mov y+1, #high(41 % 0x10000) 
073A 754000     293            mov y+2, #low (41 / 0x10000) 
073D 754100     293            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
0740 1202E3     294            lcall div32
0743            295            
0743 85493E     296            mov y+0, x_lm335+0 
0746 854A3F     296            mov y+1, x_lm335+1
0749 854B40     296            mov y+2, x_lm335+2 
074C 854C41     296            mov y+3, x_lm335+3
074F 1201A1     297            lcall add32
0752            298     
0752 753E64     299            mov y+0, #low (100 % 0x10000) 
0755 753F00     299            mov y+1, #high(100 % 0x10000) 
0758 754000     299            mov y+2, #low (100 / 0x10000) 
075B 754100     299            mov y+3, #high(100 / 0x10000) 
075E 1202E3     300     lcall div32
0761            301   
0761            302            ;updating the temperature of OVEN variable
0761 853A56     303            mov current_temp+0, x+0 
0764 853B57     303            mov current_temp+1, x+1
0767 853C58     303            mov current_temp+2, x+2 
076A 853D59     303            mov current_temp+3, x+3
076D            304            
076D 1200DC     305            lcall hex2bcd
0770            306   
0770            307   ;sending Oven temperature to Computer
0770            308   Send_Serial:
0770            309            
0770 C000       310       push ar0
0772 A846       310       mov r0, bcd+2
0774 1203EF     310       lcall ?Send_BCD
0777 D000       310       pop ar0
0779 C000       311       push ar0
077B A845       311       mov r0, bcd+1
077D 1203EF     311       lcall ?Send_BCD
0780 D000       311       pop ar0
0782 740A       312            mov a, #'\n'
0784 1203DC     313            lcall putchar
0787            314            
0787 C0E0       315            push acc
0789 7401       315            mov a, #1
078B 14         315            dec a
078C 1200C1     315            lcall ?Set_Cursor_1 ; Select column and row
078F D0E0       315            pop acc
0791            316            
0791            317   Display_Temp_LCD:                        ;TODOOO                 to be changed according to need
0791 C000       318            push ar0
0793 A848       318            mov r0, bcd+4
0795 1200C6     318            lcall ?Display_BCD
0798 D000       318            pop ar0
079A C000       319            push ar0
079C A847       319            mov r0, bcd+3
079E 1200C6     319            lcall ?Display_BCD
07A1 D000       319            pop ar0
07A3 C000       320            push ar0
07A5 A846       320            mov r0, bcd+2
07A7 1200C6     320            lcall ?Display_BCD
07AA D000       320            pop ar0
07AC C000       321            push ar0
07AE A845       321            mov r0, bcd+1
07B0 1200C6     321            lcall ?Display_BCD
07B3 D000       321            pop ar0
07B5 C000       322            push ar0
07B7 A844       322            mov r0, bcd
07B9 1200C6     322            lcall ?Display_BCD
07BC D000       322            pop ar0
07BE            323            
07BE 22         324   ret
07BF            325   
07BF            326   ;Saving variables to Flash Memory
07BF            327   Save_Configuration:
07BF            328            ; Erase FDATA page 1
07BF C2AF       329            clr EA ; Disables interrupts to allow access to flash memory
07C1 759658     330            mov MEMCON, #01011000B ; AERS=1, MWEN=1, DMEN=1, 
07C4            331     ; ^ Erases page in flash memory, enables programming to nonvolatie mem location
07C4            332     ; Enables nonvolatile data memory and maps it into FDATA space
07C4 900000     333            mov DPTR, #0x0000 ; Set data pointer to start of flash memory
07C7 74FF       334            mov a, #0xff                    ; Write 1111 1111 to flash mem
07C9 F0         335            movx @DPTR, A
07CA            336            ; Load page
07CA 759638     337     mov MEMCON, #00111000B ; LDPG=1, MWEN=1, DMEN=1
07CD            338     ; Enables loading of multiple bytes to temporary page buffer
07CD            339     ; Enables programming of nonvolatile memory location
07CD            340     ; Enables nonvolatile data memory and map it into FDATA space
07CD            341     ; Save variables
07CD E535       342     mov a, soak_temp       ; Move soak temperature to accumulator
07CF F0         343     movx @DPTR, A                  ; Save data in buffer
07D0 A3         344     inc DPTR                                       ; Increment data pointer
07D1 E534       345     mov a, soak_seconds ; Repeat for remaining variables
07D3 F0         346     movx @DPTR, A
07D4 A3         347     inc DPTR
07D5 E537       348     mov a, reflow_temp
07D7 F0         349     movx @DPTR,A
07D8 A3         350     inc DPTR
07D9 E536       351     mov a, reflow_seconds
07DB F0         352     movx @DPTR, A
07DC            353     ; Write Validation Keys to flash memory (Check upon write)
07DC A3         354     inc DPTR
07DD 7455       355     mov a, #0x55 ; First key value (0101 0101)
07DF F0         356     movx @DPTR, A
07E0 A3         357     inc DPTR
07E1 74AA       358     mov a, #0xAA ; Second key value (1010 1010)
07E3 F0         359     movx @DPTR, A
07E4            360     ; Copy Buffer to Flash
07E4 759618     361     mov MEMCON, #00011000B ; Copy page to flash
07E7 74FF       362     mov a, #0xff
07E9 F0         363     movx @DPTR, A
07EA 759600     364     mov MEMCON, #00000000B ; Disable access to data flash
07ED D2AF       365     setb EA ; Re-enable interrupts
07EF 22         366     ret
07F0            367   
07F0            368   ; Reading variables from flash memory
07F0            369   Load_Configuration:
07F0 759608     370            mov MEMCON, #00001000B ; Enable read access to data flash
07F3            371     
07F3 900004     372     mov dptr, #0x0004 ; Move dptr to first key value location
07F6 E0         373     movx a, @dptr
07F7 B4551B     374     cjne a, #0x55, Load_Defaults ; If keys do not match, write to flash failed, load default values
07FA A3         375     inc dptr ; Second key value location
07FB E0         376     movx a, @dptr
07FC B4AA16     377     cjne a, #0xAA, Load_Defaults ; Check if second keys match or not, if not then load defaults
07FF            378     ; Keys match. Now load saved values from flash
07FF 900000     379     mov dptr, #0x0000
0802 E0         380     movx a, @dptr
0803 F535       381     mov soak_temp, a       ; Load soak temperature
0805 A3         382     inc dptr
0806 E0         383     movx a, @dptr
0807 F534       384     mov soak_seconds, a ; Load soak time
0809 A3         385     inc dptr
080A E0         386            movx a, @dptr
080B F537       387     mov reflow_temp, a ; Load reflow temperature
080D A3         388     inc dptr
080E E0         389     movx a, @dptr
080F F536       390     mov reflow_seconds, a ; Load reflow time
0811 759600     391     mov MEMCON, #00000000B ; Disables access to data flashx
0814 22         392     ret
0815            393     
0815            394   ; Default (optimal) values for soldering profile
0815            395   Load_Defaults: ; Load defaults if keys are incorrect
0815 753596     396            mov soak_temp, #150
0818 75342D     397     mov soak_seconds, #45
081B 7537E1     398     mov reflow_temp, #225
081E 75361E     399     mov reflow_seconds, #30
0821 759600     400     mov MEMCON, #00000000B ; Disables access to data flash
0824 02085A     401     ljmp forever 
0827            402    
0827            403   ;------------------------------------------------------------------;
0827            404   ; ********************MACRO LIST***********************************;
0827            405   ;------------------------------------------------------------------;
0827            406   
0827            407   ;------------------------------------------------------------------;
0827            408   ; MACRO for incrementing a variable
0827            409   ;------------------------------------------------------------------;
                410   Inc_variable MAC
                411   	;Mac (%0 : inc/dec button    %1 : variable ) 
                412   	jb %0, no_inc_dec_var%M
                413   	Wait_Milli_Seconds(#50)
                414   	jb %0, no_inc_dec_var%M
                415     Wait_Milli_Seconds(#200)
                416   
                417   	inc %1
                418   	
                419   no_inc_dec_var%M:
                420   
                421   ENDMAC
0827            422   
0827            423   ;------------------------------------------------------------------;
0827            424   ; MACRO for decrementing a variable
0827            425   ;------------------------------------------------------------------;
                426   Dec_variable MAC
                427   	;Mac (%0 : inc/dec button    %1 : variable ) 
                428   	jb %0, no_inc_dec_var%M
                429   	Wait_Milli_Seconds(#50)
                430   	jb %0, no_inc_dec_var%M
                431   	Wait_Milli_Seconds(#200)
                432   
                433   	dec %1
                434   	
                435   no_inc_dec_var%M:
                436   
                437   ENDMAC
0827            438   
0827            439   ;------------------------------------------------------------------;
0827            440   ; MACRO for Showing values with header on LCD
0827            441   ;------------------------------------------------------------------;
                442   Show_Header_and_Value Mac
                443   	; MAC (%0:    Constant string for the first line on LCD       %1: value to be shown on second line				%2: unit )
                444   	Set_Cursor(1,1)
                445   	Send_Constant_String(#%0)
                446   	Set_Cursor(2,1)
                447   	Move_1B_to_4B ( x, %1)
                448   	lcall hex2bcd
                449     Display_BCD_1_digit(bcd+1)
                450   	Display_BCD(bcd)
                451     Set_Cursor(2,5)
                452     Send_Constant_String(#%2)
                453   ENDMAC
0827            454   
0827            455   
0827            456   ;------------------------------------------------------------------;
0827            457   ; MACRO for Showing messages with header on LCD
0827            458   ;------------------------------------------------------------------;
                459   Show_Header Mac
                460   	Set_Cursor(1,1)
                461     Send_Constant_String(#%0)
                462     Set_Cursor(2,1)
                463     Send_Constant_String(#%1)
                464   ENDMAC
0827            465   
0827            466   ;------------------------------------------------------------------;
0827            467   ; MACRO for Showing 2 values with header on LCD
0827            468   ;------------------------------------------------------------------;
                469   Show_Stage_Temp_Time Mac
                470   	; MAC (%0:    Constant string for the first line on LCD           %1: Temperature			%2: Time )
                471   	Set_Cursor(1,1)
                472   	Send_Constant_String(#%0)
                473     
                474     Set_Cursor(2,1)	;show temperture
                475   	Move_1B_to_4B ( x, %1)
                476   	lcall hex2bcd
                477     Display_BCD_1_digit(bcd+1)
                478   	Display_BCD_1_digit(bcd)
                479   
                480     Set_Cursor(2,12)	;display time in seconds TODO: put it in minute and seconds
                481   	Move_1B_to_4B ( x, %2)
                482   	lcall hex2bcd
                483     Display_BCD(bcd+1)
                484   	Display_BCD(bcd)
                485     Set_Cursor(2,16)
                486     Display_char(#'s')
                487     
                488   	Set_Cursor(2,5)
                489   	Send_Constant_String(#Cels)
                490     
                491    
                492   ENDMAC
0827            493   
0827            494   ;------------------------------------------------------------------;
0827            495   ; MACRO for checking a button and changing state
0827            496   ;------------------------------------------------------------------;
                497   Check_button_for_State_change Mac
                498   	; MAC (%0:    Constant string for the button name           %1: state to jump to if the button is pressed )
                499   	jb %0, no_button_pressed%M
                500   	Wait_Milli_Seconds(#50)
                501   	jb %0, no_button_pressed%M
                502   	jnb %0, $
                503   	
                504   	mov state, #%1
                505     WriteCommand(#0x01)
                506     Wait_Milli_Seconds(#2)
                507   no_button_pressed%M:
                508   
                509   ENDMAC
0827            510   
0827            511   ;------------------------------------------------------------------;
0827            512   ; MACRO for comparing 2 values and changing state
0827            513   ;------------------------------------------------------------------;
                514   Compare_Values_for_State_Change MAC
                515   	;	%0: variable to check
                516   	;	%1: value set at using the buttons
                517   	;	%2: next state
                518   	mov a, %0
                519     clr c
                520     subb a, %1
                521     jnc values_not_equal%M
                522   	mov state, #%2
                523   	 WriteCommand(#0x01)
                524     Wait_Milli_Seconds(#2)
                525   values_not_equal%M:
                526   
                527   ENDMAC
0827            528   ;------------------------------------------------------------------;
0827            529   ; MACRO for turning the SSR off
0827            530   ;------------------------------------------------------------------;
                531   SSR_OFF MAC
                532       clr pwm_on
                533       clr pwm_high
                534       clr SSR_OUT
                535   ENDMAC
0827            536   
0827            537   ;------------------------------------------------------------------;
0827            538   ; MACRO for going to next state
0827            539   ;------------------------------------------------------------------;
                540   check_state MAC
                541   		; %0 state number    %1 next state
                542       mov a, state
                543       cjne a, #%0, skipstate%M
                544     	sjmp no_skip_state%M
                545   skipstate%M:
                546       ljmp state%1
                547   no_skip_state%M:
                548   ENDMAC
0827            549   ;------------------------------------------------------------------;
0827            550   ; Main program   (FSM)
0827            551   ;        -state 0:  Start Screen
0827            552   ;        -state 1:  initialization       Soak Time  
0827            553   ;        -state 2:  initialization               Soak Temperature
0827            554   ;        -state 3:  initialization               Reflow Time
0827            555   ;        -state 4:  initialization               Reflow Temp
0827            556   ;
0827            557   ;        -state 5:  Storing the variables in flash memory, and asking for user confirmation to begin process                             
0827            558   ; -state 6:  initialising Timer and resetting Global Timer
0827            559   ;        -state 10: Ramp to Soak
0827            560   ;        -state 11: Soak
0827            561   ;        -state 12: Ramp to reflow
0827            562   ;        -state 13: Reflow (Done for now, possible additions check if temperature goes too high, if so then begin cooling immediately etc.)
0827            563   ;        -state 14: Cooling
0827            564   ;        -state 15: Finished successfully
0827            565   ;        -state 16: ERROR State
0827            566   ; -state 17: Force Quit State
0827            567   ;------------------------------------------------------------------;
0827            568   MainProgram:
0827            569   
0827            570            ; Initialization
0827 75817F     571       mov SP, #0x7F
082A 75C100     572       mov PMOD, #0 ; Configure all ports in bidirectional mode
082D 120418     573       lcall Timer0_Init
0830 12042B     574       lcall Timer2_Init
0833 C2CA       575       clr TR2
0835 D2AF       576       setb EA   ; Enable Global interrupts
0837 12034C     577       lcall INIT_SPI
083A 1203BD     578            lcall InitSerialPort
083D 120088     579       lcall LCD_4BIT  ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0840            580       
0840 C202       581       clr pwm_on
0842 C203       581       clr pwm_high
0844 C2B7       581       clr SSR_OUT  ; clears  pwm_on ------- pwm_high ------- SSR_OUT ------- in_process                            
0846            582   
0846 C204       583                    clr settings_modified_flag
0848 C201       584       clr one_min_flag
084A C205       585       clr sample_flag
084C            586       
084C E4         587                    clr a
084D F534       588       mov soak_seconds, a
084F F535       589       mov soak_temp, a
0851 F536       590       mov reflow_seconds, a
0853 F537       591       mov reflow_temp, a
0855 F555       592       mov state, a
0857            593            
0857 1207F0     594            lcall Load_Configuration ; Read values from data flash
085A            595            
085A            596   forever:         
085A 300503     597     jnb sample_flag, state0
085D 12065A     598     lcall Take_Sample
0860            599   
0860            600   ; Main start screen appears on boot and 
0860            601   state0:
0860            602                    ; 0 state number    1 next state
0860 E555       602       mov a, state
0862 B40002     602       cjne a, #0, skipstate43
0865 8003       602            sjmp no_skip_state43
0867            602   skipstate43:
0867 0208EB     602       ljmp state1
086A            602   no_skip_state43:
086A            603     
086A C0E0       604            push acc
086C 7401       604            mov a, #1
086E 14         604            dec a
086F 1200C1     604            lcall ?Set_Cursor_1 ; Select column and row
0872 D0E0       604            pop acc
0874 C083       604            push dph
0876 C082       604            push dpl
0878 C0E0       604            push acc
087A 900442     604            mov dptr, #StartMessage
087D 1200B4     604            lcall ?Send_Constant_String
0880 D0E0       604            pop acc
0882 D082       604            pop dpl
0884 D083       604            pop dph
0886 C0E0       604            push acc
0888 7401       604            mov a, #1
088A 14         604            dec a
088B 1200BF     604            lcall ?Set_Cursor_2 ; Select column and row
088E D0E0       604            pop acc
0890 C083       604            push dph
0892 C082       604            push dpl
0894 C0E0       604            push acc
0896 900453     604            mov dptr, #StartMessage2
0899 1200B4     604            lcall ?Send_Constant_String
089C D0E0       604            pop acc
089E D082       604            pop dpl
08A0 D083       604            pop dph
08A2            605     
08A2            606            ; MAC (CYCLE_BUTTON:    Constant string for the button name           1: state to jump to if the button is pressed )
08A2 208020     606            jb CYCLE_BUTTON, no_button_pressed49
08A5 C002       606            push AR2
08A7 7A32       606            mov R2, #50
08A9 120039     606            lcall ?Wait_Milli_Seconds
08AC D002       606            pop AR2
08AE 208014     606            jb CYCLE_BUTTON, no_button_pressed49
08B1 3080FD     606            jnb CYCLE_BUTTON, $
08B4            606            
08B4 755501     606            mov state, #1
08B7 7401       606            mov a, #0x01
08B9 120083     606            lcall ?WriteCommand
08BC C002       606            push AR2
08BE 7A02       606            mov R2, #2
08C0 120039     606            lcall ?Wait_Milli_Seconds
08C3 D002       606            pop AR2
08C5            606   no_button_pressed49:
08C5            606                    ; Transition to parameter select states
08C5            607            ; MAC (INC_BUTTON:    Constant string for the button name           5: state to jump to if the button is pressed )
08C5 208220     607            jb INC_BUTTON, no_button_pressed53
08C8 C002       607            push AR2
08CA 7A32       607            mov R2, #50
08CC 120039     607            lcall ?Wait_Milli_Seconds
08CF D002       607            pop AR2
08D1 208214     607            jb INC_BUTTON, no_button_pressed53
08D4 3082FD     607            jnb INC_BUTTON, $
08D7            607            
08D7 755505     607            mov state, #5
08DA 7401       607            mov a, #0x01
08DC 120083     607            lcall ?WriteCommand
08DF C002       607            push AR2
08E1 7A02       607            mov R2, #2
08E3 120039     607            lcall ?Wait_Milli_Seconds
08E6 D002       607            pop AR2
08E8            607   no_button_pressed53:
08E8            607                            ; Transition to save/start confirm state
08E8 02085A     608     ljmp forever
08EB            609   ; initializing the Soak Time 
08EB            610   state1:
08EB            611                    ; 1 state number    2 next state
08EB E555       611       mov a, state
08ED B40102     611       cjne a, #1, skipstate57
08F0 8003       611            sjmp no_skip_state57
08F2            611   skipstate57:
08F2 0209C2     611       ljmp state2
08F5            611   no_skip_state57:
08F5 D204       612            setb settings_modified_flag
08F7            613     
08F7            614            ; MAC (SoakTime_Message:    Constant string for the first line on LCD       soak_seconds: value to be shown on second line                              Secs: unit )
08F7 C0E0       614            push acc
08F9 7401       614            mov a, #1
08FB 14         614            dec a
08FC 1200C1     614            lcall ?Set_Cursor_1 ; Select column and row
08FF D0E0       614            pop acc
0901 C083       614            push dph
0903 C082       614            push dpl
0905 C0E0       614            push acc
0907 900464     614            mov dptr, #SoakTime_Message
090A 1200B4     614            lcall ?Send_Constant_String
090D D0E0       614            pop acc
090F D082       614            pop dpl
0911 D083       614            pop dph
0913 C0E0       614            push acc
0915 7401       614            mov a, #1
0917 14         614            dec a
0918 1200BF     614            lcall ?Set_Cursor_2 ; Select column and row
091B D0E0       614            pop acc
091D 85343A     614            mov x+0, soak_seconds+0 
0920 753B00     614            mov x+1, #0
0923 753C00     614            mov x+2, #0 
0926 753D00     614            mov x+3, #0
0929 1200DC     614            lcall hex2bcd
092C C000       614            push ar0
092E C0E0       614            push acc
0930 7420       614            mov a, #' '
0932 12007E     614            lcall ?WriteData
0935 A845       614            mov r0, bcd+1
0937 E8         614            mov a, r0
0938 540F       614            anl a, #0fh
093A 4430       614            orl a, #30h
093C 12007E     614            lcall ?WriteData
093F D0E0       614            pop acc
0941 D000       614            pop ar0
0943 C000       614            push ar0
0945 A844       614            mov r0, bcd
0947 1200C6     614            lcall ?Display_BCD
094A D000       614            pop ar0
094C C0E0       614            push acc
094E 7405       614            mov a, #5
0950 14         614            dec a
0951 1200BF     614            lcall ?Set_Cursor_2 ; Select column and row
0954 D0E0       614            pop acc
0956 C083       614            push dph
0958 C082       614            push dpl
095A C0E0       614            push acc
095C 9005EA     614            mov dptr, #Secs
095F 1200B4     614            lcall ?Send_Constant_String
0962 D0E0       614            pop acc
0964 D082       614            pop dpl
0966 D083       614            pop dph
0968            615            ;Mac (INC_BUTTON : inc/dec button    soak_seconds : variable ) 
0968 208217     615            jb INC_BUTTON, no_inc_dec_var67
096B C002       615            push AR2
096D 7A32       615            mov R2, #50
096F 120039     615            lcall ?Wait_Milli_Seconds
0972 D002       615            pop AR2
0974 20820B     615            jb INC_BUTTON, no_inc_dec_var67
0977 C002       615            push AR2
0979 7AC8       615            mov R2, #200
097B 120039     615            lcall ?Wait_Milli_Seconds
097E D002       615            pop AR2
0980            615   
0980 0534       615            inc soak_seconds
0982            615            
0982            615   no_inc_dec_var67:
0982            615   
0982            616            ;Mac (DEC_BUTTON : inc/dec button    soak_seconds : variable ) 
0982 208417     616            jb DEC_BUTTON, no_inc_dec_var70
0985 C002       616            push AR2
0987 7A32       616            mov R2, #50
0989 120039     616            lcall ?Wait_Milli_Seconds
098C D002       616            pop AR2
098E 20840B     616            jb DEC_BUTTON, no_inc_dec_var70
0991 C002       616            push AR2
0993 7AC8       616            mov R2, #200
0995 120039     616            lcall ?Wait_Milli_Seconds
0998 D002       616            pop AR2
099A            616   
099A 1534       616            dec soak_seconds
099C            616            
099C            616   no_inc_dec_var70:
099C            616   
099C            617            
099C            618            ; MAC (CYCLE_BUTTON:    Constant string for the button name           2: state to jump to if the button is pressed )
099C 208020     618            jb CYCLE_BUTTON, no_button_pressed73
099F C002       618            push AR2
09A1 7A32       618            mov R2, #50
09A3 120039     618            lcall ?Wait_Milli_Seconds
09A6 D002       618            pop AR2
09A8 208014     618            jb CYCLE_BUTTON, no_button_pressed73
09AB 3080FD     618            jnb CYCLE_BUTTON, $
09AE            618            
09AE 755502     618            mov state, #2
09B1 7401       618            mov a, #0x01
09B3 120083     618            lcall ?WriteCommand
09B6 C002       618            push AR2
09B8 7A02       618            mov R2, #2
09BA 120039     618            lcall ?Wait_Milli_Seconds
09BD D002       618            pop AR2
09BF            618   no_button_pressed73:
09BF            618   
09BF            618   
09BF 02085A     619            ljmp forever                                                                    
09C2            620            
09C2            621   ; initializing the Soak Temperature 
09C2            622   state2:
09C2            623                    ; 2 state number    3 next state
09C2 E555       623       mov a, state
09C4 B40202     623       cjne a, #2, skipstate77
09C7 8003       623            sjmp no_skip_state77
09C9            623   skipstate77:
09C9 020A97     623       ljmp state3
09CC            623   no_skip_state77:
09CC            623   
09CC            624            ; MAC (SoakTemp_Message:    Constant string for the first line on LCD       soak_temp: value to be shown on second line                                 Cels: unit )
09CC C0E0       624            push acc
09CE 7401       624            mov a, #1
09D0 14         624            dec a
09D1 1200C1     624            lcall ?Set_Cursor_1 ; Select column and row
09D4 D0E0       624            pop acc
09D6 C083       624            push dph
09D8 C082       624            push dpl
09DA C0E0       624            push acc
09DC 900475     624            mov dptr, #SoakTemp_Message
09DF 1200B4     624            lcall ?Send_Constant_String
09E2 D0E0       624            pop acc
09E4 D082       624            pop dpl
09E6 D083       624            pop dph
09E8 C0E0       624            push acc
09EA 7401       624            mov a, #1
09EC 14         624            dec a
09ED 1200BF     624            lcall ?Set_Cursor_2 ; Select column and row
09F0 D0E0       624            pop acc
09F2 85353A     624            mov x+0, soak_temp+0 
09F5 753B00     624            mov x+1, #0
09F8 753C00     624            mov x+2, #0 
09FB 753D00     624            mov x+3, #0
09FE 1200DC     624            lcall hex2bcd
0A01 C000       624            push ar0
0A03 C0E0       624            push acc
0A05 7420       624            mov a, #' '
0A07 12007E     624            lcall ?WriteData
0A0A A845       624            mov r0, bcd+1
0A0C E8         624            mov a, r0
0A0D 540F       624            anl a, #0fh
0A0F 4430       624            orl a, #30h
0A11 12007E     624            lcall ?WriteData
0A14 D0E0       624            pop acc
0A16 D000       624            pop ar0
0A18 C000       624            push ar0
0A1A A844       624            mov r0, bcd
0A1C 1200C6     624            lcall ?Display_BCD
0A1F D000       624            pop ar0
0A21 C0E0       624            push acc
0A23 7405       624            mov a, #5
0A25 14         624            dec a
0A26 1200BF     624            lcall ?Set_Cursor_2 ; Select column and row
0A29 D0E0       624            pop acc
0A2B C083       624            push dph
0A2D C082       624            push dpl
0A2F C0E0       624            push acc
0A31 9005E6     624            mov dptr, #Cels
0A34 1200B4     624            lcall ?Send_Constant_String
0A37 D0E0       624            pop acc
0A39 D082       624            pop dpl
0A3B D083       624            pop dph
0A3D            625            ;Mac (INC_BUTTON : inc/dec button    soak_temp : variable ) 
0A3D 208217     625            jb INC_BUTTON, no_inc_dec_var87
0A40 C002       625            push AR2
0A42 7A32       625            mov R2, #50
0A44 120039     625            lcall ?Wait_Milli_Seconds
0A47 D002       625            pop AR2
0A49 20820B     625            jb INC_BUTTON, no_inc_dec_var87
0A4C C002       625            push AR2
0A4E 7AC8       625            mov R2, #200
0A50 120039     625            lcall ?Wait_Milli_Seconds
0A53 D002       625            pop AR2
0A55            625   
0A55 0535       625            inc soak_temp
0A57            625            
0A57            625   no_inc_dec_var87:
0A57            625   
0A57            626            ;Mac (DEC_BUTTON : inc/dec button    soak_temp : variable ) 
0A57 208417     626            jb DEC_BUTTON, no_inc_dec_var90
0A5A C002       626            push AR2
0A5C 7A32       626            mov R2, #50
0A5E 120039     626            lcall ?Wait_Milli_Seconds
0A61 D002       626            pop AR2
0A63 20840B     626            jb DEC_BUTTON, no_inc_dec_var90
0A66 C002       626            push AR2
0A68 7AC8       626            mov R2, #200
0A6A 120039     626            lcall ?Wait_Milli_Seconds
0A6D D002       626            pop AR2
0A6F            626   
0A6F 1535       626            dec soak_temp
0A71            626            
0A71            626   no_inc_dec_var90:
0A71            626   
0A71            627            
0A71            628            ; MAC (CYCLE_BUTTON:    Constant string for the button name           3: state to jump to if the button is pressed )
0A71 208020     628            jb CYCLE_BUTTON, no_button_pressed93
0A74 C002       628            push AR2
0A76 7A32       628            mov R2, #50
0A78 120039     628            lcall ?Wait_Milli_Seconds
0A7B D002       628            pop AR2
0A7D 208014     628            jb CYCLE_BUTTON, no_button_pressed93
0A80 3080FD     628            jnb CYCLE_BUTTON, $
0A83            628            
0A83 755503     628            mov state, #3
0A86 7401       628            mov a, #0x01
0A88 120083     628            lcall ?WriteCommand
0A8B C002       628            push AR2
0A8D 7A02       628            mov R2, #2
0A8F 120039     628            lcall ?Wait_Milli_Seconds
0A92 D002       628            pop AR2
0A94            628   no_button_pressed93:
0A94            628   
0A94 02085A     629            ljmp forever                                                                    
0A97            630   
0A97            631   ; initializing the Reflow Time 
0A97            632   state3:
0A97            633                    ; 3 state number    4 next state
0A97 E555       633       mov a, state
0A99 B40302     633       cjne a, #3, skipstate97
0A9C 8003       633            sjmp no_skip_state97
0A9E            633   skipstate97:
0A9E 020B6C     633       ljmp state4
0AA1            633   no_skip_state97:
0AA1            633   
0AA1            634            
0AA1            635            ; MAC (ReflowTime_Message:    Constant string for the first line on LCD       reflow_seconds: value to be shown on second line                          Secs: unit )
0AA1 C0E0       635            push acc
0AA3 7401       635            mov a, #1
0AA5 14         635            dec a
0AA6 1200C1     635            lcall ?Set_Cursor_1 ; Select column and row
0AA9 D0E0       635            pop acc
0AAB C083       635            push dph
0AAD C082       635            push dpl
0AAF C0E0       635            push acc
0AB1 900486     635            mov dptr, #ReflowTime_Message
0AB4 1200B4     635            lcall ?Send_Constant_String
0AB7 D0E0       635            pop acc
0AB9 D082       635            pop dpl
0ABB D083       635            pop dph
0ABD C0E0       635            push acc
0ABF 7401       635            mov a, #1
0AC1 14         635            dec a
0AC2 1200BF     635            lcall ?Set_Cursor_2 ; Select column and row
0AC5 D0E0       635            pop acc
0AC7 85363A     635            mov x+0, reflow_seconds+0 
0ACA 753B00     635            mov x+1, #0
0ACD 753C00     635            mov x+2, #0 
0AD0 753D00     635            mov x+3, #0
0AD3 1200DC     635            lcall hex2bcd
0AD6 C000       635            push ar0
0AD8 C0E0       635            push acc
0ADA 7420       635            mov a, #' '
0ADC 12007E     635            lcall ?WriteData
0ADF A845       635            mov r0, bcd+1
0AE1 E8         635            mov a, r0
0AE2 540F       635            anl a, #0fh
0AE4 4430       635            orl a, #30h
0AE6 12007E     635            lcall ?WriteData
0AE9 D0E0       635            pop acc
0AEB D000       635            pop ar0
0AED C000       635            push ar0
0AEF A844       635            mov r0, bcd
0AF1 1200C6     635            lcall ?Display_BCD
0AF4 D000       635            pop ar0
0AF6 C0E0       635            push acc
0AF8 7405       635            mov a, #5
0AFA 14         635            dec a
0AFB 1200BF     635            lcall ?Set_Cursor_2 ; Select column and row
0AFE D0E0       635            pop acc
0B00 C083       635            push dph
0B02 C082       635            push dpl
0B04 C0E0       635            push acc
0B06 9005EA     635            mov dptr, #Secs
0B09 1200B4     635            lcall ?Send_Constant_String
0B0C D0E0       635            pop acc
0B0E D082       635            pop dpl
0B10 D083       635            pop dph         
0B12            636            ;Mac (INC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0B12 208217     636            jb INC_BUTTON, no_inc_dec_var107
0B15 C002       636            push AR2
0B17 7A32       636            mov R2, #50
0B19 120039     636            lcall ?Wait_Milli_Seconds
0B1C D002       636            pop AR2
0B1E 20820B     636            jb INC_BUTTON, no_inc_dec_var107
0B21 C002       636            push AR2
0B23 7AC8       636            mov R2, #200
0B25 120039     636            lcall ?Wait_Milli_Seconds
0B28 D002       636            pop AR2
0B2A            636   
0B2A 0536       636            inc reflow_seconds
0B2C            636            
0B2C            636   no_inc_dec_var107:
0B2C            636   
0B2C            637            ;Mac (DEC_BUTTON : inc/dec button    reflow_seconds : variable ) 
0B2C 208417     637            jb DEC_BUTTON, no_inc_dec_var110
0B2F C002       637            push AR2
0B31 7A32       637            mov R2, #50
0B33 120039     637            lcall ?Wait_Milli_Seconds
0B36 D002       637            pop AR2
0B38 20840B     637            jb DEC_BUTTON, no_inc_dec_var110
0B3B C002       637            push AR2
0B3D 7AC8       637            mov R2, #200
0B3F 120039     637            lcall ?Wait_Milli_Seconds
0B42 D002       637            pop AR2
0B44            637   
0B44 1536       637            dec reflow_seconds
0B46            637            
0B46            637   no_inc_dec_var110:
0B46            637   
0B46            638            
0B46            639            ; MAC (CYCLE_BUTTON:    Constant string for the button name           4: state to jump to if the button is pressed )
0B46 208020     639            jb CYCLE_BUTTON, no_button_pressed113
0B49 C002       639            push AR2
0B4B 7A32       639            mov R2, #50
0B4D 120039     639            lcall ?Wait_Milli_Seconds
0B50 D002       639            pop AR2
0B52 208014     639            jb CYCLE_BUTTON, no_button_pressed113
0B55 3080FD     639            jnb CYCLE_BUTTON, $
0B58            639            
0B58 755504     639            mov state, #4
0B5B 7401       639            mov a, #0x01
0B5D 120083     639            lcall ?WriteCommand
0B60 C002       639            push AR2
0B62 7A02       639            mov R2, #2
0B64 120039     639            lcall ?Wait_Milli_Seconds
0B67 D002       639            pop AR2
0B69            639   no_button_pressed113:
0B69            639   
0B69 02085A     640            ljmp forever                                                                    
0B6C            641   
0B6C            642   ; initializing the Reflow Temperature 
0B6C            643   state4:
0B6C            644                    ; 4 state number    5 next state
0B6C E555       644       mov a, state
0B6E B40402     644       cjne a, #4, skipstate117
0B71 8003       644            sjmp no_skip_state117
0B73            644   skipstate117:
0B73 020C41     644       ljmp state5
0B76            644   no_skip_state117:
0B76            645            
0B76            646            ; MAC (ReflowTemp_Message:    Constant string for the first line on LCD       reflow_temp: value to be shown on second line                             Cels: unit )
0B76 C0E0       646            push acc
0B78 7401       646            mov a, #1
0B7A 14         646            dec a
0B7B 1200C1     646            lcall ?Set_Cursor_1 ; Select column and row
0B7E D0E0       646            pop acc
0B80 C083       646            push dph
0B82 C082       646            push dpl
0B84 C0E0       646            push acc
0B86 900497     646            mov dptr, #ReflowTemp_Message
0B89 1200B4     646            lcall ?Send_Constant_String
0B8C D0E0       646            pop acc
0B8E D082       646            pop dpl
0B90 D083       646            pop dph
0B92 C0E0       646            push acc
0B94 7401       646            mov a, #1
0B96 14         646            dec a
0B97 1200BF     646            lcall ?Set_Cursor_2 ; Select column and row
0B9A D0E0       646            pop acc
0B9C 85373A     646            mov x+0, reflow_temp+0 
0B9F 753B00     646            mov x+1, #0
0BA2 753C00     646            mov x+2, #0 
0BA5 753D00     646            mov x+3, #0
0BA8 1200DC     646            lcall hex2bcd
0BAB C000       646            push ar0
0BAD C0E0       646            push acc
0BAF 7420       646            mov a, #' '
0BB1 12007E     646            lcall ?WriteData
0BB4 A845       646            mov r0, bcd+1
0BB6 E8         646            mov a, r0
0BB7 540F       646            anl a, #0fh
0BB9 4430       646            orl a, #30h
0BBB 12007E     646            lcall ?WriteData
0BBE D0E0       646            pop acc
0BC0 D000       646            pop ar0
0BC2 C000       646            push ar0
0BC4 A844       646            mov r0, bcd
0BC6 1200C6     646            lcall ?Display_BCD
0BC9 D000       646            pop ar0
0BCB C0E0       646            push acc
0BCD 7405       646            mov a, #5
0BCF 14         646            dec a
0BD0 1200BF     646            lcall ?Set_Cursor_2 ; Select column and row
0BD3 D0E0       646            pop acc
0BD5 C083       646            push dph
0BD7 C082       646            push dpl
0BD9 C0E0       646            push acc
0BDB 9005E6     646            mov dptr, #Cels
0BDE 1200B4     646            lcall ?Send_Constant_String
0BE1 D0E0       646            pop acc
0BE3 D082       646            pop dpl
0BE5 D083       646            pop dph                 
0BE7            647            ;Mac (INC_BUTTON : inc/dec button    reflow_temp : variable ) 
0BE7 208217     647            jb INC_BUTTON, no_inc_dec_var127
0BEA C002       647            push AR2
0BEC 7A32       647            mov R2, #50
0BEE 120039     647            lcall ?Wait_Milli_Seconds
0BF1 D002       647            pop AR2
0BF3 20820B     647            jb INC_BUTTON, no_inc_dec_var127
0BF6 C002       647            push AR2
0BF8 7AC8       647            mov R2, #200
0BFA 120039     647            lcall ?Wait_Milli_Seconds
0BFD D002       647            pop AR2
0BFF            647   
0BFF            647   
0BFF 0537       647            inc reflow_temp
0C01            647            
0C01            647   no_inc_dec_var127:
0C01            647   
0C01            648            ;Mac (DEC_BUTTON : inc/dec button    reflow_temp : variable ) 
0C01 208417     648            jb DEC_BUTTON, no_inc_dec_var130
0C04 C002       648            push AR2
0C06 7A32       648            mov R2, #50
0C08 120039     648            lcall ?Wait_Milli_Seconds
0C0B D002       648            pop AR2
0C0D 20840B     648            jb DEC_BUTTON, no_inc_dec_var130
0C10 C002       648            push AR2
0C12 7AC8       648            mov R2, #200
0C14 120039     648            lcall ?Wait_Milli_Seconds
0C17 D002       648            pop AR2
0C19            648   
0C19            648   
0C19 1537       648            dec reflow_temp
0C1B            648            
0C1B            648   no_inc_dec_var130:
0C1B            648   
0C1B            649            
0C1B            650            ; MAC (CYCLE_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0C1B 208020     650            jb CYCLE_BUTTON, no_button_pressed133
0C1E C002       650            push AR2
0C20 7A32       650            mov R2, #50
0C22 120039     650            lcall ?Wait_Milli_Seconds
0C25 D002       650            pop AR2
0C27 208014     650            jb CYCLE_BUTTON, no_button_pressed133
0C2A 3080FD     650            jnb CYCLE_BUTTON, $
0C2D            650            
0C2D 755500     650            mov state, #0
0C30 7401       650            mov a, #0x01
0C32 120083     650            lcall ?WriteCommand
0C35 C002       650            push AR2
0C37 7A02       650            mov R2, #2
0C39 120039     650            lcall ?Wait_Milli_Seconds
0C3C D002       650            pop AR2
0C3E            650   no_button_pressed133:
0C3E            650   
0C3E 02085A     651            ljmp forever                                                                    
0C41            652            
0C41            653   ; Saves value in Flash Memory and Presents Confirmation Screen to Start Process
0C41            654   state5:
0C41            655                    ; 5 state number    10 next state
0C41 E555       655       mov a, state
0C43 B40502     655       cjne a, #5, skipstate137
0C46 8003       655            sjmp no_skip_state137
0C48            655   skipstate137:
0C48 020DA3     655       ljmp state10
0C4B            655   no_skip_state137:
0C4B            656            
0C4B 300461     657     jnb settings_modified_flag, state5AndAHalf ; Save values once, once saved skip this
0C4E            658     
0C4E 1207BF     659            lcall Save_Configuration ; Call to save data to flash memory
0C51 C204       660            clr settings_modified_flag
0C53 C0E0       661            push acc
0C55 7401       661            mov a, #1
0C57 14         661            dec a
0C58 1200C1     661            lcall ?Set_Cursor_1 ; Select column and row
0C5B D0E0       661            pop acc
0C5D C083       661            push dph
0C5F C082       661            push dpl
0C61 C0E0       661            push acc
0C63 9004EC     661            mov dptr, #SaveToFlash_Msg
0C66 1200B4     661            lcall ?Send_Constant_String
0C69 D0E0       661            pop acc
0C6B D082       661            pop dpl
0C6D D083       661            pop dph
0C6F C0E0       661            push acc
0C71 7401       661            mov a, #1
0C73 14         661            dec a
0C74 1200BF     661            lcall ?Set_Cursor_2 ; Select column and row
0C77 D0E0       661            pop acc
0C79 C083       661            push dph
0C7B C082       661            push dpl
0C7D C0E0       661            push acc
0C7F 90050E     661            mov dptr, #BlankMsg
0C82 1200B4     661            lcall ?Send_Constant_String
0C85 D0E0       661            pop acc
0C87 D082       661            pop dpl
0C89 D083       661            pop dph
0C8B C002       662            push AR2
0C8D 7AFA       662            mov R2, #250
0C8F 120039     662            lcall ?Wait_Milli_Seconds
0C92 D002       662            pop AR2
0C94 C002       663            push AR2
0C96 7AFA       663            mov R2, #250
0C98 120039     663            lcall ?Wait_Milli_Seconds
0C9B D002       663            pop AR2
0C9D C002       664            push AR2
0C9F 7AFA       664            mov R2, #250
0CA1 120039     664            lcall ?Wait_Milli_Seconds
0CA4 D002       664            pop AR2
0CA6 C002       665            push AR2
0CA8 7AFA       665            mov R2, #250
0CAA 120039     665            lcall ?Wait_Milli_Seconds
0CAD D002       665            pop AR2
0CAF            666     
0CAF            667   state5AndAHalf:  
0CAF            668   
0CAF C0E0       669            push acc
0CB1 7401       669            mov a, #1
0CB3 14         669            dec a
0CB4 1200C1     669            lcall ?Set_Cursor_1 ; Select column and row
0CB7 D0E0       669            pop acc
0CB9 C083       669            push dph
0CBB C082       669            push dpl
0CBD C0E0       669            push acc
0CBF 9004A8     669            mov dptr, #Start_Message
0CC2 1200B4     669            lcall ?Send_Constant_String
0CC5 D0E0       669            pop acc
0CC7 D082       669            pop dpl
0CC9 D083       669            pop dph
0CCB C0E0       669            push acc
0CCD 7401       669            mov a, #1
0CCF 14         669            dec a
0CD0 1200BF     669            lcall ?Set_Cursor_2 ; Select column and row
0CD3 D0E0       669            pop acc
0CD5 C083       669            push dph
0CD7 C082       669            push dpl
0CD9 C0E0       669            push acc
0CDB 9004B9     669            mov dptr, #Y_N_Message
0CDE 1200B4     669            lcall ?Send_Constant_String
0CE1 D0E0       669            pop acc
0CE3 D082       669            pop dpl
0CE5 D083       669            pop dph
0CE7            670            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
0CE7 208420     670            jb DEC_BUTTON, no_button_pressed152
0CEA C002       670            push AR2
0CEC 7A32       670            mov R2, #50
0CEE 120039     670            lcall ?Wait_Milli_Seconds
0CF1 D002       670            pop AR2
0CF3 208414     670            jb DEC_BUTTON, no_button_pressed152
0CF6 3084FD     670            jnb DEC_BUTTON, $
0CF9            670            
0CF9 755500     670            mov state, #0
0CFC 7401       670            mov a, #0x01
0CFE 120083     670            lcall ?WriteCommand
0D01 C002       670            push AR2
0D03 7A02       670            mov R2, #2
0D05 120039     670            lcall ?Wait_Milli_Seconds
0D08 D002       670            pop AR2
0D0A            670   no_button_pressed152:
0D0A            670            ; Move to state 0 to reselect values
0D0A            671            ; MAC (INC_BUTTON:    Constant string for the button name           6: state to jump to if the button is pressed )
0D0A 208220     671            jb INC_BUTTON, no_button_pressed156
0D0D C002       671            push AR2
0D0F 7A32       671            mov R2, #50
0D11 120039     671            lcall ?Wait_Milli_Seconds
0D14 D002       671            pop AR2
0D16 208214     671            jb INC_BUTTON, no_button_pressed156
0D19 3082FD     671            jnb INC_BUTTON, $
0D1C            671            
0D1C 755506     671            mov state, #6
0D1F 7401       671            mov a, #0x01
0D21 120083     671            lcall ?WriteCommand
0D24 C002       671            push AR2
0D26 7A02       671            mov R2, #2
0D28 120039     671            lcall ?Wait_Milli_Seconds
0D2B D002       671            pop AR2
0D2D            671   no_button_pressed156:
0D2D            671            ; Start Process
0D2D            672            ; Need beep here;
0D2D 02085A     673     ljmp forever   
0D30            674   
0D30            675   state6:
0D30            676                    ; 6 state number    10 next state
0D30 E555       676       mov a, state
0D32 B40602     676       cjne a, #6, skipstate160
0D35 8003       676            sjmp no_skip_state160
0D37            676   skipstate160:
0D37 020DA3     676       ljmp state10
0D3A            676   no_skip_state160:
0D3A C0E0       677            push acc
0D3C 7401       677            mov a, #1
0D3E 14         677            dec a
0D3F 1200C1     677            lcall ?Set_Cursor_1 ; Select column and row
0D42 D0E0       677            pop acc
0D44 C083       677            push dph
0D46 C082       677            push dpl
0D48 C0E0       677            push acc
0D4A 9005ED     677            mov dptr, #TestMessage
0D4D 1200B4     677            lcall ?Send_Constant_String
0D50 D0E0       677            pop acc
0D52 D082       677            pop dpl
0D54 D083       677            pop dph
0D56 C0E0       677            push acc
0D58 7401       677            mov a, #1
0D5A 14         677            dec a
0D5B 1200BF     677            lcall ?Set_Cursor_2 ; Select column and row
0D5E D0E0       677            pop acc
0D60            677   
0D60 C083       677            push dph
0D62 C082       677            push dpl
0D64 C0E0       677            push acc
0D66 90050E     677            mov dptr, #BlankMsg
0D69 1200B4     677            lcall ?Send_Constant_String
0D6C D0E0       677            pop acc
0D6E D082       677            pop dpl
0D70 D083       677            pop dph
0D72            677    ; Test to see if state 6 is transitioned to
0D72 C002       678            push AR2
0D74 7AFA       678            mov R2, #250
0D76 120039     678            lcall ?Wait_Milli_Seconds
0D79 D002       678            pop AR2
0D7B C002       679            push AR2
0D7D 7AFA       679            mov R2, #250
0D7F 120039     679            lcall ?Wait_Milli_Seconds
0D82 D002       679            pop AR2
0D84 C002       680            push AR2
0D86 7AFA       680            mov R2, #250
0D88 120039     680            lcall ?Wait_Milli_Seconds
0D8B D002       680            pop AR2
0D8D C002       681            push AR2
0D8F 7AFA       681            mov R2, #250
0D91 120039     681            lcall ?Wait_Milli_Seconds
0D94 D002       681            pop AR2
0D96 E4         682     clr a
0D97 F538       683     mov run_time_sec, a
0D99 F539       684     mov state_time, a
0D9B D2CA       685     setb TR2
0D9D 75550A     686     mov state, #10
0DA0 02085A     687     ljmp forever
0DA3            688     
0DA3            689   state10:
0DA3            690   
0DA3            691                    ; 10 state number    11 next state
0DA3 E555       691       mov a, state
0DA5 B40A02     691       cjne a, #10, skipstate170
0DA8 8003       691            sjmp no_skip_state170
0DAA            691   skipstate170:
0DAA 020EB3     691       ljmp state11
0DAD            691   no_skip_state170:
0DAD            692            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0DAD 208020     692            jb CYCLE_BUTTON, no_button_pressed171
0DB0 C002       692            push AR2
0DB2 7A32       692            mov R2, #50
0DB4 120039     692            lcall ?Wait_Milli_Seconds
0DB7 D002       692            pop AR2
0DB9 208014     692            jb CYCLE_BUTTON, no_button_pressed171
0DBC 3080FD     692            jnb CYCLE_BUTTON, $
0DBF            692            
0DBF 755511     692            mov state, #17
0DC2 7401       692            mov a, #0x01
0DC4 120083     692            lcall ?WriteCommand
0DC7 C002       692            push AR2
0DC9 7A02       692            mov R2, #2
0DCB 120039     692            lcall ?Wait_Milli_Seconds
0DCE D002       692            pop AR2
0DD0            692   no_button_pressed171:
0DD0            692   
0DD0 C202       693            clr pwm_on                      ;100% pwm
0DD2 D2B7       694            setb SSR_OUT            ; for 100% power
0DD4            695            ; MAC (Ramp2Soak:    Constant string for the first line on LCD           current_temp: Temperature                      run_time_sec: Time )
0DD4 C0E0       695            push acc
0DD6 7401       695            mov a, #1
0DD8 14         695            dec a
0DD9 1200C1     695            lcall ?Set_Cursor_1 ; Select column and row
0DDC D0E0       695            pop acc
0DDE C083       695            push dph
0DE0 C082       695            push dpl
0DE2 C0E0       695            push acc
0DE4 900550     695            mov dptr, #Ramp2Soak
0DE7 1200B4     695            lcall ?Send_Constant_String
0DEA D0E0       695            pop acc
0DEC D082       695            pop dpl
0DEE D083       695            pop dph
0DF0            695     
0DF0 C0E0       695            push acc
0DF2 7401       695            mov a, #1
0DF4 14         695            dec a
0DF5 1200BF     695            lcall ?Set_Cursor_2 ; Select column and row
0DF8 D0E0       695            pop acc         ;show temperture
0DFA 85563A     695            mov x+0, current_temp+0 
0DFD 753B00     695            mov x+1, #0
0E00 753C00     695            mov x+2, #0 
0E03 753D00     695            mov x+3, #0
0E06 1200DC     695            lcall hex2bcd
0E09 C000       695            push ar0
0E0B C0E0       695            push acc
0E0D 7420       695            mov a, #' '
0E0F 12007E     695            lcall ?WriteData
0E12 A845       695            mov r0, bcd+1
0E14 E8         695            mov a, r0
0E15 540F       695            anl a, #0fh
0E17 4430       695            orl a, #30h
0E19 12007E     695            lcall ?WriteData
0E1C D0E0       695            pop acc
0E1E D000       695            pop ar0
0E20 C000       695            push ar0
0E22 C0E0       695            push acc
0E24 7420       695            mov a, #' '
0E26 12007E     695            lcall ?WriteData
0E29 A844       695            mov r0, bcd
0E2B E8         695            mov a, r0
0E2C 540F       695            anl a, #0fh
0E2E 4430       695            orl a, #30h
0E30 12007E     695            lcall ?WriteData
0E33 D0E0       695            pop acc
0E35 D000       695            pop ar0
0E37            695   
0E37 C0E0       695            push acc
0E39 740C       695            mov a, #12
0E3B 14         695            dec a
0E3C 1200BF     695            lcall ?Set_Cursor_2 ; Select column and row
0E3F D0E0       695            pop acc         ;display time in seconds TODO: put it in minute and seconds
0E41 85383A     695            mov x+0, run_time_sec+0 
0E44 753B00     695            mov x+1, #0
0E47 753C00     695            mov x+2, #0 
0E4A 753D00     695            mov x+3, #0
0E4D 1200DC     695            lcall hex2bcd
0E50 C000       695            push ar0
0E52 A845       695            mov r0, bcd+1
0E54 1200C6     695            lcall ?Display_BCD
0E57 D000       695            pop ar0
0E59 C000       695            push ar0
0E5B A844       695            mov r0, bcd
0E5D 1200C6     695            lcall ?Display_BCD
0E60 D000       695            pop ar0
0E62 C0E0       695            push acc
0E64 7410       695            mov a, #16
0E66 14         695            dec a
0E67 1200BF     695            lcall ?Set_Cursor_2 ; Select column and row
0E6A D0E0       695            pop acc
0E6C C0E0       695            push acc
0E6E 7473       695            mov a, #'s'
0E70 12007E     695            lcall ?WriteData
0E73 D0E0       695            pop acc
0E75            695     
0E75 C0E0       695            push acc
0E77 7405       695            mov a, #5
0E79 14         695            dec a
0E7A 1200BF     695            lcall ?Set_Cursor_2 ; Select column and row
0E7D D0E0       695            pop acc
0E7F C083       695            push dph
0E81 C082       695            push dpl
0E83 C0E0       695            push acc
0E85 9005E6     695            mov dptr, #Cels
0E88 1200B4     695            lcall ?Send_Constant_String
0E8B D0E0       695            pop acc
0E8D D082       695            pop dpl
0E8F D083       695            pop dph
0E91            695     
0E91            695    
0E91            695            ;display the current stage and current temperature
0E91 30010F     696     jnb one_min_flag, not_one_min      ;check if 60 seconds has passed
0E94 E556       697     mov a, current_temp
0E96 C3         698     clr c
0E97 B43200     699     cjne a, #50, check_thermocouple  ;check if thermocouple degree is bigger than 50
0E9A            700   check_thermocouple:
0E9A 5005       701     jnc not_error   ;if not bigger than 50, c=1, jump to display error
0E9C 755510     702     mov state, #16
0E9F 800F       703     sjmp state10_Loop
0EA1            704     
0EA1            705   not_error:
0EA1 C201       706     clr one_min_flag
0EA3            707   not_one_min:
0EA3 E535       708            mov a, soak_temp 
0EA5 C3         709     clr c 
0EA6 9556       710     subb a, current_temp   ;compare current_temp and soak_temp
0EA8 5006       711     jnc state10_Loop
0EAA            712     
0EAA 75550B     713     mov state, #11
0EAD            714     
0EAD E4         715     clr a
0EAE F539       716            mov state_time, a       ; reset state time to 0 for next state 
0EB0            717     ;--------------------------------------------------------------------;
0EB0            718     ; A short beep
0EB0            719     ;--------------------------------------------------------------------;
0EB0            720   
0EB0            721     ;TODOOOOO     Need to show the values with labels and stuff. Take sample subroutine only prints the number
0EB0            722            
0EB0            723   
0EB0            724   state10_Loop:
0EB0 02085A     725            ljmp forever
0EB3            726                    
0EB3            727   ; Soak Stage             
0EB3            728   state11:
0EB3            729                    ; 11 state number    12 next state
0EB3 E555       729       mov a, state
0EB5 B40B02     729       cjne a, #11, skipstate190
0EB8 8003       729            sjmp no_skip_state190
0EBA            729   skipstate190:
0EBA 020FAF     729       ljmp state12
0EBD            729   no_skip_state190:
0EBD            730            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0EBD 208020     730            jb CYCLE_BUTTON, no_button_pressed191
0EC0 C002       730            push AR2
0EC2 7A32       730            mov R2, #50
0EC4 120039     730            lcall ?Wait_Milli_Seconds
0EC7 D002       730            pop AR2
0EC9 208014     730            jb CYCLE_BUTTON, no_button_pressed191
0ECC 3080FD     730            jnb CYCLE_BUTTON, $
0ECF            730            
0ECF 755511     730            mov state, #17
0ED2 7401       730            mov a, #0x01
0ED4 120083     730            lcall ?WriteCommand
0ED7 C002       730            push AR2
0ED9 7A02       730            mov R2, #2
0EDB 120039     730            lcall ?Wait_Milli_Seconds
0EDE D002       730            pop AR2
0EE0            730   no_button_pressed191:
0EE0            730   
0EE0 D202       731            setb pwm_on                     ;25% pwm
0EE2            732            ; MAC (Soak:    Constant string for the first line on LCD           current_temp: Temperature                   run_time_sec: Time )
0EE2 C0E0       732            push acc
0EE4 7401       732            mov a, #1
0EE6 14         732            dec a
0EE7 1200C1     732            lcall ?Set_Cursor_1 ; Select column and row
0EEA D0E0       732            pop acc
0EEC C083       732            push dph
0EEE C082       732            push dpl
0EF0 C0E0       732            push acc
0EF2 900561     732            mov dptr, #Soak
0EF5 1200B4     732            lcall ?Send_Constant_String
0EF8 D0E0       732            pop acc
0EFA D082       732            pop dpl
0EFC D083       732            pop dph
0EFE            732     
0EFE C0E0       732            push acc
0F00 7401       732            mov a, #1
0F02 14         732            dec a
0F03 1200BF     732            lcall ?Set_Cursor_2 ; Select column and row
0F06 D0E0       732            pop acc         ;show temperture
0F08 85563A     732            mov x+0, current_temp+0 
0F0B 753B00     732            mov x+1, #0
0F0E 753C00     732            mov x+2, #0 
0F11 753D00     732            mov x+3, #0
0F14 1200DC     732            lcall hex2bcd
0F17 C000       732            push ar0
0F19 C0E0       732            push acc
0F1B 7420       732            mov a, #' '
0F1D 12007E     732            lcall ?WriteData
0F20 A845       732            mov r0, bcd+1
0F22 E8         732            mov a, r0
0F23 540F       732            anl a, #0fh
0F25 4430       732            orl a, #30h
0F27 12007E     732            lcall ?WriteData
0F2A D0E0       732            pop acc
0F2C D000       732            pop ar0
0F2E C000       732            push ar0
0F30 C0E0       732            push acc
0F32 7420       732            mov a, #' '
0F34 12007E     732            lcall ?WriteData
0F37 A844       732            mov r0, bcd
0F39 E8         732            mov a, r0
0F3A 540F       732            anl a, #0fh
0F3C 4430       732            orl a, #30h
0F3E 12007E     732            lcall ?WriteData
0F41 D0E0       732            pop acc
0F43 D000       732            pop ar0
0F45            732   
0F45 C0E0       732            push acc
0F47 740C       732            mov a, #12
0F49 14         732            dec a
0F4A 1200BF     732            lcall ?Set_Cursor_2 ; Select column and row
0F4D D0E0       732            pop acc         ;display time in seconds TODO: put it in minute and seconds
0F4F 85383A     732            mov x+0, run_time_sec+0 
0F52 753B00     732            mov x+1, #0
0F55 753C00     732            mov x+2, #0 
0F58 753D00     732            mov x+3, #0
0F5B 1200DC     732            lcall hex2bcd
0F5E C000       732            push ar0
0F60 A845       732            mov r0, bcd+1
0F62 1200C6     732            lcall ?Display_BCD
0F65 D000       732            pop ar0
0F67 C000       732            push ar0
0F69 A844       732            mov r0, bcd
0F6B 1200C6     732            lcall ?Display_BCD
0F6E D000       732            pop ar0
0F70 C0E0       732            push acc
0F72 7410       732            mov a, #16
0F74 14         732            dec a
0F75 1200BF     732            lcall ?Set_Cursor_2 ; Select column and row
0F78 D0E0       732            pop acc
0F7A C0E0       732            push acc
0F7C 7473       732            mov a, #'s'
0F7E 12007E     732            lcall ?WriteData
0F81 D0E0       732            pop acc
0F83            732     
0F83 C0E0       732            push acc
0F85 7405       732            mov a, #5
0F87 14         732            dec a
0F88 1200BF     732            lcall ?Set_Cursor_2 ; Select column and row
0F8B D0E0       732            pop acc
0F8D C083       732            push dph
0F8F C082       732            push dpl
0F91 C0E0       732            push acc
0F93 9005E6     732            mov dptr, #Cels
0F96 1200B4     732            lcall ?Send_Constant_String
0F99 D0E0       732            pop acc
0F9B D082       732            pop dpl
0F9D D083       732            pop dph
0F9F            732     
0F9F            732            ;display the current stage and current temperature
0F9F E539       733            mov a, state_time 
0FA1 C3         734            clr c
0FA2 9534       735            subb a, soak_seconds 
0FA4            736   ;        jnc time_not_equal
0FA4 5006       737            jnc     State11_Loop
0FA6            738     
0FA6 75550C     739     mov state, #12 ;if time is equal set state to 12
0FA9 E4         740     clr a
0FAA F539       741            mov state_time, a       ; reset state time to 0 for next state 
0FAC            742     ;--------------------------------------------------------------------;
0FAC            743     ; A short beep
0FAC            744     ;--------------------------------------------------------------------;
0FAC            745   ;time_not_equal:
0FAC            746     ;compare temp                                                                                                  pattern to check temp:                                                                 ____     
0FAC            747   ;  mov a, current_temp ;                                                                                                                                                                                         ____      /    \____/
0FAC            748   ;        clr c                                                           ;                                                                                                                                                                                                /    \____/     
0FAC            749   ;        subb a, soak_temp       ;                                                                                                               ____/
0FAC            750   ;        jnc temp_too_low                
0FAC            751   ;        sjmp State11_done:      ;                                                                       checks every temperature twice for the right one
0FAC            752                                                                                                                                                            
0FAC            753   ;temp_not_low:           
0FAC            754   ;        inc current_temp
0FAC            755   ;  inc current temp
0FAC            756   ;        mov a, current_temp 
0FAC            757   ;        clr c
0FAC            758   ;        subb a, soak_temp 
0FAC            759   ;        jnc temp_too_high
0FAC            760   ;  sjmp State11_done:
0FAC            761   
0FAC            762   ;temp_too_high:  
0FAC            763   ;  dec current_temp
0FAC            764   
0FAC            765   State11_Loop:
0FAC 02085A     766     ljmp forever
0FAF            767     
0FAF            768                    
0FAF            769   ; Ramp to Reflow Stage, compare current_temp with reflow_temp            
0FAF            770   state12:
0FAF            771                    ; 12 state number    13 next state
0FAF E555       771       mov a, state
0FB1 B40C02     771       cjne a, #12, skipstate210
0FB4 8003       771            sjmp no_skip_state210
0FB6            771   skipstate210:
0FB6 0210AD     771       ljmp state13
0FB9            771   no_skip_state210:
0FB9            772            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
0FB9 208020     772            jb CYCLE_BUTTON, no_button_pressed211
0FBC C002       772            push AR2
0FBE 7A32       772            mov R2, #50
0FC0 120039     772            lcall ?Wait_Milli_Seconds
0FC3 D002       772            pop AR2
0FC5 208014     772            jb CYCLE_BUTTON, no_button_pressed211
0FC8 3080FD     772            jnb CYCLE_BUTTON, $
0FCB            772            
0FCB 755511     772            mov state, #17
0FCE 7401       772            mov a, #0x01
0FD0 120083     772            lcall ?WriteCommand
0FD3 C002       772            push AR2
0FD5 7A02       772            mov R2, #2
0FD7 120039     772            lcall ?Wait_Milli_Seconds
0FDA D002       772            pop AR2
0FDC            772   no_button_pressed211:
0FDC            772   
0FDC C202       773     clr pwm_on
0FDE D2B7       774     setb SSR_OUT   ;100% power on
0FE0            775            ; MAC (Ramp2Reflow:    Constant string for the first line on LCD           current_temp: Temperature                    run_time_sec: Time )
0FE0 C0E0       775            push acc
0FE2 7401       775            mov a, #1
0FE4 14         775            dec a
0FE5 1200C1     775            lcall ?Set_Cursor_1 ; Select column and row
0FE8 D0E0       775            pop acc
0FEA C083       775            push dph
0FEC C082       775            push dpl
0FEE C0E0       775            push acc
0FF0 90053F     775            mov dptr, #Ramp2Reflow
0FF3 1200B4     775            lcall ?Send_Constant_String
0FF6 D0E0       775            pop acc
0FF8 D082       775            pop dpl
0FFA D083       775            pop dph
0FFC            775     
0FFC C0E0       775            push acc
0FFE 7401       775            mov a, #1
1000 14         775            dec a
1001 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
1004 D0E0       775            pop acc
1006            775            ;show temperture
1006 85563A     775            mov x+0, current_temp+0 
1009 753B00     775            mov x+1, #0
100C 753C00     775            mov x+2, #0 
100F 753D00     775            mov x+3, #0
1012 1200DC     775            lcall hex2bcd
1015 C000       775            push ar0
1017 C0E0       775            push acc
1019 7420       775            mov a, #' '
101B 12007E     775            lcall ?WriteData
101E A845       775            mov r0, bcd+1
1020 E8         775            mov a, r0
1021 540F       775            anl a, #0fh
1023 4430       775            orl a, #30h
1025 12007E     775            lcall ?WriteData
1028 D0E0       775            pop acc
102A D000       775            pop ar0
102C C000       775            push ar0
102E C0E0       775            push acc
1030 7420       775            mov a, #' '
1032 12007E     775            lcall ?WriteData
1035 A844       775            mov r0, bcd
1037 E8         775            mov a, r0
1038 540F       775            anl a, #0fh
103A 4430       775            orl a, #30h
103C 12007E     775            lcall ?WriteData
103F D0E0       775            pop acc
1041 D000       775            pop ar0
1043            775   
1043 C0E0       775            push acc
1045 740C       775            mov a, #12
1047 14         775            dec a
1048 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
104B D0E0       775            pop acc         ;display time in seconds TODO: put it in minute and seconds
104D 85383A     775            mov x+0, run_time_sec+0 
1050 753B00     775            mov x+1, #0
1053 753C00     775            mov x+2, #0 
1056 753D00     775            mov x+3, #0
1059 1200DC     775            lcall hex2bcd
105C C000       775            push ar0
105E A845       775            mov r0, bcd+1
1060 1200C6     775            lcall ?Display_BCD
1063 D000       775            pop ar0
1065 C000       775            push ar0
1067 A844       775            mov r0, bcd
1069 1200C6     775            lcall ?Display_BCD
106C D000       775            pop ar0
106E C0E0       775            push acc
1070 7410       775            mov a, #16
1072 14         775            dec a
1073 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
1076 D0E0       775            pop acc
1078 C0E0       775            push acc
107A 7473       775            mov a, #'s'
107C 12007E     775            lcall ?WriteData
107F D0E0       775            pop acc
1081            775     
1081 C0E0       775            push acc
1083 7405       775            mov a, #5
1085 14         775            dec a
1086 1200BF     775            lcall ?Set_Cursor_2 ; Select column and row
1089 D0E0       775            pop acc
108B C083       775            push dph
108D C082       775            push dpl
108F C0E0       775            push acc
1091 9005E6     775            mov dptr, #Cels
1094 1200B4     775            lcall ?Send_Constant_String
1097 D0E0       775            pop acc
1099 D082       775            pop dpl
109B D083       775            pop dph
109D            775     
109D            775            ;display the current, temperature and running time
109D E537       776     mov a, reflow_temp
109F C3         777     clr c
10A0 9556       778     subb a, current_temp
10A2 5006       779     jnc State12Loop
10A4            780     
10A4 75550D     781            mov state, #13
10A7 E4         782     clr a
10A8 F539       783            mov state_time, a       ; reset state time to 0 for next state 
10AA            784     ;--------------------------------------------------------------------;
10AA            785     ; A short beep
10AA            786     ;--------------------------------------------------------------------;
10AA            787   State12Loop:
10AA 02085A     788     ljmp forever
10AD            789   
10AD            790   ; Reflow stage, compare reflow_seconds to current time, move to cooling stage when complete (Still need beep code)
10AD            791   state13:
10AD            792                    ; 13 state number    14 next state
10AD E555       792       mov a, state
10AF B40D02     792       cjne a, #13, skipstate230
10B2 8003       792            sjmp no_skip_state230
10B4            792   skipstate230:
10B4 0211A9     792       ljmp state14
10B7            792   no_skip_state230:
10B7            793            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
10B7 208020     793            jb CYCLE_BUTTON, no_button_pressed231
10BA C002       793            push AR2
10BC 7A32       793            mov R2, #50
10BE 120039     793            lcall ?Wait_Milli_Seconds
10C1 D002       793            pop AR2
10C3 208014     793            jb CYCLE_BUTTON, no_button_pressed231
10C6 3080FD     793            jnb CYCLE_BUTTON, $
10C9            793            
10C9 755511     793            mov state, #17
10CC 7401       793            mov a, #0x01
10CE 120083     793            lcall ?WriteCommand
10D1 C002       793            push AR2
10D3 7A02       793            mov R2, #2
10D5 120039     793            lcall ?Wait_Milli_Seconds
10D8 D002       793            pop AR2
10DA            793   no_button_pressed231:
10DA            793   
10DA D202       794     setb pwm_on ; Set PWM to 25% power
10DC            795            ; MAC (Reflow:    Constant string for the first line on LCD           current_temp: Temperature                         run_time_sec: Time )
10DC C0E0       795            push acc
10DE 7401       795            mov a, #1
10E0 14         795            dec a
10E1 1200C1     795            lcall ?Set_Cursor_1 ; Select column and row
10E4 D0E0       795            pop acc
10E6 C083       795            push dph
10E8 C082       795            push dpl
10EA C0E0       795            push acc
10EC 900572     795            mov dptr, #Reflow
10EF 1200B4     795            lcall ?Send_Constant_String
10F2 D0E0       795            pop acc
10F4 D082       795            pop dpl
10F6 D083       795            pop dph
10F8            795     
10F8 C0E0       795            push acc
10FA 7401       795            mov a, #1
10FC 14         795            dec a
10FD 1200BF     795            lcall ?Set_Cursor_2 ; Select column and row
1100 D0E0       795            pop acc         ;show temperture
1102 85563A     795            mov x+0, current_temp+0 
1105 753B00     795            mov x+1, #0
1108 753C00     795            mov x+2, #0 
110B 753D00     795            mov x+3, #0
110E 1200DC     795            lcall hex2bcd
1111 C000       795            push ar0
1113 C0E0       795            push acc
1115 7420       795            mov a, #' '
1117 12007E     795            lcall ?WriteData
111A A845       795            mov r0, bcd+1
111C E8         795            mov a, r0
111D 540F       795            anl a, #0fh
111F 4430       795            orl a, #30h
1121 12007E     795            lcall ?WriteData
1124 D0E0       795            pop acc
1126 D000       795            pop ar0
1128 C000       795            push ar0
112A C0E0       795            push acc
112C 7420       795            mov a, #' '
112E 12007E     795            lcall ?WriteData
1131 A844       795            mov r0, bcd
1133 E8         795            mov a, r0
1134 540F       795            anl a, #0fh
1136 4430       795            orl a, #30h
1138 12007E     795            lcall ?WriteData
113B D0E0       795            pop acc
113D D000       795            pop ar0
113F            795   
113F C0E0       795            push acc
1141 740C       795            mov a, #12
1143 14         795            dec a
1144 1200BF     795            lcall ?Set_Cursor_2 ; Select column and row
1147 D0E0       795            pop acc         ;display time in seconds TODO: put it in minute and seconds
1149 85383A     795            mov x+0, run_time_sec+0 
114C 753B00     795            mov x+1, #0
114F 753C00     795            mov x+2, #0 
1152 753D00     795            mov x+3, #0
1155 1200DC     795            lcall hex2bcd
1158 C000       795            push ar0
115A A845       795            mov r0, bcd+1
115C 1200C6     795            lcall ?Display_BCD
115F D000       795            pop ar0
1161 C000       795            push ar0
1163 A844       795            mov r0, bcd
1165 1200C6     795            lcall ?Display_BCD
1168 D000       795            pop ar0
116A C0E0       795            push acc
116C 7410       795            mov a, #16
116E 14         795            dec a
116F 1200BF     795            lcall ?Set_Cursor_2 ; Select column and row
1172 D0E0       795            pop acc
1174 C0E0       795            push acc
1176 7473       795            mov a, #'s'
1178 12007E     795            lcall ?WriteData
117B D0E0       795            pop acc
117D            795     
117D C0E0       795            push acc
117F 7405       795            mov a, #5
1181 14         795            dec a
1182 1200BF     795            lcall ?Set_Cursor_2 ; Select column and row
1185 D0E0       795            pop acc
1187 C083       795            push dph
1189 C082       795            push dpl
118B C0E0       795            push acc
118D 9005E6     795            mov dptr, #Cels
1190 1200B4     795            lcall ?Send_Constant_String
1193 D0E0       795            pop acc
1195 D082       795            pop dpl
1197 D083       795            pop dph
1199            795     
1199            795            ;display the current stage and current temperature
1199 E536       796     mov a, reflow_seconds
119B C3         797     clr c
119C 9539       798     subb a, state_time 
119E 5006       799     jnc state13Loop ; Compare if time elapsed = reflow time
11A0            800     
11A0 75550E     801     mov state, #14         ; Reflow done, move to cooling
11A3 E4         802     clr a
11A4 F539       803     mov state_time, a ; Reset state time variable
11A6            804   state13Loop:
11A6 02085A     805            ljmp forever
11A9            806   
11A9            807   ; Cooling stage, power is set to 0, finish and sound multiple beeps when temperature is below 60
11A9            808   state14:
11A9            809                    ; 14 state number    15 next state
11A9 E555       809       mov a, state
11AB B40E02     809       cjne a, #14, skipstate250
11AE 8003       809            sjmp no_skip_state250
11B0            809   skipstate250:
11B0 0212A6     809       ljmp state15
11B3            809   no_skip_state250:
11B3            810            ; MAC (CYCLE_BUTTON:    Constant string for the button name           17: state to jump to if the button is pressed )
11B3 208020     810            jb CYCLE_BUTTON, no_button_pressed251
11B6 C002       810            push AR2
11B8 7A32       810            mov R2, #50
11BA 120039     810            lcall ?Wait_Milli_Seconds
11BD D002       810            pop AR2
11BF 208014     810            jb CYCLE_BUTTON, no_button_pressed251
11C2 3080FD     810            jnb CYCLE_BUTTON, $
11C5            810            
11C5 755511     810            mov state, #17
11C8 7401       810            mov a, #0x01
11CA 120083     810            lcall ?WriteCommand
11CD C002       810            push AR2
11CF 7A02       810            mov R2, #2
11D1 120039     810            lcall ?Wait_Milli_Seconds
11D4 D002       810            pop AR2
11D6            810   no_button_pressed251:
11D6            810   
11D6 C202       811       clr pwm_on
11D8 C203       811       clr pwm_high
11DA C2B7       811       clr SSR_OUT
11DC            811   
11DC            812            ; MAC (Cooling:    Constant string for the first line on LCD           current_temp: Temperature                        run_time_sec: Time )
11DC C0E0       812            push acc
11DE 7401       812            mov a, #1
11E0 14         812            dec a
11E1 1200C1     812            lcall ?Set_Cursor_1 ; Select column and row
11E4 D0E0       812            pop acc
11E6 C083       812            push dph
11E8 C082       812            push dpl
11EA C0E0       812            push acc
11EC 900583     812            mov dptr, #Cooling
11EF 1200B4     812            lcall ?Send_Constant_String
11F2 D0E0       812            pop acc
11F4 D082       812            pop dpl
11F6 D083       812            pop dph
11F8            812     
11F8 C0E0       812            push acc
11FA 7401       812            mov a, #1
11FC 14         812            dec a
11FD 1200BF     812            lcall ?Set_Cursor_2 ; Select column and row
1200 D0E0       812            pop acc         ;show temperture
1202 85563A     812            mov x+0, current_temp+0 
1205 753B00     812            mov x+1, #0
1208 753C00     812            mov x+2, #0 
120B 753D00     812            mov x+3, #0
120E 1200DC     812            lcall hex2bcd
1211 C000       812            push ar0
1213 C0E0       812            push acc
1215 7420       812            mov a, #' '
1217 12007E     812            lcall ?WriteData
121A A845       812            mov r0, bcd+1
121C E8         812            mov a, r0
121D 540F       812            anl a, #0fh
121F 4430       812            orl a, #30h
1221 12007E     812            lcall ?WriteData
1224 D0E0       812            pop acc
1226 D000       812            pop ar0
1228 C000       812            push ar0
122A C0E0       812            push acc
122C 7420       812            mov a, #' '
122E 12007E     812            lcall ?WriteData
1231 A844       812            mov r0, bcd
1233 E8         812            mov a, r0
1234 540F       812            anl a, #0fh
1236 4430       812            orl a, #30h
1238 12007E     812            lcall ?WriteData
123B D0E0       812            pop acc
123D D000       812            pop ar0
123F            812   
123F C0E0       812            push acc
1241 740C       812            mov a, #12
1243 14         812            dec a
1244 1200BF     812            lcall ?Set_Cursor_2 ; Select column and row
1247 D0E0       812            pop acc         ;display time in seconds TODO: put it in minute and seconds
1249 85383A     812            mov x+0, run_time_sec+0 
124C 753B00     812            mov x+1, #0
124F 753C00     812            mov x+2, #0 
1252 753D00     812            mov x+3, #0
1255 1200DC     812            lcall hex2bcd
1258 C000       812            push ar0
125A A845       812            mov r0, bcd+1
125C 1200C6     812            lcall ?Display_BCD
125F D000       812            pop ar0
1261 C000       812            push ar0
1263 A844       812            mov r0, bcd
1265 1200C6     812            lcall ?Display_BCD
1268 D000       812            pop ar0
126A C0E0       812            push acc
126C 7410       812            mov a, #16
126E 14         812            dec a
126F 1200BF     812            lcall ?Set_Cursor_2 ; Select column and row
1272 D0E0       812            pop acc
1274 C0E0       812            push acc
1276 7473       812            mov a, #'s'
1278 12007E     812            lcall ?WriteData
127B D0E0       812            pop acc
127D            812     
127D C0E0       812            push acc
127F 7405       812            mov a, #5
1281 14         812            dec a
1282 1200BF     812            lcall ?Set_Cursor_2 ; Select column and row
1285 D0E0       812            pop acc
1287 C083       812            push dph
1289 C082       812            push dpl
128B C0E0       812            push acc
128D 9005E6     812            mov dptr, #Cels
1290 1200B4     812            lcall ?Send_Constant_String
1293 D0E0       812            pop acc
1295 D082       812            pop dpl
1297 D083       812            pop dph
1299            812     
1299            812    
1299            812   
1299 E556       813     mov a, current_temp
129B C3         814     clr c
129C 943C       815     subb a, #60
129E 5003       816     jnc state14loop ; If more than 60 degrees, not safe to touch yet
12A0            817     
12A0            818   SafeBeep: ;If temp is safe then beeeeepppppppppppp
12A0            819     ;--------------------------------------------------------------------;
12A0            820     ; BEEEEEEEEEEEEEEEEEEEEEEPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
12A0            821     ;--------------------------------------------------------------------;
12A0 75550F     822     mov state, #15 ; Go to done state
12A3            823   state14loop:
12A3 02085A     824            ljmp forever
12A6            825     
12A6            826   ; Cooling completed state, accessed when temperature has cooled down to below 60C
12A6            827   state15:   
12A6            828                    ; 15 state number    16 next state
12A6 E555       828       mov a, state
12A8 B40F02     828       cjne a, #15, skipstate271
12AB 8003       828            sjmp no_skip_state271
12AD            828   skipstate271:
12AD 021310     828       ljmp state16
12B0            828   no_skip_state271:
12B0 C2CA       829     clr TR2
12B2 C0E0       830            push acc
12B4 7401       830            mov a, #1
12B6 14         830            dec a
12B7 1200C1     830            lcall ?Set_Cursor_1 ; Select column and row
12BA D0E0       830            pop acc
12BC C083       830            push dph
12BE C082       830            push dpl
12C0 C0E0       830            push acc
12C2 900594     830            mov dptr, #CompleteMsg
12C5 1200B4     830            lcall ?Send_Constant_String
12C8 D0E0       830            pop acc
12CA D082       830            pop dpl
12CC D083       830            pop dph
12CE C0E0       830            push acc
12D0 7401       830            mov a, #1
12D2 14         830            dec a
12D3 1200BF     830            lcall ?Set_Cursor_2 ; Select column and row
12D6 D0E0       830            pop acc
12D8            830   
12D8 C083       830            push dph
12DA C082       830            push dpl
12DC C0E0       830            push acc
12DE 9005C7     830            mov dptr, #ConfirmMsg
12E1 1200B4     830            lcall ?Send_Constant_String
12E4 D0E0       830            pop acc
12E6 D082       830            pop dpl
12E8 D083       830            pop dph
12EA            830   
12EA            831            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
12EA 208420     831            jb DEC_BUTTON, no_button_pressed277
12ED C002       831            push AR2
12EF 7A32       831            mov R2, #50
12F1 120039     831            lcall ?Wait_Milli_Seconds
12F4 D002       831            pop AR2
12F6 208414     831            jb DEC_BUTTON, no_button_pressed277
12F9 3084FD     831            jnb DEC_BUTTON, $
12FC            831            
12FC 755500     831            mov state, #0
12FF 7401       831            mov a, #0x01
1301 120083     831            lcall ?WriteCommand
1304 C002       831            push AR2
1306 7A02       831            mov R2, #2
1308 120039     831            lcall ?Wait_Milli_Seconds
130B D002       831            pop AR2
130D            831   no_button_pressed277:
130D            831   
130D 02085A     832     ljmp forever
1310            833     
1310            834   state16:                         ;display error message
1310            835                    ; 16 state number    17 next state
1310 E555       835       mov a, state
1312 B41002     835       cjne a, #16, skipstate281
1315 8003       835            sjmp no_skip_state281
1317            835   skipstate281:
1317 021380     835       ljmp state17
131A            835   no_skip_state281:
131A C2CA       836     clr TR2
131C C202       837       clr pwm_on
131E C203       837       clr pwm_high
1320 C2B7       837       clr SSR_OUT
1322 C0E0       838            push acc
1324 7401       838            mov a, #1
1326 14         838            dec a
1327 1200C1     838            lcall ?Set_Cursor_1 ; Select column and row
132A D0E0       838            pop acc
132C C083       838            push dph
132E C082       838            push dpl
1330 C0E0       838            push acc
1332 9005A5     838            mov dptr, #Lessthan50ErrorMsg
1335 1200B4     838            lcall ?Send_Constant_String
1338 D0E0       838            pop acc
133A D082       838            pop dpl
133C D083       838            pop dph
133E C0E0       838            push acc
1340 7401       838            mov a, #1
1342 14         838            dec a
1343 1200BF     838            lcall ?Set_Cursor_2 ; Select column and row
1346 D0E0       838            pop acc
1348 C083       838            push dph
134A C082       838            push dpl
134C C0E0       838            push acc
134E 9005C7     838            mov dptr, #ConfirmMsg
1351 1200B4     838            lcall ?Send_Constant_String
1354 D0E0       838            pop acc
1356 D082       838            pop dpl
1358 D083       838            pop dph         
135A            839            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
135A 208420     839            jb DEC_BUTTON, no_button_pressed288
135D C002       839            push AR2
135F 7A32       839            mov R2, #50
1361 120039     839            lcall ?Wait_Milli_Seconds
1364 D002       839            pop AR2
1366 208414     839            jb DEC_BUTTON, no_button_pressed288
1369 3084FD     839            jnb DEC_BUTTON, $
136C            839            
136C 755500     839            mov state, #0
136F 7401       839            mov a, #0x01
1371 120083     839            lcall ?WriteCommand
1374 C002       839            push AR2
1376 7A02       839            mov R2, #2
1378 120039     839            lcall ?Wait_Milli_Seconds
137B D002       839            pop AR2
137D            839   no_button_pressed288:
137D            839   
137D 02085A     840     ljmp forever
1380            841     
1380            842   ; Force Quit state, accessed when STOP button is pressed during any reflow stage
1380            843   state17:
1380 C2CA       844            clr TR2
1382 C202       845       clr pwm_on
1384 C203       845       clr pwm_high
1386 C2B7       845       clr SSR_OUT
1388            845   
1388 C0E0       846            push acc
138A 7401       846            mov a, #1
138C 14         846            dec a
138D 1200C1     846            lcall ?Set_Cursor_1 ; Select column and row
1390 D0E0       846            pop acc
1392 C083       846            push dph
1394 C082       846            push dpl
1396 C0E0       846            push acc
1398 9005B6     846            mov dptr, #AbortMsg
139B 1200B4     846            lcall ?Send_Constant_String
139E D0E0       846            pop acc
13A0 D082       846            pop dpl
13A2 D083       846            pop dph
13A4 C0E0       846            push acc
13A6 7401       846            mov a, #1
13A8 14         846            dec a
13A9 1200BF     846            lcall ?Set_Cursor_2 ; Select column and row
13AC D0E0       846            pop acc
13AE C083       846            push dph
13B0 C082       846            push dpl
13B2 C0E0       846            push acc
13B4 9005C7     846            mov dptr, #ConfirmMsg
13B7 1200B4     846            lcall ?Send_Constant_String
13BA D0E0       846            pop acc
13BC D082       846            pop dpl
13BE D083       846            pop dph
13C0            847            ; MAC (DEC_BUTTON:    Constant string for the button name           0: state to jump to if the button is pressed )
13C0 208420     847            jb DEC_BUTTON, no_button_pressed298
13C3 C002       847            push AR2
13C5 7A32       847            mov R2, #50
13C7 120039     847            lcall ?Wait_Milli_Seconds
13CA D002       847            pop AR2
13CC 208414     847            jb DEC_BUTTON, no_button_pressed298
13CF 3084FD     847            jnb DEC_BUTTON, $
13D2            847            
13D2 755500     847            mov state, #0
13D5 7401       847            mov a, #0x01
13D7 120083     847            lcall ?WriteCommand
13DA C002       847            push AR2
13DC 7A02       847            mov R2, #2
13DE 120039     847            lcall ?Wait_Milli_Seconds
13E1 D002       847            pop AR2
13E3            847   no_button_pressed298:
13E3            847   
13E3 02085A     848     ljmp forever
13E6            849            
13E6            850   
13E6            851   
13E6            852   end ;-;
