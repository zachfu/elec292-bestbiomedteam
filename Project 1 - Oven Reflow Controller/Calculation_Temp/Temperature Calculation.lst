                 -1   $MODLP52
0000              1   ;  MODLP52: Register definition for Atmel's AT89LP52
0000              2   ;
0000              3   ;   Copyright (C) 2011-2015  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19   ;--------------------------------------------------------
0000             20   ; Special Function Registers
0000             21   ;--------------------------------------------------------
0000             22   P0             DATA 0x80
0000             23   P1             DATA 0x90
0000             24   P2             DATA 0xa0
0000             25   P3             DATA 0xb0
0000             26   P4             DATA 0xc0
0000             27   PMOD           DATA 0xc1
0000             28   PSW            DATA 0xd0
0000             29   ACC            DATA 0xe0
0000             30   B              DATA 0xf0
0000             31   SP             DATA 0x81
0000             32   DPL            DATA 0x82
0000             33   DPH            DATA 0x83
0000             34   DP0L           DATA 0x82
0000             35   DP0H           DATA 0x83
0000             36   DP1L           DATA 0x84
0000             37   DP1H           DATA 0x85
0000             38   AUXR           DATA 0x8e
0000             39   AUXR1          DATA 0xa2
0000             40   DPCF           DATA 0xa2
0000             41   TCON           DATA 0x88
0000             42   TMOD           DATA 0x89
0000             43   T2CON          DATA 0xc8
0000             44   T2MOD          DATA 0xc9
0000             45   TL0            DATA 0x8a
0000             46   TL1            DATA 0x8b
0000             47   TL2            DATA 0xcc
0000             48   TH0            DATA 0x8c
0000             49   TH1            DATA 0x8d
0000             50   TH2            DATA 0xcd
0000             51   TCONB          DATA 0x91
0000             52   RCAP2L         DATA 0xca
0000             53   RCAP2H         DATA 0xcb
0000             54   WDTRST         DATA 0xa6
0000             55   WDTCON         DATA 0xa7
0000             56   SCON           DATA 0x98
0000             57   SBUF           DATA 0x99
0000             58   SADEN          DATA 0xb9
0000             59   SADDR          DATA 0xa9
0000             60   IE             DATA 0xa8
0000             61   IP             DATA 0xb8
0000             62   IPH            DATA 0xb7
0000             63   PCON           DATA 0x87
0000             64   CLKREG         DATA 0x8f
0000             65   MEMCON         DATA 0x96
0000             66   ;--------------------------------------------------------
0000             67   ; special function bits
0000             68   ;--------------------------------------------------------
0000             69   SCK            BIT 0x97
0000             70   MISO           BIT 0x96
0000             71   MOSI           BIT 0x95
0000             72   T2EX           BIT 0x91
0000             73   T2             BIT 0x90
0000             74   RD             BIT 0xb7
0000             75   WR             BIT 0xb6
0000             76   T1             BIT 0xb5
0000             77   T0             BIT 0xb4
0000             78   INT1           BIT 0xb3
0000             79   INT0           BIT 0xb2
0000             80   TXD            BIT 0xb1
0000             81   RXD            BIT 0xb0
0000             82   XTAL2          BIT 0xc7
0000             83   XTAL1          BIT 0xc6
0000             84   PSEN           BIT 0xc5
0000             85   ALE            BIT 0xc4
0000             86   CY             BIT 0xd7
0000             87   AC             BIT 0xd6
0000             88   F0             BIT 0xd5
0000             89   RS1            BIT 0xd4
0000             90   RS0            BIT 0xd3
0000             91   OV             BIT 0xd2
0000             92   UD             BIT 0xd1
0000             93   P              BIT 0xd0
0000             94   TF1            BIT 0x8f
0000             95   TR1            BIT 0x8e
0000             96   TF0            BIT 0x8d
0000             97   TR0            BIT 0x8c
0000             98   IE1            BIT 0x8b
0000             99   IT1            BIT 0x8a
0000            100   IE0            BIT 0x89
0000            101   IT0            BIT 0x88
0000            102   TF2            BIT 0xcf
0000            103   EXF2           BIT 0xce
0000            104   RCLK           BIT 0xcd
0000            105   TCLK           BIT 0xcc
0000            106   EXEN2          BIT 0xcb
0000            107   TR2            BIT 0xca
0000            108   C_T2           BIT 0xc9
0000            109   CP_RL2         BIT 0xc8
0000            110   SM0            BIT 0x9f
0000            111   FE             BIT 0x9f
0000            112   SM1            BIT 0x9e
0000            113   SM2            BIT 0x9d
0000            114   REN            BIT 0x9c
0000            115   TB8            BIT 0x9b
0000            116   RB8            BIT 0x9a
0000            117   TI             BIT 0x99
0000            118   RI             BIT 0x98
0000            119   EA             BIT 0xaf
0000            120   ET2            BIT 0xad
0000            121   ES             BIT 0xac
0000            122   ET1            BIT 0xab
0000            123   EX1            BIT 0xaa
0000            124   ET0            BIT 0xa9
0000            125   EX0            BIT 0xa8
0000            126   PT2            BIT 0xbd
0000            127   PS             BIT 0xbc
0000            128   PT1            BIT 0xbb
0000            129   PX1            BIT 0xba
0000            130   PT0            BIT 0xb9
0000            131   PX0            BIT 0xb8
0000              2   org 0000H
0000 020389       3      ljmp Init
0003              4   
0003              5   CLK  EQU 22118400
0003              6   BAUD equ 115200
0003              7   T1LOAD equ (0x100-(CLK/(16*BAUD)))
0003              8   TIMER0_RATE        EQU 1000
0003              9   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             10   
0003             11   CE_ADC EQU P2.0
0003             12   MY_MOSI EQU P2.1
0003             13   MY_MISO EQU P2.2
0003             14   MY_SCLK EQU P2.3
0003             15   BOOT_BUTTON EQU P4.5
0003             16   LCD_RS equ P1.2
0003             17   LCD_RW equ P1.3
0003             18   LCD_E  equ P1.4
0003             19   LCD_D4 equ P3.2
0003             20   LCD_D5 equ P3.3
0003             21   LCD_D6 equ P3.4
0003             22   LCD_D7 equ P3.5
0003             23   SOUND_OUT equ P2.7
0003             24   GREEN  equ P2.6
0003             25   YELLOW equ P2.5
0003             26   RED    equ P2.4
0003             27   
0003             28            
                546   $LIST
                 31   $LIST
0321             33   
0321             34   
0321             35   
0030             36   dseg at 0x30
0030             37   Timer0_Count1ms:          ds 2 ;
0032             38   Result:          ds 2
0034             39   x:           ds 4
0038             40   y:               ds 4
003C             41   bcd:             ds 5
0041             42   
0000             43   BSEG
0000             44   mf: dbit 1
0001             45   
0321             46   CSEG
                 47   Send_BCD mac
                 48       push ar0
                 49       mov r0, %0
                 50       lcall ?Send_BCD
                 51       pop ar0
                 52   endmac
0321             53   
0321             54   ?Send_BCD:
0321 C0E0        55       push acc
0323             56       ; Write most significant digit
0323 E8          57       mov a, r0
0324 C4          58       swap a
0325 540F        59       anl a, #0fh
0327 4430        60       orl a, #30h
0329 120376      61       lcall putchar
032C             62       ; write least significant digit
032C E8          63       mov a, r0
032D 540F        64       anl a, #0fh
032F 4430        65       orl a, #30h
0331 120376      66       lcall putchar
0334 D0E0        67       pop acc
0336 22          68       ret
0337             69       
0337             70   INIT_SPI:
0337 D2A2        71            setb MY_MISO ; Make MISO an input pin
0339 C2A3        72            clr MY_SCLK ; For mode (0,0) SCLK is zero
033B D2A0        73            setb CE_ADC
033D 22          74            ret
033E             75   DO_SPI_G:
033E C0E0        76            push acc
0340 7900        77            mov R1, #0 ; Received byte stored in R1
0342 7A08        78            mov R2, #8 ; Loop counter (8-bits)
0344             79   DO_SPI_G_LOOP:
0344 E8          80            mov a, R0 ; Byte to write is in R0
0345 33          81            rlc a ; Carry flag has bit to write
0346 F8          82            mov R0, a
0347 92A1        83            mov MY_MOSI, c
0349 D2A3        84            setb MY_SCLK ; Transmit
034B A2A2        85            mov c, MY_MISO ; Read received bit
034D E9          86            mov a, R1 ; Save received bit in R1
034E 33          87            rlc a
034F F9          88            mov R1, a
0350 C2A3        89            clr MY_SCLK
0352 DAF0        90            djnz R2, DO_SPI_G_LOOP
0354 D0E0        91            pop acc
0356 22          92            ret
0357             93    
0357             94   ; Configure the serial port and baud rate using timer 1
0357             95   InitSerialPort:
0357             96       ; Since the reset button bounces, we need to wait a bit before
0357             97       ; sending messages, or risk displaying gibberish!
0357 79DE        98       mov R1, #222
0359 78A6        99       mov R0, #166
035B D8FE       100       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
035D D9FA       101       djnz R1, $-4 ; 22.51519us*222=4.998ms
035F            102       ; Now we can safely proceed with the configuration
035F C28E       103            clr     TR1
0361 53890F     104            anl     TMOD, #0x0f
0364 438920     105            orl     TMOD, #0x20
0367 438780     106            orl     PCON,#0x80
036A 758DF4     107            mov     TH1,#T1LOAD
036D 758BF4     108            mov     TL1,#T1LOAD
0370 D28E       109            setb TR1
0372 759852     110            mov     SCON,#0x52
0375 22         111       ret
0376            112   
0376            113   ; Send a character using the serial port
0376            114   putchar:
0376 3099FD     115       jnb TI, putchar
0379 C299       116       clr TI
037B F599       117       mov SBUF, a
037D 22         118       ret
037E            119   
037E            120   ; Send a constant-zero-terminated string using the serial port
037E            121   SendString:
037E E4         122       clr A
037F 93         123       movc A, @A+DPTR
0380 6006       124       jz SendStringDone
0382 120376     125       lcall putchar
0385 A3         126       inc DPTR
0386 80F6       127       sjmp SendString
0388            128   SendStringDone:
0388 22         129       ret
0389            130   
0389            131   Init:
0389 75817F     132       mov SP, #7FH
038C 75C100     133       mov PMOD, #0 
038F D2AF       134       setb EA                              ; Enable interrupts
0391 120337     135            lcall INIT_SPI
0394 120357     136            lcall InitSerialPort
0397 12005D     137            lcall LCD_4BIT
039A            138   Main_Loop:
039A            139   
039A C2A0       140       clr CE_ADC
039C            141       
039C 7801       142            mov R0, #00000001B ; Start bit:1
039E 12033E     143            lcall DO_SPI_G
03A1            144            
03A1 7890       145            mov R0, #10010000B ; Single ended, read channel 1
03A3 12033E     146            lcall DO_SPI_G
03A6            147            
03A6 E9         148            mov a, R1 ; R1 contains bits 8 and 9
03A7 5403       149            anl a, #00000011B ; We need only the two least significant bits
03A9 F533       150            mov Result+1, a ; Save result high.
03AB            151            
03AB 7855       152            mov R0, #55H ; It doesn't matter what we transmit...
03AD 12033E     153            lcall DO_SPI_G  
03B0            154            
03B0 8932       155            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
03B2            156            
03B2 D2A0       157            setb CE_ADC
03B4            158            
03B4 1203C0     159            lcall Result_SPI_Routine        ; Calls routine that calculates temperatures, displays on LCD, and sends via serial
03B7 C002       160            push AR2
03B9 7A64       160            mov R2, #100
03BB 12000E     160            lcall ?Wait_Milli_Seconds
03BE D002       160            pop AR2         ; 0.1 second delay between samples 
03C0            161   Result_SPI_Routine:
03C0 753700     162            mov x+3, #0
03C3 753600     163            mov x+2, #0
03C6 853335     164            mov x+1, result+1
03C9 853234     165            mov x+0, result+0
03CC            166            ; Calculate temperature in Kelvin in binary with 4 digits of precision
03CC 753840     167            mov y+0, #low (5000000 % 0x10000) 
03CF 75394B     167            mov y+1, #high(5000000 % 0x10000) 
03D2 753A4C     167            mov y+2, #low (5000000 / 0x10000) 
03D5 753B00     167            mov y+3, #high(5000000 / 0x10000)       ;reduce the digit displaying on LCD
03D8 12022B     168            lcall mul32
03DB 7538FF     169            mov y+0, #low (1023 % 0x10000) 
03DE 753903     169            mov y+1, #high(1023 % 0x10000) 
03E1 753A00     169            mov y+2, #low (1023 / 0x10000) 
03E4 753B00     169            mov y+3, #high(1023 / 0x10000) 
03E7 1202B8     170            lcall div32
03EA 7538D1     171            mov y+0, #low (454057169 % 0x10000) 
03ED 75395C     171            mov y+1, #high(454057169 % 0x10000) 
03F0 753A10     171            mov y+2, #low (454057169 / 0x10000) 
03F3 753B1B     171            mov y+3, #high(454057169 / 0x10000)     ;gain*1000000
03F6 1202B8     172            lcall div32
03F9 753829     173            mov y+0, #low (41 % 0x10000) 
03FC 753900     173            mov y+1, #high(41 % 0x10000) 
03FF 753A00     173            mov y+2, #low (41 / 0x10000) 
0402 753B00     173            mov y+3, #high(41 / 0x10000) 
0405 1202B8     174            lcall div32
0408 753840     175            mov y+0, #low (1000000 % 0x10000) 
040B 753942     175            mov y+1, #high(1000000 % 0x10000) 
040E 753A0F     175            mov y+2, #low (1000000 / 0x10000) 
0411 753B00     175            mov y+3, #high(1000000 / 0x10000) 
0414 12022B     176            lcall mul32
0417 753864     177            mov y+0, #low (100 % 0x10000) 
041A 753900     177            mov y+1, #high(100 % 0x10000) 
041D 753A00     177            mov y+2, #low (100 / 0x10000) 
0420 753B00     177            mov y+3, #high(100 / 0x10000) 
0423 12022B     178            lcall mul32
0426 1200B1     179            lcall hex2bcd
0429            180            ;result of the calculation is 100*temperature difference
0429 C000       181       push ar0
042B A83E       181       mov r0, bcd+2
042D 120321     181       lcall ?Send_BCD
0430 D000       181       pop ar0
0432 C000       182       push ar0
0434 A83D       182       mov r0, bcd+1
0436 120321     182       lcall ?Send_BCD
0439 D000       182       pop ar0
043B C0E0       183            push acc
043D 742E       183            mov a, #'.'
043F 120053     183            lcall ?WriteData
0442 D0E0       183            pop acc
0444 C000       184       push ar0
0446 A83C       184       mov r0, bcd
0448 120321     184       lcall ?Send_BCD
044B D000       184       pop ar0
044D            185       
044D 8000       186       sjmp Display_Temp_LCD
044F            187   
044F            188   Display_Temp_LCD:        
044F E53E       189            mov a, bcd+2
0451 B40002     190            cjne a, #0, Display_Hundreds    ; If temperature is not in the hundreds, don't display hundreds digit (don't show the 0)
0454 8028       191            sjmp Display_Clear_Hundreds
0456            192   Display_Hundreds:
0456 C0E0       193            push acc
0458 7401       193            mov a, #1
045A 14         193            dec a
045B 120096     193            lcall ?Set_Cursor_1 ; Select column and row
045E D0E0       193            pop acc
0460 C000       194            push ar0
0462 A83E       194            mov r0, bcd+2
0464 12009B     194            lcall ?Display_BCD
0467 D000       194            pop ar0
0469 C0E0       195            push acc
046B 7401       195            mov a, #1
046D 14         195            dec a
046E 120096     195            lcall ?Set_Cursor_1 ; Select column and row
0471 D0E0       195            pop acc
0473 C0E0       196            push acc
0475 7420       196            mov a, #' '
0477 120053     196            lcall ?WriteData
047A D0E0       196            pop acc
047C 801C       197            sjmp Display_Tens
047E            198   Display_Clear_Hundreds:
047E C0E0       199            push acc
0480 7401       199            mov a, #1
0482 14         199            dec a
0483 120096     199            lcall ?Set_Cursor_1 ; Select column and row
0486 D0E0       199            pop acc
0488 C0E0       200            push acc
048A 7420       200            mov a, #' '
048C 120053     200            lcall ?WriteData
048F D0E0       200            pop acc
0491 C0E0       201            push acc
0493 7420       201            mov a, #' '
0495 120053     201            lcall ?WriteData
0498 D0E0       201            pop acc
049A            202   Display_Tens:
049A C0E0       203            push acc
049C 7403       203            mov a, #3
049E 14         203            dec a
049F 120096     203            lcall ?Set_Cursor_1 ; Select column and row
04A2 D0E0       203            pop acc
04A4 C000       204            push ar0
04A6 A83D       204            mov r0, bcd+1
04A8 12009B     204            lcall ?Display_BCD
04AB D000       204            pop ar0
04AD C0E0       205            push acc
04AF 742E       205            mov a, #'.'
04B1 120053     205            lcall ?WriteData
04B4 D0E0       205            pop acc
04B6 C000       206            push ar0
04B8 A83C       206            mov r0, bcd
04BA 12009B     206            lcall ?Display_BCD
04BD D000       206            pop ar0
04BF 22         207       ret
04C0            208   en
