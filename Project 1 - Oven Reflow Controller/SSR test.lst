                 -1   $MODLP52
0000              1   ;  MODLP52: Register definition for Atmel's AT89LP52
0000              2   ;
0000              3   ;   Copyright (C) 2011-2015  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19   ;--------------------------------------------------------
0000             20   ; Special Function Registers
0000             21   ;--------------------------------------------------------
0000             22   P0             DATA 0x80
0000             23   P1             DATA 0x90
0000             24   P2             DATA 0xa0
0000             25   P3             DATA 0xb0
0000             26   P4             DATA 0xc0
0000             27   PMOD           DATA 0xc1
0000             28   PSW            DATA 0xd0
0000             29   ACC            DATA 0xe0
0000             30   B              DATA 0xf0
0000             31   SP             DATA 0x81
0000             32   DPL            DATA 0x82
0000             33   DPH            DATA 0x83
0000             34   DP0L           DATA 0x82
0000             35   DP0H           DATA 0x83
0000             36   DP1L           DATA 0x84
0000             37   DP1H           DATA 0x85
0000             38   AUXR           DATA 0x8e
0000             39   AUXR1          DATA 0xa2
0000             40   DPCF           DATA 0xa2
0000             41   TCON           DATA 0x88
0000             42   TMOD           DATA 0x89
0000             43   T2CON          DATA 0xc8
0000             44   T2MOD          DATA 0xc9
0000             45   TL0            DATA 0x8a
0000             46   TL1            DATA 0x8b
0000             47   TL2            DATA 0xcc
0000             48   TH0            DATA 0x8c
0000             49   TH1            DATA 0x8d
0000             50   TH2            DATA 0xcd
0000             51   TCONB          DATA 0x91
0000             52   RCAP2L         DATA 0xca
0000             53   RCAP2H         DATA 0xcb
0000             54   WDTRST         DATA 0xa6
0000             55   WDTCON         DATA 0xa7
0000             56   SCON           DATA 0x98
0000             57   SBUF           DATA 0x99
0000             58   SADEN          DATA 0xb9
0000             59   SADDR          DATA 0xa9
0000             60   IE             DATA 0xa8
0000             61   IP             DATA 0xb8
0000             62   IPH            DATA 0xb7
0000             63   PCON           DATA 0x87
0000             64   CLKREG         DATA 0x8f
0000             65   MEMCON         DATA 0x96
0000             66   ;--------------------------------------------------------
0000             67   ; special function bits
0000             68   ;--------------------------------------------------------
0000             69   SCK            BIT 0x97
0000             70   MISO           BIT 0x96
0000             71   MOSI           BIT 0x95
0000             72   T2EX           BIT 0x91
0000             73   T2             BIT 0x90
0000             74   RD             BIT 0xb7
0000             75   WR             BIT 0xb6
0000             76   T1             BIT 0xb5
0000             77   T0             BIT 0xb4
0000             78   INT1           BIT 0xb3
0000             79   INT0           BIT 0xb2
0000             80   TXD            BIT 0xb1
0000             81   RXD            BIT 0xb0
0000             82   XTAL2          BIT 0xc7
0000             83   XTAL1          BIT 0xc6
0000             84   PSEN           BIT 0xc5
0000             85   ALE            BIT 0xc4
0000             86   CY             BIT 0xd7
0000             87   AC             BIT 0xd6
0000             88   F0             BIT 0xd5
0000             89   RS1            BIT 0xd4
0000             90   RS0            BIT 0xd3
0000             91   OV             BIT 0xd2
0000             92   UD             BIT 0xd1
0000             93   P              BIT 0xd0
0000             94   TF1            BIT 0x8f
0000             95   TR1            BIT 0x8e
0000             96   TF0            BIT 0x8d
0000             97   TR0            BIT 0x8c
0000             98   IE1            BIT 0x8b
0000             99   IT1            BIT 0x8a
0000            100   IE0            BIT 0x89
0000            101   IT0            BIT 0x88
0000            102   TF2            BIT 0xcf
0000            103   EXF2           BIT 0xce
0000            104   RCLK           BIT 0xcd
0000            105   TCLK           BIT 0xcc
0000            106   EXEN2          BIT 0xcb
0000            107   TR2            BIT 0xca
0000            108   C_T2           BIT 0xc9
0000            109   CP_RL2         BIT 0xc8
0000            110   SM0            BIT 0x9f
0000            111   FE             BIT 0x9f
0000            112   SM1            BIT 0x9e
0000            113   SM2            BIT 0x9d
0000            114   REN            BIT 0x9c
0000            115   TB8            BIT 0x9b
0000            116   RB8            BIT 0x9a
0000            117   TI             BIT 0x99
0000            118   RI             BIT 0x98
0000            119   EA             BIT 0xaf
0000            120   ET2            BIT 0xad
0000            121   ES             BIT 0xac
0000            122   ET1            BIT 0xab
0000            123   EX1            BIT 0xaa
0000            124   ET0            BIT 0xa9
0000            125   EX0            BIT 0xa8
0000            126   PT2            BIT 0xbd
0000            127   PS             BIT 0xbc
0000            128   PT1            BIT 0xbb
0000            129   PX1            BIT 0xba
0000            130   PT0            BIT 0xb9
0000            131   PX0            BIT 0xb8
0000              2   org 0000H
0000 0203AB       3      ljmp Init
0003              4   
0003              5   VLED EQU 207
0003              6   CLK  EQU 22118400
0003              7   BAUD equ 115200
0003              8   T1LOAD equ (0x100-(CLK/(16*BAUD)))
0003              9   TIMER0_RATE        EQU 1000
0003             10   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             11   
0003             12   CE_ADC EQU P2.0
0003             13   MY_MOSI EQU P2.1
0003             14   MY_MISO EQU P2.2
0003             15   MY_SCLK EQU P2.3
0003             16   BOOT_BUTTON EQU P4.5
0003             17   LCD_RS equ P1.2
0003             18   LCD_RW equ P1.3
0003             19   LCD_E  equ P1.4
0003             20   LCD_D4 equ P3.2
0003             21   LCD_D5 equ P3.3
0003             22   LCD_D6 equ P3.4
0003             23   LCD_D7 equ P3.5
0003             24   SOUND_OUT equ P2.7
0003             25   GREEN  equ P2.6
0003             26   YELLOW equ P2.5
0003             27   RED    equ P2.4
0003             28   
0003             29            
                546   $LIST
                 32   $LIST
0321             34   
0321             35   
0321             36   
0030             37   dseg at 0x30
0030             38   Vcc:                             ds 4
0034             39   Timer0_Count1ms:         ds 2 
0036             40   Result:          ds 2
0038             41   x:           ds 4
003C             42   y:               ds 4
0040             43   samplesum:       ds 4
0044             44   bcd:             ds 5
0049             45   x_lm335:         ds 4
004D             46   
0000             47   BSEG
0000             48   mf: dbit 1
0001             49   
0321             50   CSEG
0321 0A          51   NEWLINE: db '\n'
0322             52   
                 53   Read_ADC_Channel MAC
                 54   	mov b, #%0
                 55   	lcall _Read_ADC_Channel
                 56   	ENDMAC
0322             57   _Read_ADC_Channel:
0322 C2A0        58            clr CE_ADC
0324 7801        59            mov R0, #00000001B ; Start bit:1
0326 120360      60            lcall DO_SPI_G
0329 E5F0        61            mov a, b
032B C4          62            swap a
032C 54F0        63            anl a, #0F0H
032E D2E7        64            setb acc.7 ; Single mode (bit 7).
0330 F8          65            mov R0, a
0331 120360      66            lcall DO_SPI_G
0334 E9          67            mov a, R1 ; R1 contains bits 8 and 9
0335 5403        68            anl a, #00000011B ; We need only the two least significant bits
0337 F537        69            mov result+1, a ; Save result high.
0339 7855        70            mov R0, #55H ; It doesn't matter what we transmit...
033B 120360      71            lcall DO_SPI_G
033E 8936        72            mov result+0, R1 ; R1 contains bits 0 to 7. Save result low.
0340 D2A0        73            setb CE_ADC
0342             74            
0342 22          75            ret
0343             76            
0343             77   
                 78   Send_BCD mac
                 79       push ar0
                 80       mov r0, %0
                 81       lcall ?Send_BCD
                 82       pop ar0
                 83   endmac
0343             84   
0343             85   ?Send_BCD:
0343 C0E0        86       push acc
0345             87       ; Write most significant digit
0345 E8          88       mov a, r0
0346 C4          89       swap a
0347 540F        90       anl a, #0fh
0349 4430        91       orl a, #30h
034B 120398      92       lcall putchar
034E             93       ; write least significant digit
034E E8          94       mov a, r0
034F 540F        95       anl a, #0fh
0351 4430        96       orl a, #30h
0353 120398      97       lcall putchar
0356 D0E0        98       pop acc
0358 22          99       ret
0359            100       
0359            101   INIT_SPI:
0359 D2A2       102            setb MY_MISO ; Make MISO an input pin
035B C2A3       103            clr MY_SCLK ; For mode (0,0) SCLK is zero
035D D2A0       104            setb CE_ADC
035F 22         105            ret
0360            106   DO_SPI_G:
0360 C0E0       107            push acc
0362 7900       108            mov R1, #0 ; Received byte stored in R1
0364 7A08       109            mov R2, #8 ; Loop counter (8-bits)
0366            110   DO_SPI_G_LOOP:
0366 E8         111            mov a, R0 ; Byte to write is in R0
0367 33         112            rlc a ; Carry flag has bit to write
0368 F8         113            mov R0, a
0369 92A1       114            mov MY_MOSI, c
036B D2A3       115            setb MY_SCLK ; Transmit
036D A2A2       116            mov c, MY_MISO ; Read received bit
036F E9         117            mov a, R1 ; Save received bit in R1
0370 33         118            rlc a
0371 F9         119            mov R1, a
0372 C2A3       120            clr MY_SCLK
0374 DAF0       121            djnz R2, DO_SPI_G_LOOP
0376 D0E0       122            pop acc
0378 22         123            ret
0379            124    
0379            125   ; Configure the serial port and baud rate using timer 1
0379            126   InitSerialPort:
0379            127       ; Since the reset button bounces, we need to wait a bit before
0379            128       ; sending messages, or risk displaying gibberish!
0379 79DE       129       mov R1, #222
037B 78A6       130       mov R0, #166
037D D8FE       131       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
037F D9FA       132       djnz R1, $-4 ; 22.51519us*222=4.998ms
0381            133       ; Now we can safely proceed with the configuration
0381 C28E       134            clr     TR1
0383 53890F     135            anl     TMOD, #0x0f
0386 438920     136            orl     TMOD, #0x20
0389 438780     137            orl     PCON,#0x80
038C 758DF4     138            mov     TH1,#T1LOAD
038F 758BF4     139            mov     TL1,#T1LOAD
0392 D28E       140            setb TR1
0394 759852     141            mov     SCON,#0x52
0397 22         142       ret
0398            143   
0398            144   ; Send a character using the serial port
0398            145   putchar:
0398 3099FD     146       jnb TI, putchar
039B C299       147       clr TI
039D F599       148       mov SBUF, a
039F 22         149       ret
03A0            150   
03A0            151   ; Send a constant-zero-terminated string using the serial port
03A0            152   SendString:
03A0 E4         153       clr A
03A1 93         154       movc A, @A+DPTR
03A2 6006       155       jz SendStringDone
03A4 120398     156       lcall putchar
03A7 A3         157       inc DPTR
03A8 80F6       158       sjmp SendString
03AA            159   SendStringDone:
03AA 22         160       ret
03AB            161   
03AB            162   Init:
03AB 75817F     163       mov SP, #7FH
03AE 75C100     164       mov PMOD, #0 
03B1 D2AF       165       setb EA                              ; Enable interrupts
03B3 120359     166            lcall INIT_SPI
03B6 120379     167            lcall InitSerialPort
03B9 12005D     168            lcall LCD_4BIT
03BC            169   Main_Loop:
03BC E4         170            clr a
03BD F543       171            mov samplesum+3, a
03BF F542       172            mov samplesum+2, a
03C1 F541       173            mov samplesum+1, a
03C3 F540       174            mov samplesum+0, a
03C5            175            
03C5 1203D8     176            lcall Take_Sample
03C8 1203D8     177            lcall Take_Sample
03CB 1203D8     178            lcall Take_Sample
03CE 1203D8     179            lcall Take_Sample
03D1 12050B     180            lcall Calculate_Average
03D4            181             
03D4 D2B7       182            setb P3.7
03D6 80E4       183            sjmp Main_Loop  
03D8            184            
03D8            185            
03D8            186   Take_Sample:
03D8 75F007     187            mov b, #7
03DB 120322     187            lcall _Read_ADC_Channel
03DE 1203FD     188            lcall Calculate_Vref
03E1            189            ;fetch result from channel 0 as room temperature
03E1 75F000     190            mov b, #0
03E4 120322     190            lcall _Read_ADC_Channel
03E7 120434     191            lcall LM335_Result_SPI_Routine
03EA            192            ;fetch result from channel 1
03EA 75F001     193            mov b, #1
03ED 120322     193            lcall _Read_ADC_Channel
03F0 120489     194       lcall Result_SPI_Routine
03F3 C002       195            push AR2
03F5 7A7D       195            mov R2, #125
03F7 12000E     195            lcall ?Wait_Milli_Seconds
03FA D002       195            pop AR2         ; 0.1 second delay between samples
03FC 22         196            ret
03FD            197   Calculate_Vref:
03FD 753F00     198            mov y+3, #0
0400 753E00     199            mov y+2, #0
0403 85373D     200            mov y+1, result+1
0406 85363C     201            mov y+0, result+0
0409 753831     202            mov x+0, #low (VLED*1023 % 0x10000) 
040C 75393B     202            mov x+1, #high(VLED*1023 % 0x10000) 
040F 753A03     202            mov x+2, #low (VLED*1023 / 0x10000) 
0412 753B00     202            mov x+3, #high(VLED*1023 / 0x10000) 
0415 1202B8     203            lcall div32
0418 753C10     204            mov y+0, #low (10000 % 0x10000) 
041B 753D27     204            mov y+1, #high(10000 % 0x10000) 
041E 753E00     204            mov y+2, #low (10000 / 0x10000) 
0421 753F00     204            mov y+3, #high(10000 / 0x10000) 
0424 12022B     205            lcall mul32                     ; Gets Vcc*10^6
0427 853B33     206            mov Vcc+3, x+3
042A 853A32     207            mov Vcc+2, x+2
042D 853931     208            mov Vcc+1, x+1
0430 853830     209            mov Vcc+0, x+0
0433            210            
0433 22         211            ret
0434            212            
0434            213   LM335_Result_SPI_Routine:
0434 753B00     214            mov x+3, #0
0437 753A00     215       mov x+2, #0
043A 853739     216       mov x+1, result+1
043D 853638     217       mov x+0, result+0
0440 85333F     218       mov y+3, Vcc+3
0443 85323E     219       mov y+2, Vcc+2
0446 85313D     220       mov y+1, Vcc+1
0449 85303C     221       mov y+0, Vcc+0
044C 12022B     222       lcall mul32                  ; Vout*10^6 = ADC*(Vcc*10^6)/1023
044F 753CFF     223            mov y+0, #low (1023 % 0x10000) 
0452 753D03     223            mov y+1, #high(1023 % 0x10000) 
0455 753E00     223            mov y+2, #low (1023 / 0x10000) 
0458 753F00     223            mov y+3, #high(1023 / 0x10000)          
045B 1202B8     224       lcall div32
045E 753C10     225            mov y+0, #low (2730000 % 0x10000) 
0461 753DA8     225            mov y+1, #high(2730000 % 0x10000) 
0464 753E29     225            mov y+2, #low (2730000 / 0x10000) 
0467 753F00     225            mov y+3, #high(2730000 / 0x10000)       ; T*10^4 = (Vout*10^6-2.73*10^6)/100
046A 120197     226       lcall sub32
046D 753C64     227            mov y+0, #low (100 % 0x10000) 
0470 753D00     227            mov y+1, #high(100 % 0x10000) 
0473 753E00     227            mov y+2, #low (100 / 0x10000) 
0476 753F00     227            mov y+3, #high(100 / 0x10000)           
0479 1202B8     228       lcall div32
047C 853B4C     229       mov x_lm335+3, x+3
047F 853A4B     230            mov x_lm335+2, x+2
0482 85394A     231            mov x_lm335+1, x+1
0485 853849     232            mov x_lm335+0, x+0
0488 22         233            ret
0489            234   
0489            235   Result_SPI_Routine:
0489 753B00     236            mov x+3, #0
048C 753A00     237            mov x+2, #0
048F 853739     238            mov x+1, result+1
0492 853638     239            mov x+0, result+0
0495 85333F     240       mov y+3, Vcc+3
0498 85323E     241       mov y+2, Vcc+2
049B 85313D     242       mov y+1, Vcc+1
049E 85303C     243       mov y+0, Vcc+0
04A1 12022B     244            lcall mul32
04A4 753CFF     245            mov y+0, #low (1023 % 0x10000) 
04A7 753D03     245            mov y+1, #high(1023 % 0x10000) 
04AA 753E00     245            mov y+2, #low (1023 / 0x10000) 
04AD 753F00     245            mov y+3, #high(1023 / 0x10000) 
04B0 1202B8     246            lcall div32
04B3 753C64     247            mov y+0, #low (100 % 0x10000) 
04B6 753D00     247            mov y+1, #high(100 % 0x10000) 
04B9 753E00     247            mov y+2, #low (100 / 0x10000) 
04BC 753F00     247            mov y+3, #high(100 / 0x10000) 
04BF 12022B     248            lcall mul32     
04C2 753CC6     249            mov y+0, #low (454 % 0x10000) 
04C5 753D01     249            mov y+1, #high(454 % 0x10000) 
04C8 753E00     249            mov y+2, #low (454 / 0x10000) 
04CB 753F00     249            mov y+3, #high(454 / 0x10000)   ;Gain 
04CE 1202B8     250            lcall div32
04D1 753C29     251            mov y+0, #low (41 % 0x10000) 
04D4 753D00     251            mov y+1, #high(41 % 0x10000) 
04D7 753E00     251            mov y+2, #low (41 / 0x10000) 
04DA 753F00     251            mov y+3, #high(41 / 0x10000)    ;Since calculations have been scaled up by 10^6, this is equivalent to dividing by 41*10^-6
04DD 1202B8     252            lcall div32
04E0            253            
04E0 854C3F     254            mov y+3, x_lm335+3
04E3 854B3E     255            mov y+2, x_lm335+2
04E6 854A3D     256            mov y+1, x_lm335+1
04E9 85493C     257            mov y+0, x_lm335+0
04EC 120176     258            lcall add32
04EF            259            
04EF 85433F     260            mov y+3, samplesum+3
04F2 85423E     261            mov y+2, samplesum+2
04F5 85413D     262            mov y+1, samplesum+1
04F8 85403C     263            mov y+0, samplesum+0
04FB            264            
04FB 120176     265            lcall add32
04FE            266            
04FE 853B43     267            mov samplesum+3, x+3
0501 853A42     268            mov samplesum+2, x+2
0504 853941     269            mov samplesum+1, x+1
0507 853840     270            mov samplesum+0, x+0
050A            271            
050A 22         272            ret
050B            273   
050B            274   Calculate_Average:
050B 85433B     275            mov x+3, samplesum+3
050E 85423A     276            mov x+2, samplesum+2
0511 854139     277            mov x+1, samplesum+1
0514 854138     278            mov x+0, samplesum+1
0517            279            
0517 753C04     280            mov y+0, #low (4 % 0x10000) 
051A 753D00     280            mov y+1, #high(4 % 0x10000) 
051D 753E00     280            mov y+2, #low (4 / 0x10000) 
0520 753F00     280            mov y+3, #high(4 / 0x10000) 
0523 1202B8     281            lcall div32
0526 1200B1     282            lcall hex2bcd
0529            283            
0529 C000       284       push ar0
052B A845       284       mov r0, bcd+1
052D 120343     284       lcall ?Send_BCD
0530 D000       284       pop ar0
0532 740A       285            mov a, #'\n'
0534 120398     286            lcall putchar
0537            287            
0537 C0E0       288            push acc
0539 7401       288            mov a, #1
053B 14         288            dec a
053C 120096     288            lcall ?Set_Cursor_1 ; Select column and row
053F D0E0       288            pop acc
0541            289            
0541            290            
0541            291   
0541            292   Display_Temp_LCD:
0541 C000       293            push ar0
0543 A848       293            mov r0, bcd+4
0545 12009B     293            lcall ?Display_BCD
0548 D000       293            pop ar0
054A C000       294            push ar0
054C A847       294            mov r0, bcd+3
054E 12009B     294            lcall ?Display_BCD
0551 D000       294            pop ar0
0553 C000       295            push ar0
0555 A846       295            mov r0, bcd+2
0557 12009B     295            lcall ?Display_BCD
055A D000       295            pop ar0
055C C000       296            push ar0
055E A845       296            mov r0, bcd+1
0560 12009B     296            lcall ?Display_BCD
0563 D000       296            pop ar0
0565 C000       297            push ar0
0567 A844       297            mov r0, bcd
0569 12009B     297            lcall ?Display_BCD
056C D000       297            pop ar0
056E 22         298       ret
056F            299   end
