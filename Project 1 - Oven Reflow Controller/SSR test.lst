                 -1   $MODLP52
0000              1   ;  MODLP52: Register definition for Atmel's AT89LP52
0000              2   ;
0000              3   ;   Copyright (C) 2011-2015  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19   ;--------------------------------------------------------
0000             20   ; Special Function Registers
0000             21   ;--------------------------------------------------------
0000             22   P0             DATA 0x80
0000             23   P1             DATA 0x90
0000             24   P2             DATA 0xa0
0000             25   P3             DATA 0xb0
0000             26   P4             DATA 0xc0
0000             27   PMOD           DATA 0xc1
0000             28   PSW            DATA 0xd0
0000             29   ACC            DATA 0xe0
0000             30   B              DATA 0xf0
0000             31   SP             DATA 0x81
0000             32   DPL            DATA 0x82
0000             33   DPH            DATA 0x83
0000             34   DP0L           DATA 0x82
0000             35   DP0H           DATA 0x83
0000             36   DP1L           DATA 0x84
0000             37   DP1H           DATA 0x85
0000             38   AUXR           DATA 0x8e
0000             39   AUXR1          DATA 0xa2
0000             40   DPCF           DATA 0xa2
0000             41   TCON           DATA 0x88
0000             42   TMOD           DATA 0x89
0000             43   T2CON          DATA 0xc8
0000             44   T2MOD          DATA 0xc9
0000             45   TL0            DATA 0x8a
0000             46   TL1            DATA 0x8b
0000             47   TL2            DATA 0xcc
0000             48   TH0            DATA 0x8c
0000             49   TH1            DATA 0x8d
0000             50   TH2            DATA 0xcd
0000             51   TCONB          DATA 0x91
0000             52   RCAP2L         DATA 0xca
0000             53   RCAP2H         DATA 0xcb
0000             54   WDTRST         DATA 0xa6
0000             55   WDTCON         DATA 0xa7
0000             56   SCON           DATA 0x98
0000             57   SBUF           DATA 0x99
0000             58   SADEN          DATA 0xb9
0000             59   SADDR          DATA 0xa9
0000             60   IE             DATA 0xa8
0000             61   IP             DATA 0xb8
0000             62   IPH            DATA 0xb7
0000             63   PCON           DATA 0x87
0000             64   CLKREG         DATA 0x8f
0000             65   MEMCON         DATA 0x96
0000             66   ;--------------------------------------------------------
0000             67   ; special function bits
0000             68   ;--------------------------------------------------------
0000             69   SCK            BIT 0x97
0000             70   MISO           BIT 0x96
0000             71   MOSI           BIT 0x95
0000             72   T2EX           BIT 0x91
0000             73   T2             BIT 0x90
0000             74   RD             BIT 0xb7
0000             75   WR             BIT 0xb6
0000             76   T1             BIT 0xb5
0000             77   T0             BIT 0xb4
0000             78   INT1           BIT 0xb3
0000             79   INT0           BIT 0xb2
0000             80   TXD            BIT 0xb1
0000             81   RXD            BIT 0xb0
0000             82   XTAL2          BIT 0xc7
0000             83   XTAL1          BIT 0xc6
0000             84   PSEN           BIT 0xc5
0000             85   ALE            BIT 0xc4
0000             86   CY             BIT 0xd7
0000             87   AC             BIT 0xd6
0000             88   F0             BIT 0xd5
0000             89   RS1            BIT 0xd4
0000             90   RS0            BIT 0xd3
0000             91   OV             BIT 0xd2
0000             92   UD             BIT 0xd1
0000             93   P              BIT 0xd0
0000             94   TF1            BIT 0x8f
0000             95   TR1            BIT 0x8e
0000             96   TF0            BIT 0x8d
0000             97   TR0            BIT 0x8c
0000             98   IE1            BIT 0x8b
0000             99   IT1            BIT 0x8a
0000            100   IE0            BIT 0x89
0000            101   IT0            BIT 0x88
0000            102   TF2            BIT 0xcf
0000            103   EXF2           BIT 0xce
0000            104   RCLK           BIT 0xcd
0000            105   TCLK           BIT 0xcc
0000            106   EXEN2          BIT 0xcb
0000            107   TR2            BIT 0xca
0000            108   C_T2           BIT 0xc9
0000            109   CP_RL2         BIT 0xc8
0000            110   SM0            BIT 0x9f
0000            111   FE             BIT 0x9f
0000            112   SM1            BIT 0x9e
0000            113   SM2            BIT 0x9d
0000            114   REN            BIT 0x9c
0000            115   TB8            BIT 0x9b
0000            116   RB8            BIT 0x9a
0000            117   TI             BIT 0x99
0000            118   RI             BIT 0x98
0000            119   EA             BIT 0xaf
0000            120   ET2            BIT 0xad
0000            121   ES             BIT 0xac
0000            122   ET1            BIT 0xab
0000            123   EX1            BIT 0xaa
0000            124   ET0            BIT 0xa9
0000            125   EX0            BIT 0xa8
0000            126   PT2            BIT 0xbd
0000            127   PS             BIT 0xbc
0000            128   PT1            BIT 0xbb
0000            129   PX1            BIT 0xba
0000            130   PT0            BIT 0xb9
0000            131   PX0            BIT 0xb8
0000              2   org 0000H
0000 0203AB       3      ljmp Init
0003              4   
0003              5   VLED EQU 207
0003              6   CLK  EQU 22118400
0003              7   BAUD equ 115200
0003              8   T1LOAD equ (0x100-(CLK/(16*BAUD)))
0003              9   TIMER0_RATE        EQU 1000
0003             10   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0003             11   
0003             12   CE_ADC EQU P2.0
0003             13   MY_MOSI EQU P2.1
0003             14   MY_MISO EQU P2.2
0003             15   MY_SCLK EQU P2.3
0003             16   BOOT_BUTTON EQU P4.5
0003             17   LCD_RS equ P1.2
0003             18   LCD_RW equ P1.3
0003             19   LCD_E  equ P1.4
0003             20   LCD_D4 equ P3.2
0003             21   LCD_D5 equ P3.3
0003             22   LCD_D6 equ P3.4
0003             23   LCD_D7 equ P3.5
0003             24   SOUND_OUT equ P2.7
0003             25   GREEN  equ P2.6
0003             26   YELLOW equ P2.5
0003             27   RED    equ P2.4
0003             28   
0003             29            
                546   $LIST
                 32   $LIST
0321             34   
0321             35   
0321             36   
0030             37   dseg at 0x30
0030             38   Vcc:                             ds 4
0034             39   Timer0_Count1ms:         ds 2 
0036             40   Result:          ds 2
0038             41   x:           ds 4
003C             42   y:               ds 4
0040             43   bcd:             ds 5
0045             44   x_lm335:         ds 4
0049             45   
0000             46   BSEG
0000             47   mf: dbit 1
0001             48   
0321             49   CSEG
0321 0A          50   NEWLINE: db '\n'
0322             51   
                 52   Read_ADC_Channel MAC
                 53   	mov b, #%0
                 54   	lcall _Read_ADC_Channel
                 55   	ENDMAC
0322             56   _Read_ADC_Channel:
0322 C2A0        57            clr CE_ADC
0324 7801        58            mov R0, #00000001B ; Start bit:1
0326 120360      59            lcall DO_SPI_G
0329 E5F0        60            mov a, b
032B C4          61            swap a
032C 54F0        62            anl a, #0F0H
032E D2E7        63            setb acc.7 ; Single mode (bit 7).
0330 F8          64            mov R0, a
0331 120360      65            lcall DO_SPI_G
0334 E9          66            mov a, R1 ; R1 contains bits 8 and 9
0335 5403        67            anl a, #00000011B ; We need only the two least significant bits
0337 F537        68            mov result+1, a ; Save result high.
0339 7855        69            mov R0, #55H ; It doesn't matter what we transmit...
033B 120360      70            lcall DO_SPI_G
033E 8936        71            mov result+0, R1 ; R1 contains bits 0 to 7. Save result low.
0340 D2A0        72            setb CE_ADC
0342             73            
0342 22          74            ret
0343             75            
0343             76   
                 77   Send_BCD mac
                 78       push ar0
                 79       mov r0, %0
                 80       lcall ?Send_BCD
                 81       pop ar0
                 82   endmac
0343             83   
0343             84   ?Send_BCD:
0343 C0E0        85       push acc
0345             86       ; Write most significant digit
0345 E8          87       mov a, r0
0346 C4          88       swap a
0347 540F        89       anl a, #0fh
0349 4430        90       orl a, #30h
034B 120398      91       lcall putchar
034E             92       ; write least significant digit
034E E8          93       mov a, r0
034F 540F        94       anl a, #0fh
0351 4430        95       orl a, #30h
0353 120398      96       lcall putchar
0356 D0E0        97       pop acc
0358 22          98       ret
0359             99       
0359            100   INIT_SPI:
0359 D2A2       101            setb MY_MISO ; Make MISO an input pin
035B C2A3       102            clr MY_SCLK ; For mode (0,0) SCLK is zero
035D D2A0       103            setb CE_ADC
035F 22         104            ret
0360            105   DO_SPI_G:
0360 C0E0       106            push acc
0362 7900       107            mov R1, #0 ; Received byte stored in R1
0364 7A08       108            mov R2, #8 ; Loop counter (8-bits)
0366            109   DO_SPI_G_LOOP:
0366 E8         110            mov a, R0 ; Byte to write is in R0
0367 33         111            rlc a ; Carry flag has bit to write
0368 F8         112            mov R0, a
0369 92A1       113            mov MY_MOSI, c
036B D2A3       114            setb MY_SCLK ; Transmit
036D A2A2       115            mov c, MY_MISO ; Read received bit
036F E9         116            mov a, R1 ; Save received bit in R1
0370 33         117            rlc a
0371 F9         118            mov R1, a
0372 C2A3       119            clr MY_SCLK
0374 DAF0       120            djnz R2, DO_SPI_G_LOOP
0376 D0E0       121            pop acc
0378 22         122            ret
0379            123    
0379            124   ; Configure the serial port and baud rate using timer 1
0379            125   InitSerialPort:
0379            126       ; Since the reset button bounces, we need to wait a bit before
0379            127       ; sending messages, or risk displaying gibberish!
0379 79DE       128       mov R1, #222
037B 78A6       129       mov R0, #166
037D D8FE       130       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
037F D9FA       131       djnz R1, $-4 ; 22.51519us*222=4.998ms
0381            132       ; Now we can safely proceed with the configuration
0381 C28E       133            clr     TR1
0383 53890F     134            anl     TMOD, #0x0f
0386 438920     135            orl     TMOD, #0x20
0389 438780     136            orl     PCON,#0x80
038C 758DF4     137            mov     TH1,#T1LOAD
038F 758BF4     138            mov     TL1,#T1LOAD
0392 D28E       139            setb TR1
0394 759852     140            mov     SCON,#0x52
0397 22         141       ret
0398            142   
0398            143   ; Send a character using the serial port
0398            144   putchar:
0398 3099FD     145       jnb TI, putchar
039B C299       146       clr TI
039D F599       147       mov SBUF, a
039F 22         148       ret
03A0            149   
03A0            150   ; Send a constant-zero-terminated string using the serial port
03A0            151   SendString:
03A0 E4         152       clr A
03A1 93         153       movc A, @A+DPTR
03A2 6006       154       jz SendStringDone
03A4 120398     155       lcall putchar
03A7 A3         156       inc DPTR
03A8 80F6       157       sjmp SendString
03AA            158   SendStringDone:
03AA 22         159       ret
03AB            160   
03AB            161   Init:
03AB 75817F     162       mov SP, #7FH
03AE 75C100     163       mov PMOD, #0 
03B1 D2AF       164       setb EA                              ; Enable interrupts
03B3 120359     165            lcall INIT_SPI
03B6 120379     166            lcall InitSerialPort
03B9 12005D     167            lcall LCD_4BIT
03BC            168   Main_Loop:
03BC 75F007     169            mov b, #7
03BF 120322     169            lcall _Read_ADC_Channel
03C2 1203ED     170            lcall Calculate_Vref
03C5            171            ;fetch result from channel 0 as room temperature
03C5 75F000     172            mov b, #0
03C8 120322     172            lcall _Read_ADC_Channel
03CB 120424     173            lcall LM335_Result_SPI_Routine
03CE            174            ;fetch result from channel 1
03CE 75F001     175            mov b, #1
03D1 120322     175            lcall _Read_ADC_Channel
03D4 120479     176       lcall Result_SPI_Routine
03D7 C002       177            push AR2
03D9 7AFA       177            mov R2, #250
03DB 12000E     177            lcall ?Wait_Milli_Seconds
03DE D002       177            pop AR2         ; 0.1 second delay between samples 
03E0 C002       178            push AR2
03E2 7AFA       178            mov R2, #250
03E4 12000E     178            lcall ?Wait_Milli_Seconds
03E7 D002       178            pop AR2
03E9 D2B7       179            setb P3.7
03EB 80CF       180            sjmp Main_Loop  
03ED            181            
03ED            182   Calculate_Vref:
03ED 753F00     183            mov y+3, #0
03F0 753E00     184            mov y+2, #0
03F3 85373D     185            mov y+1, result+1
03F6 85363C     186            mov y+0, result+0
03F9 753831     187            mov x+0, #low (VLED*1023 % 0x10000) 
03FC 75393B     187            mov x+1, #high(VLED*1023 % 0x10000) 
03FF 753A03     187            mov x+2, #low (VLED*1023 / 0x10000) 
0402 753B00     187            mov x+3, #high(VLED*1023 / 0x10000) 
0405 1202B8     188            lcall div32
0408 753C10     189            mov y+0, #low (10000 % 0x10000) 
040B 753D27     189            mov y+1, #high(10000 % 0x10000) 
040E 753E00     189            mov y+2, #low (10000 / 0x10000) 
0411 753F00     189            mov y+3, #high(10000 / 0x10000) 
0414 12022B     190            lcall mul32
0417 853B33     191            mov Vcc+3, x+3
041A 853A32     192            mov Vcc+2, x+2
041D 853931     193            mov Vcc+1, x+1
0420 853830     194            mov Vcc+0, x+0
0423            195            
0423 22         196            ret
0424            197            
0424            198   LM335_Result_SPI_Routine:
0424 753B00     199            mov x+3, #0
0427 753A00     200       mov x+2, #0
042A 853739     201       mov x+1, Result+1
042D 853638     202       mov x+0, Result
0430 85333F     203       mov y+3, Vcc+3
0433 85323E     204       mov y+2, Vcc+2
0436 85313D     205       mov y+1, Vcc+1
0439 85303C     206       mov y+0, Vcc+0
043C 12022B     207       lcall mul32
043F 753CFF     208            mov y+0, #low (1023 % 0x10000) 
0442 753D03     208            mov y+1, #high(1023 % 0x10000) 
0445 753E00     208            mov y+2, #low (1023 / 0x10000) 
0448 753F00     208            mov y+3, #high(1023 / 0x10000) 
044B 1202B8     209       lcall div32
044E 753C10     210            mov y+0, #low (2730000 % 0x10000) 
0451 753DA8     210            mov y+1, #high(2730000 % 0x10000) 
0454 753E29     210            mov y+2, #low (2730000 / 0x10000) 
0457 753F00     210            mov y+3, #high(2730000 / 0x10000) 
045A 120197     211       lcall sub32
045D 753C64     212            mov y+0, #low (100 % 0x10000) 
0460 753D00     212            mov y+1, #high(100 % 0x10000) 
0463 753E00     212            mov y+2, #low (100 / 0x10000) 
0466 753F00     212            mov y+3, #high(100 / 0x10000) 
0469 1202B8     213       lcall div32
046C 853B48     214       mov x_lm335+3, x+3
046F 853A47     215            mov x_lm335+2, x+2
0472 853946     216            mov x_lm335+1, x+1
0475 853845     217            mov x_lm335+0, x+0
0478 22         218            ret
0479            219   
0479            220   Result_SPI_Routine:
0479 753B00     221            mov x+3, #0
047C 753A00     222            mov x+2, #0
047F 853739     223            mov x+1, result+1
0482 853638     224            mov x+0, result+0
0485            225            ; Calculate temperature in Kelvin in binary with 4 digits of precision
0485 85333F     226       mov y+3, Vcc+3
0488 85323E     227       mov y+2, Vcc+2
048B 85313D     228       mov y+1, Vcc+1
048E 85303C     229       mov y+0, Vcc+0
0491 12022B     230            lcall mul32
0494 753CFF     231            mov y+0, #low (1023 % 0x10000) 
0497 753D03     231            mov y+1, #high(1023 % 0x10000) 
049A 753E00     231            mov y+2, #low (1023 / 0x10000) 
049D 753F00     231            mov y+3, #high(1023 / 0x10000) 
04A0 1202B8     232            lcall div32
04A3 753C64     233            mov y+0, #low (100 % 0x10000) 
04A6 753D00     233            mov y+1, #high(100 % 0x10000) 
04A9 753E00     233            mov y+2, #low (100 / 0x10000) 
04AC 753F00     233            mov y+3, #high(100 / 0x10000) 
04AF 12022B     234            lcall mul32     
04B2 753CC6     235            mov y+0, #low (454 % 0x10000) 
04B5 753D01     235            mov y+1, #high(454 % 0x10000) 
04B8 753E00     235            mov y+2, #low (454 / 0x10000) 
04BB 753F00     235            mov y+3, #high(454 / 0x10000)   ;gain*1000
04BE 1202B8     236            lcall div32
04C1 753C29     237            mov y+0, #low (41 % 0x10000) 
04C4 753D00     237            mov y+1, #high(41 % 0x10000) 
04C7 753E00     237            mov y+2, #low (41 / 0x10000) 
04CA 753F00     237            mov y+3, #high(41 / 0x10000) 
04CD 1202B8     238            lcall div32
04D0            239            
04D0 85483F     240            mov y+3, x_lm335+3
04D3 85473E     241            mov y+2, x_lm335+2
04D6 85463D     242            mov y+1, x_lm335+1
04D9 85453C     243            mov y+0, x_lm335+0
04DC 120176     244            lcall add32
04DF 1200B1     245            lcall hex2bcd
04E2            246            
04E2 C000       247       push ar0
04E4 A841       247       mov r0, bcd+1
04E6 120343     247       lcall ?Send_BCD
04E9 D000       247       pop ar0
04EB 740A       248            mov a, #'\n'
04ED 120398     249            lcall putchar
04F0            250            
04F0 C0E0       251            push acc
04F2 7401       251            mov a, #1
04F4 14         251            dec a
04F5 120096     251            lcall ?Set_Cursor_1 ; Select column and row
04F8 D0E0       251            pop acc
04FA            252            
04FA            253            
04FA            254   
04FA            255   Display_Temp_LCD:
04FA C000       256            push ar0
04FC A844       256            mov r0, bcd+4
04FE 12009B     256            lcall ?Display_BCD
0501 D000       256            pop ar0
0503 C000       257            push ar0
0505 A843       257            mov r0, bcd+3
0507 12009B     257            lcall ?Display_BCD
050A D000       257            pop ar0
050C C000       258            push ar0
050E A842       258            mov r0, bcd+2
0510 12009B     258            lcall ?Display_BCD
0513 D000       258            pop ar0
0515 C000       259            push ar0
0517 A841       259            mov r0, bcd+1
0519 12009B     259            lcall ?Display_BCD
051C D000       259            pop ar0
051E C000       260            push ar0
0520 A840       260            mov r0, bcd
0522 12009B     260            lcall ?Display_BCD
0525 D000       260            pop ar0
0527 22         261       ret
0528            262   end
